{"version":3,"sources":["webpack://canvas/webpack/bootstrap","webpack://canvas/./node_modules/svg.js/dist/svg.js","webpack://canvas/./node_modules/svg.draggable.js/dist/svg.draggable.js","webpack://canvas/./node_modules/svg.resize.js/dist/svg.resize.js","webpack://canvas/./node_modules/svg.select.js/dist/svg.select.js","webpack://canvas/./node_modules/svg.draw.js/dist/svg.draw.js","webpack://canvas/./src/master.ts","webpack://canvas/./src/canvasModel.ts","webpack://canvas/./src/canvasController.ts","webpack://canvas/./src/consts.ts","webpack://canvas/./src/svg.patch.ts","webpack://canvas/./src/shared.ts","webpack://canvas/./src/drawHandler.ts","webpack://canvas/./src/canvasView.ts","webpack://canvas/./src/canvas.ts"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","__WEBPACK_AMD_DEFINE_RESULT__","root","window","this","undefined","document","SVG","element","supported","Doc","parser","draw","prepare","xmlns","xlink","svgjs","createElementNS","createSVGRect","did","eid","capitalize","setAttribute","extend","methods","slice","arguments","pop","length","Set","inherit","invent","config","initializer","constructor","construct","parent","Container","adopt","node","instance","nodeName","parentNode","SVGElement","Nested","Gradient","Element","type","namespace","defs","setData","JSON","parse","getAttribute","body","getElementsByTagName","documentElement","nested","size","style","attr","poly","polyline","path","native","addEventListener","regex","numberAndUnit","hex","rgb","reference","transforms","whitespace","isHex","isRgb","isCss","isBlank","isNumber","isPercent","isImage","delimiter","hyphen","pathLetters","isPathLetter","numbersWithDots","dots","utils","map","array","block","il","result","push","filter","radians","Math","PI","degrees","filterSVGElements","nodes","el","defaults","attrs","fill-opacity","stroke-opacity","stroke-width","stroke-linejoin","stroke-linecap","fill","stroke","opacity","x","y","cx","cy","width","height","rx","ry","offset","stop-opacity","stop-color","font-size","font-family","text-anchor","Color","color","match","g","b","test","exec","replace","parseInt","substring","join","toString","toHex","compToHex","toRgb","brightness","morph","destination","at","pos","isColor","Array","fallback","valueOf","lastValue","lastDestination","settle","seen","indexOf","isArray","split","string","trim","parseFloat","reverse","clone","array_clone","arr","PointArray","toLine","x1","y1","x2","y2","points","len","move","box","bbox","isNaN","getBBox","pathHandlers","M","p0","L","H","V","C","S","Q","T","Z","A","mlhvqtcsa","j","jl","toUpperCase","PathArray","a","arrayToString","equalCommands","pathArray","sourceArray","destinationArray","paramCnt","pathRegReplace","reduce","prev","curr","concat","Point","index","Number","unit","isFinite","toJSON","plus","number","minus","times","divide","to","relative","_stroke","_event","_events","dom","center","proportionalSize","writeDataToDom","assignNewId","cloneNode","add","after","remove","removeElement","addTo","put","putIn","id","inside","show","hide","visible","classes","hasClass","addClass","removeClass","toggleClass","matches","doc","parents","selector","matchesSelector","msMatchesSelector","mozMatchesSelector","webkitMatchesSelector","oMatchesSelector","svg","well","createElement","Parent","appendChild","innerHTML","firstChild","childNodes","each","lines","fn","removeAttribute","keys","stringify","is","obj","easing","-","<>","cos",">","sin","<","from","MorphObj","Situation","init","reversed","reversing","duration","delay","start","Date","finish","ease","loop","loops","animations","styles","once","FX","_target","situations","active","situation","paused","lastPos","absPos","_speed","animate","queue","target","timeToAbsPos","timestamp","absPosToTime","startAnimFrame","stopAnimFrame","animationFrame","requestAnimationFrame","step","cancelAnimationFrame","startCurrent","initAnimations","shift","dequeue","stop","source","initialTransformation","matrixify","clearQueue","clearCurrent","jumpToEnd","atEnd","reset","temp","atStart","isAbsPos","durDivSpd","speed","pause","last","play","progress","easeIt","on","wrapper","e","detail","off","_callStart","during","eased","afterAll","duringAll","method","args","ignoreTime","absPosInt","lastLoop","max","floor","Boolean","min","fire","fx","eachAt","self","apply","Matrix","multiply","undo","extract","matrix","isEased","setTimeout","real","v","G","transform","num","Text","plot","leading","viewbox","ViewBox","update","Stop","Box","left","top","fullBox","merge","xMin","Infinity","xMax","yMin","yMax","pts","forEach","BBox","contains","Exception","topParent","Shape","clientLeft","clientTop","clientWidth","clientHeight","tbox","console","warn","rbox","RBox","getBoundingClientRect","addOffset","pageXOffset","pageYOffset","screenCTM","inverse","base","arrayToMatrix","abcdef","px","deltaTransformPoint","py","skewX","atan2","f","transformedX","sqrt","transformedY","skewY","scaleX","scaleY","rotation","parseMatrix","translate","scale","around","rotate","flip","skew","tan","createSVGMatrix","float32String","ctm","getCTM","rect","getScreenCTM","point","createSVGPoint","matrixTransform","attributes","nodeValue","image","Image","pattern","setAttributeNS","rebuild","ensureCentre","Rotate","Scale","Skew","Translate","untransform","str","kv","toParent","pCtm","toDoc","Transformation","inversed","params","_undo","cssText","camelCase","children","insertBefore","has","first","deep","removeChild","clear","hasChildNodes","lastChild","_defs","ungroup","depth","Defs","flatten","view","we","he","wm","hm","reg","offsetWidth","offsetHeight","zoom","event","listenerId","events","listener","binding","options","bag","_svgjsListenerId","ev","removeEventListener","data","Event","dispatchEvent","CustomEvent","cancelable","gbox","trans","group","getElementById","version","spof","nextSibling","siblings","position","next","previous","forward","backward","front","back","before","Mask","targets","unmask","mask","maskWith","masker","ClipPath","unclip","clip","clipWith","clipper","gradient","fy","Pattern","patternUnits","Bare","words","text","createTextNode","symbol","Use","file","use","Rect","Circle","circle","Ellipse","ellipse","Line","line","Polyline","Polygon","polygon","_array","morphArray","Path","load","url","img","_loaded","ratio","_error","src","loaded","error","_rebuild","_build","oy","nodeType","newLined","textContent","build","tspan","newLine","textPath","blankLineOffset","dy","plain","Tspan","dx","getComputedTextLength","TextPath","track","link","linkTo","Marker","ref","marker","sugar","prefix","toLowerCase","charAt","comp","w","h","abs","extension","dmove","radius","getTotalLength","pointAt","getPointAtLength","font","members","elements","splice","set","remember","k","memory","forget","_memory","idFromReference","select","query","querySelectorAll","CustomEventPoly","bubbles","createEvent","initCustomEvent","lastTime","vendors","callback","currTime","getTime","timeToCall","clearTimeout","factory","DragHandler","constraint","val","_this","transformPoint","touches","changedTouches","clientX","clientY","which","buttons","handler","defaultPrevented","preventDefault","stopPropagation","anchorOffset","startPoints","drag","end","gx","gy","coord","minX","maxX","minY","maxY","snapToGrid","draggable","dragHandler","ResizeHandler","parameters","lastUpdateCall","_extractPosition","resize","txPt","fontSize","pointCoords","calc","diffX","diffY","snap","checkAspectRatio","current","sAngle","pAngle","angle","snapToAngle","done","flag","pointCoordsY","constraintToBox","orgX","orgY","isReverse","saveAspectRatio","updatedSnap","aspectRatio","newW","newH","newAspectRatio","SelectHandler","pointSelection","isSelected","rectSelection","pointsList","lt","rt","rb","lb","pointCoord","setting","isPointCentered","settings","selectize","pointsLists","option","pointsExclude","deepSelect","selectPoints","selectRect","observe","cleanup","drawPoints","getPointArray","curriedEvent","returnValue","pageX","pageY","drawPoint","classPoints","pointType","drawCircle","drawRect","Error","pointSize","updatePointSelection","updateRectSelection","coords","rotationPoint","getMoseDownFunc","eventName","classRect","pointElement","MutationObserver","observerInst","disconnect","PaintHandler","plugin","getPlugin","startPoint","pointPlugin","clean","cancel","param","plugins","paintHandler","shapes","shapesArr","drawCircles","FrameZoom","Rotation","UpdateReasons","MasterImpl","_classCallCheck","listeners","reason","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_step","_iterator","iterator","notify","err","CanvasModelImpl","_MasterImpl","ObjectStateClass","canvasModel_classCallCheck","_possibleConstructorReturn","_getPrototypeOf","activeElement","clientID","attributeID","canvasSize","drawData","enabled","shapeType","numberOfPoints","initialState","imageOffset","imageSize","focusData","padding","gridSize","objects","rememberAngle","_inherits","direction","oldScale","newScale","MIN","MAX","mutiplier","ZOOM","topOffset","leftOffset","MOVE","frameData","objectStates","_this2","IMAGE","then","OBJECTS","exception","ACTIVATE","CLOCKWISE90","fit","FOCUS","FIT","stepX","stepY","GRID","assign","DRAW","log","canvas","grid","geometry","CanvasControllerImpl","model","canvasController_classCallCheck","lastDragPosition","isDragging","objectStateClass","consts","BASE_STROKE_WIDTH","BASE_POINT_SIZE","TEXT_MARGIN","AREA_THRESHOLD","SIZE_THRESHOLD","originalDraw","_len","_key","_i","_Object$keys","_array$i","_slicedToArray","_array$i2","originalDraggable","_len2","_key2","svg_patch_i2","_Object$keys2","originalResize","_len3","_key3","_i3","_Object$keys3","translateFromSVG","output","transformationMatrix","pt","translateToSVG","Mode","DrawHandlerImpl","onDrawDone","background","_this3","drawHandler_classCallCheck","crosshair","drawInstance","_translateToSVG4","drawHandler_slicedToArray","drawHandler_createClass","zOrder","MAX_SAFE_INTEGER","addCrosshair","removeCrosshair","frameWidth","frameHeight","_translateFromSVG2","xtl","ytl","xbr","ybr","_translateToSVG2","sizeDecrement","handleUndo","lastDrawnPoint","handleSlide","shiftKey","includes","pow","drawPolyshape","drawBox","drawPolygon","drawPolyline","initDrawing","startDraw","closeDrawing","darker","percentage","R","round","B","rHex","gHex","bHex","CanvasViewImpl","controller","canvasView_classCallCheck","svgShapes","svgTexts","IDLE","loadingAnimation","adoptedText","gridPath","gridPattern","content","adoptedContent","drawHandler","loadingCircle","gridDefs","gridRect","canvasFirstMounted","animationName","enableDrag","disableDrag","deltaY","canvasView_slicedToArray","oncontextmenu","subscribe","canvasView_createClass","state","_i2","_arr2","getElementsByClassName","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_step2","_iterator2","updateTextPosition","_i5","_arr5","_i6","_arr6","classList","backgroundImage","_arr3","_i4","_arr4","deactivate","_i7","addObjects","offsetLeft","offsetTop","dragged","activate","states","_iteratorNormalCompletion3","_didIteratorError3","_iteratorError3","_step3","_iterator3","objectType","addTag","translatedPoints","addRect","stringified","acc","idx","addPolygon","addPolyline","addPoints","visibility","addText","shape","append","DRAG","RESIZE","_translateFromSVG4","_ref","_ref2","_iteratorNormalCompletion4","_didIteratorError4","_iteratorError4","_step4","_iterator4","label","attrNames","_i8","attrID","_points","color-rendering","shape-rendering","CanvasImpl","canvas_classCallCheck","html","setup","focus"],"mappings":"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","file":"cvat-canvas.node.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 5);\n","/*!\n* svg.js - A lightweight library for manipulating and animating SVG.\n* @version 2.7.1\n* https://svgdotjs.github.io/\n*\n* @copyright Wout Fierens <wout@mick-wout.com>\n* @license MIT\n*\n* BUILT: Fri Nov 30 2018 10:01:55 GMT+0100 (GMT+01:00)\n*/;\n(function(root, factory) {\r\n  /* istanbul ignore next */\r\n  if (typeof define === 'function' && define.amd) {\r\n    define(function(){\r\n      return factory(root, root.document)\r\n    })\r\n  } else if (typeof exports === 'object') {\r\n    module.exports = root.document ? factory(root, root.document) : function(w){ return factory(w, w.document) }\r\n  } else {\r\n    root.SVG = factory(root, root.document)\r\n  }\r\n}(typeof window !== \"undefined\" ? window : this, function(window, document) {\r\n\r\n// Find global reference - uses 'this' by default when available,\r\n// falls back to 'window' otherwise (for bundlers like Webpack)\r\nvar globalRef = (typeof this !== \"undefined\") ? this : window;\r\n\r\n// The main wrapping element\r\nvar SVG = globalRef.SVG = function(element) {\r\n  if (SVG.supported) {\r\n    element = new SVG.Doc(element)\r\n\r\n    if(!SVG.parser.draw)\r\n      SVG.prepare()\r\n\r\n    return element\r\n  }\r\n}\r\n\r\n// Default namespaces\r\nSVG.ns    = 'http://www.w3.org/2000/svg'\r\nSVG.xmlns = 'http://www.w3.org/2000/xmlns/'\r\nSVG.xlink = 'http://www.w3.org/1999/xlink'\r\nSVG.svgjs = 'http://svgjs.com/svgjs'\r\n\r\n// Svg support test\r\nSVG.supported = (function() {\r\n  return !! document.createElementNS &&\r\n         !! document.createElementNS(SVG.ns,'svg').createSVGRect\r\n})()\r\n\r\n// Don't bother to continue if SVG is not supported\r\nif (!SVG.supported) return false\r\n\r\n// Element id sequence\r\nSVG.did  = 1000\r\n\r\n// Get next named element id\r\nSVG.eid = function(name) {\r\n  return 'Svgjs' + capitalize(name) + (SVG.did++)\r\n}\r\n\r\n// Method for element creation\r\nSVG.create = function(name) {\r\n  // create element\r\n  var element = document.createElementNS(this.ns, name)\r\n\r\n  // apply unique id\r\n  element.setAttribute('id', this.eid(name))\r\n\r\n  return element\r\n}\r\n\r\n// Method for extending objects\r\nSVG.extend = function() {\r\n  var modules, methods, key, i\r\n\r\n  // Get list of modules\r\n  modules = [].slice.call(arguments)\r\n\r\n  // Get object with extensions\r\n  methods = modules.pop()\r\n\r\n  for (i = modules.length - 1; i >= 0; i--)\r\n    if (modules[i])\r\n      for (key in methods)\r\n        modules[i].prototype[key] = methods[key]\r\n\r\n  // Make sure SVG.Set inherits any newly added methods\r\n  if (SVG.Set && SVG.Set.inherit)\r\n    SVG.Set.inherit()\r\n}\r\n\r\n// Invent new element\r\nSVG.invent = function(config) {\r\n  // Create element initializer\r\n  var initializer = typeof config.create == 'function' ?\r\n    config.create :\r\n    function() {\r\n      this.constructor.call(this, SVG.create(config.create))\r\n    }\r\n\r\n  // Inherit prototype\r\n  if (config.inherit)\r\n    initializer.prototype = new config.inherit\r\n\r\n  // Extend with methods\r\n  if (config.extend)\r\n    SVG.extend(initializer, config.extend)\r\n\r\n  // Attach construct method to parent\r\n  if (config.construct)\r\n    SVG.extend(config.parent || SVG.Container, config.construct)\r\n\r\n  return initializer\r\n}\r\n\r\n// Adopt existing svg elements\r\nSVG.adopt = function(node) {\r\n  // check for presence of node\r\n  if (!node) return null\r\n\r\n  // make sure a node isn't already adopted\r\n  if (node.instance) return node.instance\r\n\r\n  // initialize variables\r\n  var element\r\n\r\n  // adopt with element-specific settings\r\n  if (node.nodeName == 'svg')\r\n    element = node.parentNode instanceof window.SVGElement ? new SVG.Nested : new SVG.Doc\r\n  else if (node.nodeName == 'linearGradient')\r\n    element = new SVG.Gradient('linear')\r\n  else if (node.nodeName == 'radialGradient')\r\n    element = new SVG.Gradient('radial')\r\n  else if (SVG[capitalize(node.nodeName)])\r\n    element = new SVG[capitalize(node.nodeName)]\r\n  else\r\n    element = new SVG.Element(node)\r\n\r\n  // ensure references\r\n  element.type  = node.nodeName\r\n  element.node  = node\r\n  node.instance = element\r\n\r\n  // SVG.Class specific preparations\r\n  if (element instanceof SVG.Doc)\r\n    element.namespace().defs()\r\n\r\n  // pull svgjs data from the dom (getAttributeNS doesn't work in html5)\r\n  element.setData(JSON.parse(node.getAttribute('svgjs:data')) || {})\r\n\r\n  return element\r\n}\r\n\r\n// Initialize parsing element\r\nSVG.prepare = function() {\r\n  // Select document body and create invisible svg element\r\n  var body = document.getElementsByTagName('body')[0]\r\n    , draw = (body ? new SVG.Doc(body) : SVG.adopt(document.documentElement).nested()).size(2, 0)\r\n\r\n  // Create parser object\r\n  SVG.parser = {\r\n    body: body || document.documentElement\r\n  , draw: draw.style('opacity:0;position:absolute;left:-100%;top:-100%;overflow:hidden').attr('focusable', 'false').node\r\n  , poly: draw.polyline().node\r\n  , path: draw.path().node\r\n  , native: SVG.create('svg')\r\n  }\r\n}\r\n\r\nSVG.parser = {\r\n  native: SVG.create('svg')\r\n}\r\n\r\ndocument.addEventListener('DOMContentLoaded', function() {\r\n  if(!SVG.parser.draw)\r\n    SVG.prepare()\r\n}, false)\r\n\n// Storage for regular expressions\r\nSVG.regex = {\r\n  // Parse unit value\r\n  numberAndUnit:    /^([+-]?(\\d+(\\.\\d*)?|\\.\\d+)(e[+-]?\\d+)?)([a-z%]*)$/i\r\n\r\n  // Parse hex value\r\n, hex:              /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i\r\n\r\n  // Parse rgb value\r\n, rgb:              /rgb\\((\\d+),(\\d+),(\\d+)\\)/\r\n\r\n  // Parse reference id\r\n, reference:        /#([a-z0-9\\-_]+)/i\r\n\r\n  // splits a transformation chain\r\n, transforms:       /\\)\\s*,?\\s*/\r\n\r\n  // Whitespace\r\n, whitespace:       /\\s/g\r\n\r\n  // Test hex value\r\n, isHex:            /^#[a-f0-9]{3,6}$/i\r\n\r\n  // Test rgb value\r\n, isRgb:            /^rgb\\(/\r\n\r\n  // Test css declaration\r\n, isCss:            /[^:]+:[^;]+;?/\r\n\r\n  // Test for blank string\r\n, isBlank:          /^(\\s+)?$/\r\n\r\n  // Test for numeric string\r\n, isNumber:         /^[+-]?(\\d+(\\.\\d*)?|\\.\\d+)(e[+-]?\\d+)?$/i\r\n\r\n  // Test for percent value\r\n, isPercent:        /^-?[\\d\\.]+%$/\r\n\r\n  // Test for image url\r\n, isImage:          /\\.(jpg|jpeg|png|gif|svg)(\\?[^=]+.*)?/i\r\n\r\n  // split at whitespace and comma\r\n, delimiter:        /[\\s,]+/\r\n\r\n  // The following regex are used to parse the d attribute of a path\r\n\r\n  // Matches all hyphens which are not after an exponent\r\n, hyphen:           /([^e])\\-/gi\r\n\r\n  // Replaces and tests for all path letters\r\n, pathLetters:      /[MLHVCSQTAZ]/gi\r\n\r\n  // yes we need this one, too\r\n, isPathLetter:     /[MLHVCSQTAZ]/i\r\n\r\n  // matches 0.154.23.45\r\n, numbersWithDots:  /((\\d?\\.\\d+(?:e[+-]?\\d+)?)((?:\\.\\d+(?:e[+-]?\\d+)?)+))+/gi\r\n\r\n  // matches .\r\n, dots:             /\\./g\r\n}\r\n\nSVG.utils = {\r\n  // Map function\r\n  map: function(array, block) {\r\n    var i\r\n      , il = array.length\r\n      , result = []\r\n\r\n    for (i = 0; i < il; i++)\r\n      result.push(block(array[i]))\r\n\r\n    return result\r\n  }\r\n\r\n  // Filter function\r\n, filter: function(array, block) {\r\n    var i\r\n      , il = array.length\r\n      , result = []\r\n\r\n    for (i = 0; i < il; i++)\r\n      if (block(array[i]))\r\n        result.push(array[i])\r\n\r\n    return result\r\n  }\r\n\r\n  // Degrees to radians\r\n, radians: function(d) {\r\n    return d % 360 * Math.PI / 180\r\n  }\r\n\r\n  // Radians to degrees\r\n, degrees: function(r) {\r\n    return r * 180 / Math.PI % 360\r\n  }\r\n\r\n, filterSVGElements: function(nodes) {\r\n    return this.filter( nodes, function(el) { return el instanceof window.SVGElement })\r\n  }\r\n\r\n}\n\r\nSVG.defaults = {\r\n  // Default attribute values\r\n  attrs: {\r\n    // fill and stroke\r\n    'fill-opacity':     1\r\n  , 'stroke-opacity':   1\r\n  , 'stroke-width':     0\r\n  , 'stroke-linejoin':  'miter'\r\n  , 'stroke-linecap':   'butt'\r\n  , fill:               '#000000'\r\n  , stroke:             '#000000'\r\n  , opacity:            1\r\n    // position\r\n  , x:                  0\r\n  , y:                  0\r\n  , cx:                 0\r\n  , cy:                 0\r\n    // size\r\n  , width:              0\r\n  , height:             0\r\n    // radius\r\n  , r:                  0\r\n  , rx:                 0\r\n  , ry:                 0\r\n    // gradient\r\n  , offset:             0\r\n  , 'stop-opacity':     1\r\n  , 'stop-color':       '#000000'\r\n    // text\r\n  , 'font-size':        16\r\n  , 'font-family':      'Helvetica, Arial, sans-serif'\r\n  , 'text-anchor':      'start'\r\n  }\r\n\r\n}\n// Module for color convertions\r\nSVG.Color = function(color) {\r\n  var match\r\n\r\n  // initialize defaults\r\n  this.r = 0\r\n  this.g = 0\r\n  this.b = 0\r\n\r\n  if(!color) return\r\n\r\n  // parse color\r\n  if (typeof color === 'string') {\r\n    if (SVG.regex.isRgb.test(color)) {\r\n      // get rgb values\r\n      match = SVG.regex.rgb.exec(color.replace(SVG.regex.whitespace,''))\r\n\r\n      // parse numeric values\r\n      this.r = parseInt(match[1])\r\n      this.g = parseInt(match[2])\r\n      this.b = parseInt(match[3])\r\n\r\n    } else if (SVG.regex.isHex.test(color)) {\r\n      // get hex values\r\n      match = SVG.regex.hex.exec(fullHex(color))\r\n\r\n      // parse numeric values\r\n      this.r = parseInt(match[1], 16)\r\n      this.g = parseInt(match[2], 16)\r\n      this.b = parseInt(match[3], 16)\r\n\r\n    }\r\n\r\n  } else if (typeof color === 'object') {\r\n    this.r = color.r\r\n    this.g = color.g\r\n    this.b = color.b\r\n\r\n  }\r\n\r\n}\r\n\r\nSVG.extend(SVG.Color, {\r\n  // Default to hex conversion\r\n  toString: function() {\r\n    return this.toHex()\r\n  }\r\n  // Build hex value\r\n, toHex: function() {\r\n    return '#'\r\n      + compToHex(this.r)\r\n      + compToHex(this.g)\r\n      + compToHex(this.b)\r\n  }\r\n  // Build rgb value\r\n, toRgb: function() {\r\n    return 'rgb(' + [this.r, this.g, this.b].join() + ')'\r\n  }\r\n  // Calculate true brightness\r\n, brightness: function() {\r\n    return (this.r / 255 * 0.30)\r\n         + (this.g / 255 * 0.59)\r\n         + (this.b / 255 * 0.11)\r\n  }\r\n  // Make color morphable\r\n, morph: function(color) {\r\n    this.destination = new SVG.Color(color)\r\n\r\n    return this\r\n  }\r\n  // Get morphed color at given position\r\n, at: function(pos) {\r\n    // make sure a destination is defined\r\n    if (!this.destination) return this\r\n\r\n    // normalise pos\r\n    pos = pos < 0 ? 0 : pos > 1 ? 1 : pos\r\n\r\n    // generate morphed color\r\n    return new SVG.Color({\r\n      r: ~~(this.r + (this.destination.r - this.r) * pos)\r\n    , g: ~~(this.g + (this.destination.g - this.g) * pos)\r\n    , b: ~~(this.b + (this.destination.b - this.b) * pos)\r\n    })\r\n  }\r\n\r\n})\r\n\r\n// Testers\r\n\r\n// Test if given value is a color string\r\nSVG.Color.test = function(color) {\r\n  color += ''\r\n  return SVG.regex.isHex.test(color)\r\n      || SVG.regex.isRgb.test(color)\r\n}\r\n\r\n// Test if given value is a rgb object\r\nSVG.Color.isRgb = function(color) {\r\n  return color && typeof color.r == 'number'\r\n               && typeof color.g == 'number'\r\n               && typeof color.b == 'number'\r\n}\r\n\r\n// Test if given value is a color\r\nSVG.Color.isColor = function(color) {\r\n  return SVG.Color.isRgb(color) || SVG.Color.test(color)\r\n}\n// Module for array conversion\r\nSVG.Array = function(array, fallback) {\r\n  array = (array || []).valueOf()\r\n\r\n  // if array is empty and fallback is provided, use fallback\r\n  if (array.length == 0 && fallback)\r\n    array = fallback.valueOf()\r\n\r\n  // parse array\r\n  this.value = this.parse(array)\r\n}\r\n\r\nSVG.extend(SVG.Array, {\r\n  // Make array morphable\r\n  morph: function(array) {\r\n    this.destination = this.parse(array)\r\n\r\n    // normalize length of arrays\r\n    if (this.value.length != this.destination.length) {\r\n      var lastValue       = this.value[this.value.length - 1]\r\n        , lastDestination = this.destination[this.destination.length - 1]\r\n\r\n      while(this.value.length > this.destination.length)\r\n        this.destination.push(lastDestination)\r\n      while(this.value.length < this.destination.length)\r\n        this.value.push(lastValue)\r\n    }\r\n\r\n    return this\r\n  }\r\n  // Clean up any duplicate points\r\n, settle: function() {\r\n    // find all unique values\r\n    for (var i = 0, il = this.value.length, seen = []; i < il; i++)\r\n      if (seen.indexOf(this.value[i]) == -1)\r\n        seen.push(this.value[i])\r\n\r\n    // set new value\r\n    return this.value = seen\r\n  }\r\n  // Get morphed array at given position\r\n, at: function(pos) {\r\n    // make sure a destination is defined\r\n    if (!this.destination) return this\r\n\r\n    // generate morphed array\r\n    for (var i = 0, il = this.value.length, array = []; i < il; i++)\r\n      array.push(this.value[i] + (this.destination[i] - this.value[i]) * pos)\r\n\r\n    return new SVG.Array(array)\r\n  }\r\n  // Convert array to string\r\n, toString: function() {\r\n    return this.value.join(' ')\r\n  }\r\n  // Real value\r\n, valueOf: function() {\r\n    return this.value\r\n  }\r\n  // Parse whitespace separated string\r\n, parse: function(array) {\r\n    array = array.valueOf()\r\n\r\n    // if already is an array, no need to parse it\r\n    if (Array.isArray(array)) return array\r\n\r\n    return this.split(array)\r\n  }\r\n  // Strip unnecessary whitespace\r\n, split: function(string) {\r\n    return string.trim().split(SVG.regex.delimiter).map(parseFloat)\r\n  }\r\n  // Reverse array\r\n, reverse: function() {\r\n    this.value.reverse()\r\n\r\n    return this\r\n  }\r\n, clone: function() {\r\n    var clone = new this.constructor()\r\n    clone.value = array_clone(this.value)\r\n    return clone\r\n  }\r\n})\n// Poly points array\r\nSVG.PointArray = function(array, fallback) {\r\n  SVG.Array.call(this, array, fallback || [[0,0]])\r\n}\r\n\r\n// Inherit from SVG.Array\r\nSVG.PointArray.prototype = new SVG.Array\r\nSVG.PointArray.prototype.constructor = SVG.PointArray\r\n\r\nSVG.extend(SVG.PointArray, {\r\n  // Convert array to string\r\n  toString: function() {\r\n    // convert to a poly point string\r\n    for (var i = 0, il = this.value.length, array = []; i < il; i++)\r\n      array.push(this.value[i].join(','))\r\n\r\n    return array.join(' ')\r\n  }\r\n  // Convert array to line object\r\n, toLine: function() {\r\n    return {\r\n      x1: this.value[0][0]\r\n    , y1: this.value[0][1]\r\n    , x2: this.value[1][0]\r\n    , y2: this.value[1][1]\r\n    }\r\n  }\r\n  // Get morphed array at given position\r\n, at: function(pos) {\r\n    // make sure a destination is defined\r\n    if (!this.destination) return this\r\n\r\n    // generate morphed point string\r\n    for (var i = 0, il = this.value.length, array = []; i < il; i++)\r\n      array.push([\r\n        this.value[i][0] + (this.destination[i][0] - this.value[i][0]) * pos\r\n      , this.value[i][1] + (this.destination[i][1] - this.value[i][1]) * pos\r\n      ])\r\n\r\n    return new SVG.PointArray(array)\r\n  }\r\n  // Parse point string and flat array\r\n, parse: function(array) {\r\n    var points = []\r\n\r\n    array = array.valueOf()\r\n\r\n    // if it is an array\r\n    if (Array.isArray(array)) {\r\n      // and it is not flat, there is no need to parse it\r\n      if(Array.isArray(array[0])) {\r\n        // make sure to use a clone\r\n        return array.map(function (el) { return el.slice() })\r\n      } else if (array[0].x != null){\r\n        // allow point objects to be passed\r\n        return array.map(function (el) { return [el.x, el.y] })\r\n      }\r\n    } else { // Else, it is considered as a string\r\n      // parse points\r\n      array = array.trim().split(SVG.regex.delimiter).map(parseFloat)\r\n    }\r\n\r\n    // validate points - https://svgwg.org/svg2-draft/shapes.html#DataTypePoints\r\n    // Odd number of coordinates is an error. In such cases, drop the last odd coordinate.\r\n    if (array.length % 2 !== 0) array.pop()\r\n\r\n    // wrap points in two-tuples and parse points as floats\r\n    for(var i = 0, len = array.length; i < len; i = i + 2)\r\n      points.push([ array[i], array[i+1] ])\r\n\r\n    return points\r\n  }\r\n  // Move point string\r\n, move: function(x, y) {\r\n    var box = this.bbox()\r\n\r\n    // get relative offset\r\n    x -= box.x\r\n    y -= box.y\r\n\r\n    // move every point\r\n    if (!isNaN(x) && !isNaN(y))\r\n      for (var i = this.value.length - 1; i >= 0; i--)\r\n        this.value[i] = [this.value[i][0] + x, this.value[i][1] + y]\r\n\r\n    return this\r\n  }\r\n  // Resize poly string\r\n, size: function(width, height) {\r\n    var i, box = this.bbox()\r\n\r\n    // recalculate position of all points according to new size\r\n    for (i = this.value.length - 1; i >= 0; i--) {\r\n      if(box.width) this.value[i][0] = ((this.value[i][0] - box.x) * width)  / box.width  + box.x\r\n      if(box.height) this.value[i][1] = ((this.value[i][1] - box.y) * height) / box.height + box.y\r\n    }\r\n\r\n    return this\r\n  }\r\n  // Get bounding box of points\r\n, bbox: function() {\r\n    SVG.parser.poly.setAttribute('points', this.toString())\r\n\r\n    return SVG.parser.poly.getBBox()\r\n  }\r\n})\r\n\nvar pathHandlers = {\r\n  M: function(c, p, p0) {\r\n    p.x = p0.x = c[0]\r\n    p.y = p0.y = c[1]\r\n\r\n    return ['M', p.x, p.y]\r\n  },\r\n  L: function(c, p) {\r\n    p.x = c[0]\r\n    p.y = c[1]\r\n    return ['L', c[0], c[1]]\r\n  },\r\n  H: function(c, p) {\r\n    p.x = c[0]\r\n    return ['H', c[0]]\r\n  },\r\n  V: function(c, p) {\r\n    p.y = c[0]\r\n    return ['V', c[0]]\r\n  },\r\n  C: function(c, p) {\r\n    p.x = c[4]\r\n    p.y = c[5]\r\n    return ['C', c[0], c[1], c[2], c[3], c[4], c[5]]\r\n  },\r\n  S: function(c, p) {\r\n    p.x = c[2]\r\n    p.y = c[3]\r\n    return ['S', c[0], c[1], c[2], c[3]]\r\n  },\r\n  Q: function(c, p) {\r\n    p.x = c[2]\r\n    p.y = c[3]\r\n    return ['Q', c[0], c[1], c[2], c[3]]\r\n  },\r\n  T: function(c, p) {\r\n    p.x = c[0]\r\n    p.y = c[1]\r\n    return ['T', c[0], c[1]]\r\n  },\r\n  Z: function(c, p, p0) {\r\n    p.x = p0.x\r\n    p.y = p0.y\r\n    return ['Z']\r\n  },\r\n  A: function(c, p) {\r\n    p.x = c[5]\r\n    p.y = c[6]\r\n    return ['A', c[0], c[1], c[2], c[3], c[4], c[5], c[6]]\r\n  }\r\n}\r\n\r\nvar mlhvqtcsa = 'mlhvqtcsaz'.split('')\r\n\r\nfor(var i = 0, il = mlhvqtcsa.length; i < il; ++i){\r\n  pathHandlers[mlhvqtcsa[i]] = (function(i){\r\n    return function(c, p, p0) {\r\n      if(i == 'H') c[0] = c[0] + p.x\r\n      else if(i == 'V') c[0] = c[0] + p.y\r\n      else if(i == 'A'){\r\n        c[5] = c[5] + p.x,\r\n        c[6] = c[6] + p.y\r\n      }\r\n      else\r\n        for(var j = 0, jl = c.length; j < jl; ++j) {\r\n          c[j] = c[j] + (j%2 ? p.y : p.x)\r\n        }\r\n\r\n      return pathHandlers[i](c, p, p0)\r\n    }\r\n  })(mlhvqtcsa[i].toUpperCase())\r\n}\r\n\r\n// Path points array\r\nSVG.PathArray = function(array, fallback) {\r\n  SVG.Array.call(this, array, fallback || [['M', 0, 0]])\r\n}\r\n\r\n// Inherit from SVG.Array\r\nSVG.PathArray.prototype = new SVG.Array\r\nSVG.PathArray.prototype.constructor = SVG.PathArray\r\n\r\nSVG.extend(SVG.PathArray, {\r\n  // Convert array to string\r\n  toString: function() {\r\n    return arrayToString(this.value)\r\n  }\r\n  // Move path string\r\n, move: function(x, y) {\r\n    // get bounding box of current situation\r\n    var box = this.bbox()\r\n\r\n    // get relative offset\r\n    x -= box.x\r\n    y -= box.y\r\n\r\n    if (!isNaN(x) && !isNaN(y)) {\r\n      // move every point\r\n      for (var l, i = this.value.length - 1; i >= 0; i--) {\r\n        l = this.value[i][0]\r\n\r\n        if (l == 'M' || l == 'L' || l == 'T')  {\r\n          this.value[i][1] += x\r\n          this.value[i][2] += y\r\n\r\n        } else if (l == 'H')  {\r\n          this.value[i][1] += x\r\n\r\n        } else if (l == 'V')  {\r\n          this.value[i][1] += y\r\n\r\n        } else if (l == 'C' || l == 'S' || l == 'Q')  {\r\n          this.value[i][1] += x\r\n          this.value[i][2] += y\r\n          this.value[i][3] += x\r\n          this.value[i][4] += y\r\n\r\n          if (l == 'C')  {\r\n            this.value[i][5] += x\r\n            this.value[i][6] += y\r\n          }\r\n\r\n        } else if (l == 'A')  {\r\n          this.value[i][6] += x\r\n          this.value[i][7] += y\r\n        }\r\n\r\n      }\r\n    }\r\n\r\n    return this\r\n  }\r\n  // Resize path string\r\n, size: function(width, height) {\r\n    // get bounding box of current situation\r\n    var i, l, box = this.bbox()\r\n\r\n    // recalculate position of all points according to new size\r\n    for (i = this.value.length - 1; i >= 0; i--) {\r\n      l = this.value[i][0]\r\n\r\n      if (l == 'M' || l == 'L' || l == 'T')  {\r\n        this.value[i][1] = ((this.value[i][1] - box.x) * width)  / box.width  + box.x\r\n        this.value[i][2] = ((this.value[i][2] - box.y) * height) / box.height + box.y\r\n\r\n      } else if (l == 'H')  {\r\n        this.value[i][1] = ((this.value[i][1] - box.x) * width)  / box.width  + box.x\r\n\r\n      } else if (l == 'V')  {\r\n        this.value[i][1] = ((this.value[i][1] - box.y) * height) / box.height + box.y\r\n\r\n      } else if (l == 'C' || l == 'S' || l == 'Q')  {\r\n        this.value[i][1] = ((this.value[i][1] - box.x) * width)  / box.width  + box.x\r\n        this.value[i][2] = ((this.value[i][2] - box.y) * height) / box.height + box.y\r\n        this.value[i][3] = ((this.value[i][3] - box.x) * width)  / box.width  + box.x\r\n        this.value[i][4] = ((this.value[i][4] - box.y) * height) / box.height + box.y\r\n\r\n        if (l == 'C')  {\r\n          this.value[i][5] = ((this.value[i][5] - box.x) * width)  / box.width  + box.x\r\n          this.value[i][6] = ((this.value[i][6] - box.y) * height) / box.height + box.y\r\n        }\r\n\r\n      } else if (l == 'A')  {\r\n        // resize radii\r\n        this.value[i][1] = (this.value[i][1] * width)  / box.width\r\n        this.value[i][2] = (this.value[i][2] * height) / box.height\r\n\r\n        // move position values\r\n        this.value[i][6] = ((this.value[i][6] - box.x) * width)  / box.width  + box.x\r\n        this.value[i][7] = ((this.value[i][7] - box.y) * height) / box.height + box.y\r\n      }\r\n\r\n    }\r\n\r\n    return this\r\n  }\r\n  // Test if the passed path array use the same path data commands as this path array\r\n, equalCommands: function(pathArray) {\r\n    var i, il, equalCommands\r\n\r\n    pathArray = new SVG.PathArray(pathArray)\r\n\r\n    equalCommands = this.value.length === pathArray.value.length\r\n    for(i = 0, il = this.value.length; equalCommands && i < il; i++) {\r\n      equalCommands = this.value[i][0] === pathArray.value[i][0]\r\n    }\r\n\r\n    return equalCommands\r\n  }\r\n  // Make path array morphable\r\n, morph: function(pathArray) {\r\n    pathArray = new SVG.PathArray(pathArray)\r\n\r\n    if(this.equalCommands(pathArray)) {\r\n      this.destination = pathArray\r\n    } else {\r\n      this.destination = null\r\n    }\r\n\r\n    return this\r\n  }\r\n  // Get morphed path array at given position\r\n, at: function(pos) {\r\n    // make sure a destination is defined\r\n    if (!this.destination) return this\r\n\r\n    var sourceArray = this.value\r\n      , destinationArray = this.destination.value\r\n      , array = [], pathArray = new SVG.PathArray()\r\n      , i, il, j, jl\r\n\r\n    // Animate has specified in the SVG spec\r\n    // See: https://www.w3.org/TR/SVG11/paths.html#PathElement\r\n    for (i = 0, il = sourceArray.length; i < il; i++) {\r\n      array[i] = [sourceArray[i][0]]\r\n      for(j = 1, jl = sourceArray[i].length; j < jl; j++) {\r\n        array[i][j] = sourceArray[i][j] + (destinationArray[i][j] - sourceArray[i][j]) * pos\r\n      }\r\n      // For the two flags of the elliptical arc command, the SVG spec say:\r\n      // Flags and booleans are interpolated as fractions between zero and one, with any non-zero value considered to be a value of one/true\r\n      // Elliptical arc command as an array followed by corresponding indexes:\r\n      // ['A', rx, ry, x-axis-rotation, large-arc-flag, sweep-flag, x, y]\r\n      //   0    1   2        3                 4             5      6  7\r\n      if(array[i][0] === 'A') {\r\n        array[i][4] = +(array[i][4] != 0)\r\n        array[i][5] = +(array[i][5] != 0)\r\n      }\r\n    }\r\n\r\n    // Directly modify the value of a path array, this is done this way for performance\r\n    pathArray.value = array\r\n    return pathArray\r\n  }\r\n  // Absolutize and parse path to array\r\n, parse: function(array) {\r\n    // if it's already a patharray, no need to parse it\r\n    if (array instanceof SVG.PathArray) return array.valueOf()\r\n\r\n    // prepare for parsing\r\n    var i, x0, y0, s, seg, arr\r\n      , x = 0\r\n      , y = 0\r\n      , paramCnt = { 'M':2, 'L':2, 'H':1, 'V':1, 'C':6, 'S':4, 'Q':4, 'T':2, 'A':7, 'Z':0 }\r\n\r\n    if(typeof array == 'string'){\r\n\r\n      array = array\r\n        .replace(SVG.regex.numbersWithDots, pathRegReplace) // convert 45.123.123 to 45.123 .123\r\n        .replace(SVG.regex.pathLetters, ' $& ') // put some room between letters and numbers\r\n        .replace(SVG.regex.hyphen, '$1 -')      // add space before hyphen\r\n        .trim()                                 // trim\r\n        .split(SVG.regex.delimiter)   // split into array\r\n\r\n    }else{\r\n      array = array.reduce(function(prev, curr){\r\n        return [].concat.call(prev, curr)\r\n      }, [])\r\n    }\r\n\r\n    // array now is an array containing all parts of a path e.g. ['M', '0', '0', 'L', '30', '30' ...]\r\n    var arr = []\r\n      , p = new SVG.Point()\r\n      , p0 = new SVG.Point()\r\n      , index = 0\r\n      , len = array.length\r\n\r\n    do{\r\n      // Test if we have a path letter\r\n      if(SVG.regex.isPathLetter.test(array[index])){\r\n        s = array[index]\r\n        ++index\r\n      // If last letter was a move command and we got no new, it defaults to [L]ine\r\n      }else if(s == 'M'){\r\n        s = 'L'\r\n      }else if(s == 'm'){\r\n        s = 'l'\r\n      }\r\n\r\n      arr.push(pathHandlers[s].call(null,\r\n          array.slice(index, (index = index + paramCnt[s.toUpperCase()])).map(parseFloat),\r\n          p, p0\r\n        )\r\n      )\r\n\r\n    }while(len > index)\r\n\r\n    return arr\r\n\r\n  }\r\n  // Get bounding box of path\r\n, bbox: function() {\r\n    SVG.parser.path.setAttribute('d', this.toString())\r\n\r\n    return SVG.parser.path.getBBox()\r\n  }\r\n\r\n})\r\n\n// Module for unit convertions\r\nSVG.Number = SVG.invent({\r\n  // Initialize\r\n  create: function(value, unit) {\r\n    // initialize defaults\r\n    this.value = 0\r\n    this.unit  = unit || ''\r\n\r\n    // parse value\r\n    if (typeof value === 'number') {\r\n      // ensure a valid numeric value\r\n      this.value = isNaN(value) ? 0 : !isFinite(value) ? (value < 0 ? -3.4e+38 : +3.4e+38) : value\r\n\r\n    } else if (typeof value === 'string') {\r\n      unit = value.match(SVG.regex.numberAndUnit)\r\n\r\n      if (unit) {\r\n        // make value numeric\r\n        this.value = parseFloat(unit[1])\r\n\r\n        // normalize\r\n        if (unit[5] == '%')\r\n          this.value /= 100\r\n        else if (unit[5] == 's')\r\n          this.value *= 1000\r\n\r\n        // store unit\r\n        this.unit = unit[5]\r\n      }\r\n\r\n    } else {\r\n      if (value instanceof SVG.Number) {\r\n        this.value = value.valueOf()\r\n        this.unit  = value.unit\r\n      }\r\n    }\r\n\r\n  }\r\n  // Add methods\r\n, extend: {\r\n    // Stringalize\r\n    toString: function() {\r\n      return (\r\n        this.unit == '%' ?\r\n          ~~(this.value * 1e8) / 1e6:\r\n        this.unit == 's' ?\r\n          this.value / 1e3 :\r\n          this.value\r\n      ) + this.unit\r\n    }\r\n  , toJSON: function() {\r\n      return this.toString()\r\n    }\r\n  , // Convert to primitive\r\n    valueOf: function() {\r\n      return this.value\r\n    }\r\n    // Add number\r\n  , plus: function(number) {\r\n      number = new SVG.Number(number)\r\n      return new SVG.Number(this + number, this.unit || number.unit)\r\n    }\r\n    // Subtract number\r\n  , minus: function(number) {\r\n      number = new SVG.Number(number)\r\n      return new SVG.Number(this - number, this.unit || number.unit)\r\n    }\r\n    // Multiply number\r\n  , times: function(number) {\r\n      number = new SVG.Number(number)\r\n      return new SVG.Number(this * number, this.unit || number.unit)\r\n    }\r\n    // Divide number\r\n  , divide: function(number) {\r\n      number = new SVG.Number(number)\r\n      return new SVG.Number(this / number, this.unit || number.unit)\r\n    }\r\n    // Convert to different unit\r\n  , to: function(unit) {\r\n      var number = new SVG.Number(this)\r\n\r\n      if (typeof unit === 'string')\r\n        number.unit = unit\r\n\r\n      return number\r\n    }\r\n    // Make number morphable\r\n  , morph: function(number) {\r\n      this.destination = new SVG.Number(number)\r\n\r\n      if(number.relative) {\r\n        this.destination.value += this.value\r\n      }\r\n\r\n      return this\r\n    }\r\n    // Get morphed number at given position\r\n  , at: function(pos) {\r\n      // Make sure a destination is defined\r\n      if (!this.destination) return this\r\n\r\n      // Generate new morphed number\r\n      return new SVG.Number(this.destination)\r\n          .minus(this)\r\n          .times(pos)\r\n          .plus(this)\r\n    }\r\n\r\n  }\r\n})\r\n\n\r\nSVG.Element = SVG.invent({\r\n  // Initialize node\r\n  create: function(node) {\r\n    // make stroke value accessible dynamically\r\n    this._stroke = SVG.defaults.attrs.stroke\r\n    this._event = null\r\n    this._events = {}\r\n\r\n    // initialize data object\r\n    this.dom = {}\r\n\r\n    // create circular reference\r\n    if (this.node = node) {\r\n      this.type = node.nodeName\r\n      this.node.instance = this\r\n      this._events = node._events || {}\r\n\r\n      // store current attribute value\r\n      this._stroke = node.getAttribute('stroke') || this._stroke\r\n    }\r\n  }\r\n\r\n  // Add class methods\r\n, extend: {\r\n    // Move over x-axis\r\n    x: function(x) {\r\n      return this.attr('x', x)\r\n    }\r\n    // Move over y-axis\r\n  , y: function(y) {\r\n      return this.attr('y', y)\r\n    }\r\n    // Move by center over x-axis\r\n  , cx: function(x) {\r\n      return x == null ? this.x() + this.width() / 2 : this.x(x - this.width() / 2)\r\n    }\r\n    // Move by center over y-axis\r\n  , cy: function(y) {\r\n      return y == null ? this.y() + this.height() / 2 : this.y(y - this.height() / 2)\r\n    }\r\n    // Move element to given x and y values\r\n  , move: function(x, y) {\r\n      return this.x(x).y(y)\r\n    }\r\n    // Move element by its center\r\n  , center: function(x, y) {\r\n      return this.cx(x).cy(y)\r\n    }\r\n    // Set width of element\r\n  , width: function(width) {\r\n      return this.attr('width', width)\r\n    }\r\n    // Set height of element\r\n  , height: function(height) {\r\n      return this.attr('height', height)\r\n    }\r\n    // Set element size to given width and height\r\n  , size: function(width, height) {\r\n      var p = proportionalSize(this, width, height)\r\n\r\n      return this\r\n        .width(new SVG.Number(p.width))\r\n        .height(new SVG.Number(p.height))\r\n    }\r\n    // Clone element\r\n  , clone: function(parent) {\r\n      // write dom data to the dom so the clone can pickup the data\r\n      this.writeDataToDom()\r\n\r\n      // clone element and assign new id\r\n      var clone = assignNewId(this.node.cloneNode(true))\r\n\r\n      // insert the clone in the given parent or after myself\r\n      if(parent) parent.add(clone)\r\n      else this.after(clone)\r\n\r\n      return clone\r\n    }\r\n    // Remove element\r\n  , remove: function() {\r\n      if (this.parent())\r\n        this.parent().removeElement(this)\r\n\r\n      return this\r\n    }\r\n    // Replace element\r\n  , replace: function(element) {\r\n      this.after(element).remove()\r\n\r\n      return element\r\n    }\r\n    // Add element to given container and return self\r\n  , addTo: function(parent) {\r\n      return parent.put(this)\r\n    }\r\n    // Add element to given container and return container\r\n  , putIn: function(parent) {\r\n      return parent.add(this)\r\n    }\r\n    // Get / set id\r\n  , id: function(id) {\r\n      return this.attr('id', id)\r\n    }\r\n    // Checks whether the given point inside the bounding box of the element\r\n  , inside: function(x, y) {\r\n      var box = this.bbox()\r\n\r\n      return x > box.x\r\n          && y > box.y\r\n          && x < box.x + box.width\r\n          && y < box.y + box.height\r\n    }\r\n    // Show element\r\n  , show: function() {\r\n      return this.style('display', '')\r\n    }\r\n    // Hide element\r\n  , hide: function() {\r\n      return this.style('display', 'none')\r\n    }\r\n    // Is element visible?\r\n  , visible: function() {\r\n      return this.style('display') != 'none'\r\n    }\r\n    // Return id on string conversion\r\n  , toString: function() {\r\n      return this.attr('id')\r\n    }\r\n    // Return array of classes on the node\r\n  , classes: function() {\r\n      var attr = this.attr('class')\r\n\r\n      return attr == null ? [] : attr.trim().split(SVG.regex.delimiter)\r\n    }\r\n    // Return true if class exists on the node, false otherwise\r\n  , hasClass: function(name) {\r\n      return this.classes().indexOf(name) != -1\r\n    }\r\n    // Add class to the node\r\n  , addClass: function(name) {\r\n      if (!this.hasClass(name)) {\r\n        var array = this.classes()\r\n        array.push(name)\r\n        this.attr('class', array.join(' '))\r\n      }\r\n\r\n      return this\r\n    }\r\n    // Remove class from the node\r\n  , removeClass: function(name) {\r\n      if (this.hasClass(name)) {\r\n        this.attr('class', this.classes().filter(function(c) {\r\n          return c != name\r\n        }).join(' '))\r\n      }\r\n\r\n      return this\r\n    }\r\n    // Toggle the presence of a class on the node\r\n  , toggleClass: function(name) {\r\n      return this.hasClass(name) ? this.removeClass(name) : this.addClass(name)\r\n    }\r\n    // Get referenced element form attribute value\r\n  , reference: function(attr) {\r\n      return SVG.get(this.attr(attr))\r\n    }\r\n    // Returns the parent element instance\r\n  , parent: function(type) {\r\n      var parent = this\r\n\r\n      // check for parent\r\n      if(!parent.node.parentNode) return null\r\n\r\n      // get parent element\r\n      parent = SVG.adopt(parent.node.parentNode)\r\n\r\n      if(!type) return parent\r\n\r\n      // loop trough ancestors if type is given\r\n      while(parent && parent.node instanceof window.SVGElement){\r\n        if(typeof type === 'string' ? parent.matches(type) : parent instanceof type) return parent\r\n        if(!parent.node.parentNode || parent.node.parentNode.nodeName == '#document' || parent.node.parentNode.nodeName == '#document-fragment') return null // #759, #720\r\n        parent = SVG.adopt(parent.node.parentNode)\r\n      }\r\n    }\r\n    // Get parent document\r\n  , doc: function() {\r\n      return this instanceof SVG.Doc ? this : this.parent(SVG.Doc)\r\n    }\r\n    // return array of all ancestors of given type up to the root svg\r\n  , parents: function(type) {\r\n      var parents = [], parent = this\r\n\r\n      do{\r\n        parent = parent.parent(type)\r\n        if(!parent || !parent.node) break\r\n\r\n        parents.push(parent)\r\n      } while(parent.parent)\r\n\r\n      return parents\r\n    }\r\n    // matches the element vs a css selector\r\n  , matches: function(selector){\r\n      return matches(this.node, selector)\r\n    }\r\n    // Returns the svg node to call native svg methods on it\r\n  , native: function() {\r\n      return this.node\r\n    }\r\n    // Import raw svg\r\n  , svg: function(svg) {\r\n      // create temporary holder\r\n      var well = document.createElement('svg')\r\n\r\n      // act as a setter if svg is given\r\n      if (svg && this instanceof SVG.Parent) {\r\n        // dump raw svg\r\n        well.innerHTML = '<svg>' + svg.replace(/\\n/, '').replace(/<([\\w:-]+)([^<]+?)\\/>/g, '<$1$2></$1>') + '</svg>'\r\n\r\n        // transplant nodes\r\n        for (var i = 0, il = well.firstChild.childNodes.length; i < il; i++)\r\n          this.node.appendChild(well.firstChild.firstChild)\r\n\r\n      // otherwise act as a getter\r\n      } else {\r\n        // create a wrapping svg element in case of partial content\r\n        well.appendChild(svg = document.createElement('svg'))\r\n\r\n        // write svgjs data to the dom\r\n        this.writeDataToDom()\r\n\r\n        // insert a copy of this node\r\n        svg.appendChild(this.node.cloneNode(true))\r\n\r\n        // return target element\r\n        return well.innerHTML.replace(/^<svg>/, '').replace(/<\\/svg>$/, '')\r\n      }\r\n\r\n      return this\r\n    }\r\n  // write svgjs data to the dom\r\n  , writeDataToDom: function() {\r\n\r\n      // dump variables recursively\r\n      if(this.each || this.lines){\r\n        var fn = this.each ? this : this.lines();\r\n        fn.each(function(){\r\n          this.writeDataToDom()\r\n        })\r\n      }\r\n\r\n      // remove previously set data\r\n      this.node.removeAttribute('svgjs:data')\r\n\r\n      if(Object.keys(this.dom).length)\r\n        this.node.setAttribute('svgjs:data', JSON.stringify(this.dom)) // see #428\r\n\r\n      return this\r\n    }\r\n  // set given data to the elements data property\r\n  , setData: function(o){\r\n      this.dom = o\r\n      return this\r\n    }\r\n  , is: function(obj){\r\n      return is(this, obj)\r\n    }\r\n  }\r\n})\r\n\nSVG.easing = {\r\n  '-': function(pos){return pos}\r\n, '<>':function(pos){return -Math.cos(pos * Math.PI) / 2 + 0.5}\r\n, '>': function(pos){return  Math.sin(pos * Math.PI / 2)}\r\n, '<': function(pos){return -Math.cos(pos * Math.PI / 2) + 1}\r\n}\r\n\r\nSVG.morph = function(pos){\r\n  return function(from, to) {\r\n    return new SVG.MorphObj(from, to).at(pos)\r\n  }\r\n}\r\n\r\nSVG.Situation = SVG.invent({\r\n\r\n  create: function(o){\r\n    this.init = false\r\n    this.reversed = false\r\n    this.reversing = false\r\n\r\n    this.duration = new SVG.Number(o.duration).valueOf()\r\n    this.delay = new SVG.Number(o.delay).valueOf()\r\n\r\n    this.start = +new Date() + this.delay\r\n    this.finish = this.start + this.duration\r\n    this.ease = o.ease\r\n\r\n    // this.loop is incremented from 0 to this.loops\r\n    // it is also incremented when in an infinite loop (when this.loops is true)\r\n    this.loop = 0\r\n    this.loops = false\r\n\r\n    this.animations = {\r\n      // functionToCall: [list of morphable objects]\r\n      // e.g. move: [SVG.Number, SVG.Number]\r\n    }\r\n\r\n    this.attrs = {\r\n      // holds all attributes which are not represented from a function svg.js provides\r\n      // e.g. someAttr: SVG.Number\r\n    }\r\n\r\n    this.styles = {\r\n      // holds all styles which should be animated\r\n      // e.g. fill-color: SVG.Color\r\n    }\r\n\r\n    this.transforms = [\r\n      // holds all transformations as transformation objects\r\n      // e.g. [SVG.Rotate, SVG.Translate, SVG.Matrix]\r\n    ]\r\n\r\n    this.once = {\r\n      // functions to fire at a specific position\r\n      // e.g. \"0.5\": function foo(){}\r\n    }\r\n\r\n  }\r\n\r\n})\r\n\r\n\r\nSVG.FX = SVG.invent({\r\n\r\n  create: function(element) {\r\n    this._target = element\r\n    this.situations = []\r\n    this.active = false\r\n    this.situation = null\r\n    this.paused = false\r\n    this.lastPos = 0\r\n    this.pos = 0\r\n    // The absolute position of an animation is its position in the context of its complete duration (including delay and loops)\r\n    // When performing a delay, absPos is below 0 and when performing a loop, its value is above 1\r\n    this.absPos = 0\r\n    this._speed = 1\r\n  }\r\n\r\n, extend: {\r\n\r\n    /**\r\n     * sets or returns the target of this animation\r\n     * @param o object || number In case of Object it holds all parameters. In case of number its the duration of the animation\r\n     * @param ease function || string Function which should be used for easing or easing keyword\r\n     * @param delay Number indicating the delay before the animation starts\r\n     * @return target || this\r\n     */\r\n    animate: function(o, ease, delay){\r\n\r\n      if(typeof o == 'object'){\r\n        ease = o.ease\r\n        delay = o.delay\r\n        o = o.duration\r\n      }\r\n\r\n      var situation = new SVG.Situation({\r\n        duration: o || 1000,\r\n        delay: delay || 0,\r\n        ease: SVG.easing[ease || '-'] || ease\r\n      })\r\n\r\n      this.queue(situation)\r\n\r\n      return this\r\n    }\r\n\r\n    /**\r\n     * sets a delay before the next element of the queue is called\r\n     * @param delay Duration of delay in milliseconds\r\n     * @return this.target()\r\n     */\r\n  , delay: function(delay){\r\n      // The delay is performed by an empty situation with its duration\r\n      // attribute set to the duration of the delay\r\n      var situation = new SVG.Situation({\r\n        duration: delay,\r\n        delay: 0,\r\n        ease: SVG.easing['-']\r\n      })\r\n\r\n      return this.queue(situation)\r\n    }\r\n\r\n    /**\r\n     * sets or returns the target of this animation\r\n     * @param null || target SVG.Element which should be set as new target\r\n     * @return target || this\r\n     */\r\n  , target: function(target){\r\n      if(target && target instanceof SVG.Element){\r\n        this._target = target\r\n        return this\r\n      }\r\n\r\n      return this._target\r\n    }\r\n\r\n    // returns the absolute position at a given time\r\n  , timeToAbsPos: function(timestamp){\r\n      return (timestamp - this.situation.start) / (this.situation.duration/this._speed)\r\n    }\r\n\r\n    // returns the timestamp from a given absolute positon\r\n  , absPosToTime: function(absPos){\r\n      return this.situation.duration/this._speed * absPos + this.situation.start\r\n    }\r\n\r\n    // starts the animationloop\r\n  , startAnimFrame: function(){\r\n      this.stopAnimFrame()\r\n      this.animationFrame = window.requestAnimationFrame(function(){ this.step() }.bind(this))\r\n    }\r\n\r\n    // cancels the animationframe\r\n  , stopAnimFrame: function(){\r\n      window.cancelAnimationFrame(this.animationFrame)\r\n    }\r\n\r\n    // kicks off the animation - only does something when the queue is currently not active and at least one situation is set\r\n  , start: function(){\r\n      // dont start if already started\r\n      if(!this.active && this.situation){\r\n        this.active = true\r\n        this.startCurrent()\r\n      }\r\n\r\n      return this\r\n    }\r\n\r\n    // start the current situation\r\n  , startCurrent: function(){\r\n      this.situation.start = +new Date + this.situation.delay/this._speed\r\n      this.situation.finish = this.situation.start + this.situation.duration/this._speed\r\n      return this.initAnimations().step()\r\n    }\r\n\r\n    /**\r\n     * adds a function / Situation to the animation queue\r\n     * @param fn function / situation to add\r\n     * @return this\r\n     */\r\n  , queue: function(fn){\r\n      if(typeof fn == 'function' || fn instanceof SVG.Situation)\r\n        this.situations.push(fn)\r\n\r\n      if(!this.situation) this.situation = this.situations.shift()\r\n\r\n      return this\r\n    }\r\n\r\n    /**\r\n     * pulls next element from the queue and execute it\r\n     * @return this\r\n     */\r\n  , dequeue: function(){\r\n      // stop current animation\r\n      this.stop()\r\n\r\n      // get next animation from queue\r\n      this.situation = this.situations.shift()\r\n\r\n      if(this.situation){\r\n        if(this.situation instanceof SVG.Situation) {\r\n          this.start()\r\n        } else {\r\n          // If it is not a SVG.Situation, then it is a function, we execute it\r\n          this.situation.call(this)\r\n        }\r\n      }\r\n\r\n      return this\r\n    }\r\n\r\n    // updates all animations to the current state of the element\r\n    // this is important when one property could be changed from another property\r\n  , initAnimations: function() {\r\n      var i, j, source\r\n      var s = this.situation\r\n\r\n      if(s.init) return this\r\n\r\n      for(i in s.animations){\r\n        source = this.target()[i]()\r\n\r\n        if(!Array.isArray(source)) {\r\n          source = [source]\r\n        }\r\n\r\n        if(!Array.isArray(s.animations[i])) {\r\n          s.animations[i] = [s.animations[i]]\r\n        }\r\n\r\n        //if(s.animations[i].length > source.length) {\r\n        //  source.concat = source.concat(s.animations[i].slice(source.length, s.animations[i].length))\r\n        //}\r\n\r\n        for(j = source.length; j--;) {\r\n          // The condition is because some methods return a normal number instead\r\n          // of a SVG.Number\r\n          if(s.animations[i][j] instanceof SVG.Number)\r\n            source[j] = new SVG.Number(source[j])\r\n\r\n          s.animations[i][j] = source[j].morph(s.animations[i][j])\r\n        }\r\n      }\r\n\r\n      for(i in s.attrs){\r\n        s.attrs[i] = new SVG.MorphObj(this.target().attr(i), s.attrs[i])\r\n      }\r\n\r\n      for(i in s.styles){\r\n        s.styles[i] = new SVG.MorphObj(this.target().style(i), s.styles[i])\r\n      }\r\n\r\n      s.initialTransformation = this.target().matrixify()\r\n\r\n      s.init = true\r\n      return this\r\n    }\r\n  , clearQueue: function(){\r\n      this.situations = []\r\n      return this\r\n    }\r\n  , clearCurrent: function(){\r\n      this.situation = null\r\n      return this\r\n    }\r\n    /** stops the animation immediately\r\n     * @param jumpToEnd A Boolean indicating whether to complete the current animation immediately.\r\n     * @param clearQueue A Boolean indicating whether to remove queued animation as well.\r\n     * @return this\r\n     */\r\n  , stop: function(jumpToEnd, clearQueue){\r\n      var active = this.active\r\n      this.active = false\r\n\r\n      if(clearQueue){\r\n        this.clearQueue()\r\n      }\r\n\r\n      if(jumpToEnd && this.situation){\r\n        // initialize the situation if it was not\r\n        !active && this.startCurrent()\r\n        this.atEnd()\r\n      }\r\n\r\n      this.stopAnimFrame()\r\n\r\n      return this.clearCurrent()\r\n    }\r\n\r\n    /** resets the element to the state where the current element has started\r\n     * @return this\r\n     */\r\n  , reset: function(){\r\n      if(this.situation){\r\n        var temp = this.situation\r\n        this.stop()\r\n        this.situation = temp\r\n        this.atStart()\r\n      }\r\n      return this\r\n    }\r\n\r\n    // Stop the currently-running animation, remove all queued animations, and complete all animations for the element.\r\n  , finish: function(){\r\n\r\n      this.stop(true, false)\r\n\r\n      while(this.dequeue().situation && this.stop(true, false));\r\n\r\n      this.clearQueue().clearCurrent()\r\n\r\n      return this\r\n    }\r\n\r\n    // set the internal animation pointer at the start position, before any loops, and updates the visualisation\r\n  , atStart: function() {\r\n      return this.at(0, true)\r\n    }\r\n\r\n    // set the internal animation pointer at the end position, after all the loops, and updates the visualisation\r\n  , atEnd: function() {\r\n      if (this.situation.loops === true) {\r\n        // If in a infinite loop, we end the current iteration\r\n        this.situation.loops = this.situation.loop + 1\r\n      }\r\n\r\n      if(typeof this.situation.loops == 'number') {\r\n        // If performing a finite number of loops, we go after all the loops\r\n        return this.at(this.situation.loops, true)\r\n      } else {\r\n        // If no loops, we just go at the end\r\n        return this.at(1, true)\r\n      }\r\n    }\r\n\r\n    // set the internal animation pointer to the specified position and updates the visualisation\r\n    // if isAbsPos is true, pos is treated as an absolute position\r\n  , at: function(pos, isAbsPos){\r\n      var durDivSpd = this.situation.duration/this._speed\r\n\r\n      this.absPos = pos\r\n      // If pos is not an absolute position, we convert it into one\r\n      if (!isAbsPos) {\r\n        if (this.situation.reversed) this.absPos = 1 - this.absPos\r\n        this.absPos += this.situation.loop\r\n      }\r\n\r\n      this.situation.start = +new Date - this.absPos * durDivSpd\r\n      this.situation.finish = this.situation.start + durDivSpd\r\n\r\n      return this.step(true)\r\n    }\r\n\r\n    /**\r\n     * sets or returns the speed of the animations\r\n     * @param speed null || Number The new speed of the animations\r\n     * @return Number || this\r\n     */\r\n  , speed: function(speed){\r\n      if (speed === 0) return this.pause()\r\n\r\n      if (speed) {\r\n        this._speed = speed\r\n        // We use an absolute position here so that speed can affect the delay before the animation\r\n        return this.at(this.absPos, true)\r\n      } else return this._speed\r\n    }\r\n\r\n    // Make loopable\r\n  , loop: function(times, reverse) {\r\n      var c = this.last()\r\n\r\n      // store total loops\r\n      c.loops = (times != null) ? times : true\r\n      c.loop = 0\r\n\r\n      if(reverse) c.reversing = true\r\n      return this\r\n    }\r\n\r\n    // pauses the animation\r\n  , pause: function(){\r\n      this.paused = true\r\n      this.stopAnimFrame()\r\n\r\n      return this\r\n    }\r\n\r\n    // unpause the animation\r\n  , play: function(){\r\n      if(!this.paused) return this\r\n      this.paused = false\r\n      // We use an absolute position here so that the delay before the animation can be paused\r\n      return this.at(this.absPos, true)\r\n    }\r\n\r\n    /**\r\n     * toggle or set the direction of the animation\r\n     * true sets direction to backwards while false sets it to forwards\r\n     * @param reversed Boolean indicating whether to reverse the animation or not (default: toggle the reverse status)\r\n     * @return this\r\n     */\r\n  , reverse: function(reversed){\r\n      var c = this.last()\r\n\r\n      if(typeof reversed == 'undefined') c.reversed = !c.reversed\r\n      else c.reversed = reversed\r\n\r\n      return this\r\n    }\r\n\r\n\r\n    /**\r\n     * returns a float from 0-1 indicating the progress of the current animation\r\n     * @param eased Boolean indicating whether the returned position should be eased or not\r\n     * @return number\r\n     */\r\n  , progress: function(easeIt){\r\n      return easeIt ? this.situation.ease(this.pos) : this.pos\r\n    }\r\n\r\n    /**\r\n     * adds a callback function which is called when the current animation is finished\r\n     * @param fn Function which should be executed as callback\r\n     * @return number\r\n     */\r\n  , after: function(fn){\r\n      var c = this.last()\r\n        , wrapper = function wrapper(e){\r\n            if(e.detail.situation == c){\r\n              fn.call(this, c)\r\n              this.off('finished.fx', wrapper) // prevent memory leak\r\n            }\r\n          }\r\n\r\n      this.target().on('finished.fx', wrapper)\r\n\r\n      return this._callStart()\r\n    }\r\n\r\n    // adds a callback which is called whenever one animation step is performed\r\n  , during: function(fn){\r\n      var c = this.last()\r\n        , wrapper = function(e){\r\n            if(e.detail.situation == c){\r\n              fn.call(this, e.detail.pos, SVG.morph(e.detail.pos), e.detail.eased, c)\r\n            }\r\n          }\r\n\r\n      // see above\r\n      this.target().off('during.fx', wrapper).on('during.fx', wrapper)\r\n\r\n      this.after(function(){\r\n        this.off('during.fx', wrapper)\r\n      })\r\n\r\n      return this._callStart()\r\n    }\r\n\r\n    // calls after ALL animations in the queue are finished\r\n  , afterAll: function(fn){\r\n      var wrapper = function wrapper(e){\r\n            fn.call(this)\r\n            this.off('allfinished.fx', wrapper)\r\n          }\r\n\r\n      // see above\r\n      this.target().off('allfinished.fx', wrapper).on('allfinished.fx', wrapper)\r\n\r\n      return this._callStart()\r\n    }\r\n\r\n    // calls on every animation step for all animations\r\n  , duringAll: function(fn){\r\n      var wrapper = function(e){\r\n            fn.call(this, e.detail.pos, SVG.morph(e.detail.pos), e.detail.eased, e.detail.situation)\r\n          }\r\n\r\n      this.target().off('during.fx', wrapper).on('during.fx', wrapper)\r\n\r\n      this.afterAll(function(){\r\n        this.off('during.fx', wrapper)\r\n      })\r\n\r\n      return this._callStart()\r\n    }\r\n\r\n  , last: function(){\r\n      return this.situations.length ? this.situations[this.situations.length-1] : this.situation\r\n    }\r\n\r\n    // adds one property to the animations\r\n  , add: function(method, args, type){\r\n      this.last()[type || 'animations'][method] = args\r\n      return this._callStart()\r\n    }\r\n\r\n    /** perform one step of the animation\r\n     *  @param ignoreTime Boolean indicating whether to ignore time and use position directly or recalculate position based on time\r\n     *  @return this\r\n     */\r\n  , step: function(ignoreTime){\r\n\r\n      // convert current time to an absolute position\r\n      if(!ignoreTime) this.absPos = this.timeToAbsPos(+new Date)\r\n\r\n      // This part convert an absolute position to a position\r\n      if(this.situation.loops !== false) {\r\n        var absPos, absPosInt, lastLoop\r\n\r\n        // If the absolute position is below 0, we just treat it as if it was 0\r\n        absPos = Math.max(this.absPos, 0)\r\n        absPosInt = Math.floor(absPos)\r\n\r\n        if(this.situation.loops === true || absPosInt < this.situation.loops) {\r\n          this.pos = absPos - absPosInt\r\n          lastLoop = this.situation.loop\r\n          this.situation.loop = absPosInt\r\n        } else {\r\n          this.absPos = this.situation.loops\r\n          this.pos = 1\r\n          // The -1 here is because we don't want to toggle reversed when all the loops have been completed\r\n          lastLoop = this.situation.loop - 1\r\n          this.situation.loop = this.situation.loops\r\n        }\r\n\r\n        if(this.situation.reversing) {\r\n          // Toggle reversed if an odd number of loops as occured since the last call of step\r\n          this.situation.reversed = this.situation.reversed != Boolean((this.situation.loop - lastLoop) % 2)\r\n        }\r\n\r\n      } else {\r\n        // If there are no loop, the absolute position must not be above 1\r\n        this.absPos = Math.min(this.absPos, 1)\r\n        this.pos = this.absPos\r\n      }\r\n\r\n      // while the absolute position can be below 0, the position must not be below 0\r\n      if(this.pos < 0) this.pos = 0\r\n\r\n      if(this.situation.reversed) this.pos = 1 - this.pos\r\n\r\n\r\n      // apply easing\r\n      var eased = this.situation.ease(this.pos)\r\n\r\n      // call once-callbacks\r\n      for(var i in this.situation.once){\r\n        if(i > this.lastPos && i <= eased){\r\n          this.situation.once[i].call(this.target(), this.pos, eased)\r\n          delete this.situation.once[i]\r\n        }\r\n      }\r\n\r\n      // fire during callback with position, eased position and current situation as parameter\r\n      if(this.active) this.target().fire('during', {pos: this.pos, eased: eased, fx: this, situation: this.situation})\r\n\r\n      // the user may call stop or finish in the during callback\r\n      // so make sure that we still have a valid situation\r\n      if(!this.situation){\r\n        return this\r\n      }\r\n\r\n      // apply the actual animation to every property\r\n      this.eachAt()\r\n\r\n      // do final code when situation is finished\r\n      if((this.pos == 1 && !this.situation.reversed) || (this.situation.reversed && this.pos == 0)){\r\n\r\n        // stop animation callback\r\n        this.stopAnimFrame()\r\n\r\n        // fire finished callback with current situation as parameter\r\n        this.target().fire('finished', {fx:this, situation: this.situation})\r\n\r\n        if(!this.situations.length){\r\n          this.target().fire('allfinished')\r\n\r\n          // Recheck the length since the user may call animate in the afterAll callback\r\n          if(!this.situations.length){\r\n            this.target().off('.fx') // there shouldnt be any binding left, but to make sure...\r\n            this.active = false\r\n          }\r\n        }\r\n\r\n        // start next animation\r\n        if(this.active) this.dequeue()\r\n        else this.clearCurrent()\r\n\r\n      }else if(!this.paused && this.active){\r\n        // we continue animating when we are not at the end\r\n        this.startAnimFrame()\r\n      }\r\n\r\n      // save last eased position for once callback triggering\r\n      this.lastPos = eased\r\n      return this\r\n\r\n    }\r\n\r\n    // calculates the step for every property and calls block with it\r\n  , eachAt: function(){\r\n      var i, len, at, self = this, target = this.target(), s = this.situation\r\n\r\n      // apply animations which can be called trough a method\r\n      for(i in s.animations){\r\n\r\n        at = [].concat(s.animations[i]).map(function(el){\r\n          return typeof el !== 'string' && el.at ? el.at(s.ease(self.pos), self.pos) : el\r\n        })\r\n\r\n        target[i].apply(target, at)\r\n\r\n      }\r\n\r\n      // apply animation which has to be applied with attr()\r\n      for(i in s.attrs){\r\n\r\n        at = [i].concat(s.attrs[i]).map(function(el){\r\n          return typeof el !== 'string' && el.at ? el.at(s.ease(self.pos), self.pos) : el\r\n        })\r\n\r\n        target.attr.apply(target, at)\r\n\r\n      }\r\n\r\n      // apply animation which has to be applied with style()\r\n      for(i in s.styles){\r\n\r\n        at = [i].concat(s.styles[i]).map(function(el){\r\n          return typeof el !== 'string' && el.at ? el.at(s.ease(self.pos), self.pos) : el\r\n        })\r\n\r\n        target.style.apply(target, at)\r\n\r\n      }\r\n\r\n      // animate initialTransformation which has to be chained\r\n      if(s.transforms.length){\r\n\r\n        // get initial initialTransformation\r\n        at = s.initialTransformation\r\n        for(i = 0, len = s.transforms.length; i < len; i++){\r\n\r\n          // get next transformation in chain\r\n          var a = s.transforms[i]\r\n\r\n          // multiply matrix directly\r\n          if(a instanceof SVG.Matrix){\r\n\r\n            if(a.relative){\r\n              at = at.multiply(new SVG.Matrix().morph(a).at(s.ease(this.pos)))\r\n            }else{\r\n              at = at.morph(a).at(s.ease(this.pos))\r\n            }\r\n            continue\r\n          }\r\n\r\n          // when transformation is absolute we have to reset the needed transformation first\r\n          if(!a.relative)\r\n            a.undo(at.extract())\r\n\r\n          // and reapply it after\r\n          at = at.multiply(a.at(s.ease(this.pos)))\r\n\r\n        }\r\n\r\n        // set new matrix on element\r\n        target.matrix(at)\r\n      }\r\n\r\n      return this\r\n\r\n    }\r\n\r\n\r\n    // adds an once-callback which is called at a specific position and never again\r\n  , once: function(pos, fn, isEased){\r\n      var c = this.last()\r\n      if(!isEased) pos = c.ease(pos)\r\n\r\n      c.once[pos] = fn\r\n\r\n      return this\r\n    }\r\n\r\n  , _callStart: function() {\r\n      setTimeout(function(){this.start()}.bind(this), 0)\r\n      return this\r\n    }\r\n\r\n  }\r\n\r\n, parent: SVG.Element\r\n\r\n  // Add method to parent elements\r\n, construct: {\r\n    // Get fx module or create a new one, then animate with given duration and ease\r\n    animate: function(o, ease, delay) {\r\n      return (this.fx || (this.fx = new SVG.FX(this))).animate(o, ease, delay)\r\n    }\r\n  , delay: function(delay){\r\n      return (this.fx || (this.fx = new SVG.FX(this))).delay(delay)\r\n    }\r\n  , stop: function(jumpToEnd, clearQueue) {\r\n      if (this.fx)\r\n        this.fx.stop(jumpToEnd, clearQueue)\r\n\r\n      return this\r\n    }\r\n  , finish: function() {\r\n      if (this.fx)\r\n        this.fx.finish()\r\n\r\n      return this\r\n    }\r\n    // Pause current animation\r\n  , pause: function() {\r\n      if (this.fx)\r\n        this.fx.pause()\r\n\r\n      return this\r\n    }\r\n    // Play paused current animation\r\n  , play: function() {\r\n      if (this.fx)\r\n        this.fx.play()\r\n\r\n      return this\r\n    }\r\n    // Set/Get the speed of the animations\r\n  , speed: function(speed) {\r\n      if (this.fx)\r\n        if (speed == null)\r\n          return this.fx.speed()\r\n        else\r\n          this.fx.speed(speed)\r\n\r\n      return this\r\n    }\r\n  }\r\n\r\n})\r\n\r\n// MorphObj is used whenever no morphable object is given\r\nSVG.MorphObj = SVG.invent({\r\n\r\n  create: function(from, to){\r\n    // prepare color for morphing\r\n    if(SVG.Color.isColor(to)) return new SVG.Color(from).morph(to)\r\n    // check if we have a list of values\r\n    if(SVG.regex.delimiter.test(from)) {\r\n      // prepare path for morphing\r\n      if(SVG.regex.pathLetters.test(from)) return new SVG.PathArray(from).morph(to)\r\n      // prepare value list for morphing\r\n      else return new SVG.Array(from).morph(to)\r\n    }\r\n    // prepare number for morphing\r\n    if(SVG.regex.numberAndUnit.test(to)) return new SVG.Number(from).morph(to)\r\n\r\n    // prepare for plain morphing\r\n    this.value = from\r\n    this.destination = to\r\n  }\r\n\r\n, extend: {\r\n    at: function(pos, real){\r\n      return real < 1 ? this.value : this.destination\r\n    },\r\n\r\n    valueOf: function(){\r\n      return this.value\r\n    }\r\n  }\r\n\r\n})\r\n\r\nSVG.extend(SVG.FX, {\r\n  // Add animatable attributes\r\n  attr: function(a, v, relative) {\r\n    // apply attributes individually\r\n    if (typeof a == 'object') {\r\n      for (var key in a)\r\n        this.attr(key, a[key])\r\n\r\n    } else {\r\n      this.add(a, v, 'attrs')\r\n    }\r\n\r\n    return this\r\n  }\r\n  // Add animatable styles\r\n, style: function(s, v) {\r\n    if (typeof s == 'object')\r\n      for (var key in s)\r\n        this.style(key, s[key])\r\n\r\n    else\r\n      this.add(s, v, 'styles')\r\n\r\n    return this\r\n  }\r\n  // Animatable x-axis\r\n, x: function(x, relative) {\r\n    if(this.target() instanceof SVG.G){\r\n      this.transform({x:x}, relative)\r\n      return this\r\n    }\r\n\r\n    var num = new SVG.Number(x)\r\n    num.relative = relative\r\n    return this.add('x', num)\r\n  }\r\n  // Animatable y-axis\r\n, y: function(y, relative) {\r\n    if(this.target() instanceof SVG.G){\r\n      this.transform({y:y}, relative)\r\n      return this\r\n    }\r\n\r\n    var num = new SVG.Number(y)\r\n    num.relative = relative\r\n    return this.add('y', num)\r\n  }\r\n  // Animatable center x-axis\r\n, cx: function(x) {\r\n    return this.add('cx', new SVG.Number(x))\r\n  }\r\n  // Animatable center y-axis\r\n, cy: function(y) {\r\n    return this.add('cy', new SVG.Number(y))\r\n  }\r\n  // Add animatable move\r\n, move: function(x, y) {\r\n    return this.x(x).y(y)\r\n  }\r\n  // Add animatable center\r\n, center: function(x, y) {\r\n    return this.cx(x).cy(y)\r\n  }\r\n  // Add animatable size\r\n, size: function(width, height) {\r\n    if (this.target() instanceof SVG.Text) {\r\n      // animate font size for Text elements\r\n      this.attr('font-size', width)\r\n\r\n    } else {\r\n      // animate bbox based size for all other elements\r\n      var box\r\n\r\n      if(!width || !height){\r\n        box = this.target().bbox()\r\n      }\r\n\r\n      if(!width){\r\n        width = box.width / box.height  * height\r\n      }\r\n\r\n      if(!height){\r\n        height = box.height / box.width  * width\r\n      }\r\n\r\n      this.add('width' , new SVG.Number(width))\r\n          .add('height', new SVG.Number(height))\r\n\r\n    }\r\n\r\n    return this\r\n  }\r\n  // Add animatable width\r\n, width: function(width) {\r\n    return this.add('width', new SVG.Number(width))\r\n  }\r\n  // Add animatable height\r\n, height: function(height) {\r\n    return this.add('height', new SVG.Number(height))\r\n  }\r\n  // Add animatable plot\r\n, plot: function(a, b, c, d) {\r\n    // Lines can be plotted with 4 arguments\r\n    if(arguments.length == 4) {\r\n      return this.plot([a, b, c, d])\r\n    }\r\n\r\n    return this.add('plot', new (this.target().morphArray)(a))\r\n  }\r\n  // Add leading method\r\n, leading: function(value) {\r\n    return this.target().leading ?\r\n      this.add('leading', new SVG.Number(value)) :\r\n      this\r\n  }\r\n  // Add animatable viewbox\r\n, viewbox: function(x, y, width, height) {\r\n    if (this.target() instanceof SVG.Container) {\r\n      this.add('viewbox', new SVG.ViewBox(x, y, width, height))\r\n    }\r\n\r\n    return this\r\n  }\r\n, update: function(o) {\r\n    if (this.target() instanceof SVG.Stop) {\r\n      if (typeof o == 'number' || o instanceof SVG.Number) {\r\n        return this.update({\r\n          offset:  arguments[0]\r\n        , color:   arguments[1]\r\n        , opacity: arguments[2]\r\n        })\r\n      }\r\n\r\n      if (o.opacity != null) this.attr('stop-opacity', o.opacity)\r\n      if (o.color   != null) this.attr('stop-color', o.color)\r\n      if (o.offset  != null) this.attr('offset', o.offset)\r\n    }\r\n\r\n    return this\r\n  }\r\n})\r\n\nSVG.Box = SVG.invent({\r\n  create: function(x, y, width, height) {\r\n    if (typeof x == 'object' && !(x instanceof SVG.Element)) {\r\n      // chromes getBoundingClientRect has no x and y property\r\n      return SVG.Box.call(this, x.left != null ? x.left : x.x , x.top != null ? x.top : x.y, x.width, x.height)\r\n    } else if (arguments.length == 4) {\r\n      this.x = x\r\n      this.y = y\r\n      this.width = width\r\n      this.height = height\r\n    }\r\n\r\n    // add center, right, bottom...\r\n    fullBox(this)\r\n  }\r\n, extend: {\r\n    // Merge rect box with another, return a new instance\r\n    merge: function(box) {\r\n      var b = new this.constructor()\r\n\r\n      // merge boxes\r\n      b.x      = Math.min(this.x, box.x)\r\n      b.y      = Math.min(this.y, box.y)\r\n      b.width  = Math.max(this.x + this.width,  box.x + box.width)  - b.x\r\n      b.height = Math.max(this.y + this.height, box.y + box.height) - b.y\r\n\r\n      return fullBox(b)\r\n    }\r\n\r\n  , transform: function(m) {\r\n      var xMin = Infinity, xMax = -Infinity, yMin = Infinity, yMax = -Infinity, p, bbox\r\n\r\n      var pts = [\r\n        new SVG.Point(this.x, this.y),\r\n        new SVG.Point(this.x2, this.y),\r\n        new SVG.Point(this.x, this.y2),\r\n        new SVG.Point(this.x2, this.y2)\r\n      ]\r\n\r\n      pts.forEach(function(p) {\r\n        p = p.transform(m)\r\n        xMin = Math.min(xMin,p.x)\r\n        xMax = Math.max(xMax,p.x)\r\n        yMin = Math.min(yMin,p.y)\r\n        yMax = Math.max(yMax,p.y)\r\n      })\r\n\r\n      bbox = new this.constructor()\r\n      bbox.x = xMin\r\n      bbox.width = xMax-xMin\r\n      bbox.y = yMin\r\n      bbox.height = yMax-yMin\r\n\r\n      fullBox(bbox)\r\n\r\n      return bbox\r\n    }\r\n  }\r\n})\r\n\r\nSVG.BBox = SVG.invent({\r\n  // Initialize\r\n  create: function(element) {\r\n    SVG.Box.apply(this, [].slice.call(arguments))\r\n\r\n    // get values if element is given\r\n    if (element instanceof SVG.Element) {\r\n      var box\r\n\r\n      // yes this is ugly, but Firefox can be a pain when it comes to elements that are not yet rendered\r\n      try {\r\n\r\n        if (!document.documentElement.contains){\r\n          // This is IE - it does not support contains() for top-level SVGs\r\n          var topParent = element.node\r\n          while (topParent.parentNode){\r\n            topParent = topParent.parentNode\r\n          }\r\n          if (topParent != document) throw new Exception('Element not in the dom')\r\n        } else {\r\n          // the element is NOT in the dom, throw error\r\n          if(!document.documentElement.contains(element.node)) throw new Exception('Element not in the dom')\r\n        }\r\n\r\n        // find native bbox\r\n        box = element.node.getBBox()\r\n      } catch(e) {\r\n        if(element instanceof SVG.Shape){\r\n          var clone = element.clone(SVG.parser.draw.instance).show()\r\n          box = clone.node.getBBox()\r\n          clone.remove()\r\n        }else{\r\n          box = {\r\n            x:      element.node.clientLeft\r\n          , y:      element.node.clientTop\r\n          , width:  element.node.clientWidth\r\n          , height: element.node.clientHeight\r\n          }\r\n        }\r\n      }\r\n\r\n      SVG.Box.call(this, box)\r\n    }\r\n\r\n  }\r\n\r\n  // Define ancestor\r\n, inherit: SVG.Box\r\n\r\n  // Define Parent\r\n, parent: SVG.Element\r\n\r\n  // Constructor\r\n, construct: {\r\n    // Get bounding box\r\n    bbox: function() {\r\n      return new SVG.BBox(this)\r\n    }\r\n  }\r\n\r\n})\r\n\r\nSVG.BBox.prototype.constructor = SVG.BBox\r\n\r\n\r\nSVG.extend(SVG.Element, {\r\n  tbox: function(){\r\n    console.warn('Use of TBox is deprecated and mapped to RBox. Use .rbox() instead.')\r\n    return this.rbox(this.doc())\r\n  }\r\n})\r\n\r\nSVG.RBox = SVG.invent({\r\n  // Initialize\r\n  create: function(element) {\r\n    SVG.Box.apply(this, [].slice.call(arguments))\r\n\r\n    if (element instanceof SVG.Element) {\r\n      SVG.Box.call(this, element.node.getBoundingClientRect())\r\n    }\r\n  }\r\n\r\n, inherit: SVG.Box\r\n\r\n  // define Parent\r\n, parent: SVG.Element\r\n\r\n, extend: {\r\n    addOffset: function() {\r\n      // offset by window scroll position, because getBoundingClientRect changes when window is scrolled\r\n      this.x += window.pageXOffset\r\n      this.y += window.pageYOffset\r\n      return this\r\n    }\r\n  }\r\n\r\n  // Constructor\r\n, construct: {\r\n    // Get rect box\r\n    rbox: function(el) {\r\n      if (el) return new SVG.RBox(this).transform(el.screenCTM().inverse())\r\n      return new SVG.RBox(this).addOffset()\r\n    }\r\n  }\r\n\r\n})\r\n\r\nSVG.RBox.prototype.constructor = SVG.RBox\r\n\nSVG.Matrix = SVG.invent({\r\n  // Initialize\r\n  create: function(source) {\r\n    var i, base = arrayToMatrix([1, 0, 0, 1, 0, 0])\r\n\r\n    // ensure source as object\r\n    source = source instanceof SVG.Element ?\r\n      source.matrixify() :\r\n    typeof source === 'string' ?\r\n      arrayToMatrix(source.split(SVG.regex.delimiter).map(parseFloat)) :\r\n    arguments.length == 6 ?\r\n      arrayToMatrix([].slice.call(arguments)) :\r\n    Array.isArray(source) ?\r\n      arrayToMatrix(source) :\r\n    typeof source === 'object' ?\r\n      source : base\r\n\r\n    // merge source\r\n    for (i = abcdef.length - 1; i >= 0; --i)\r\n      this[abcdef[i]] = source[abcdef[i]] != null ?\r\n        source[abcdef[i]] : base[abcdef[i]]\r\n  }\r\n\r\n  // Add methods\r\n, extend: {\r\n    // Extract individual transformations\r\n    extract: function() {\r\n      // find delta transform points\r\n      var px    = deltaTransformPoint(this, 0, 1)\r\n        , py    = deltaTransformPoint(this, 1, 0)\r\n        , skewX = 180 / Math.PI * Math.atan2(px.y, px.x) - 90\r\n\r\n      return {\r\n        // translation\r\n        x:        this.e\r\n      , y:        this.f\r\n      , transformedX:(this.e * Math.cos(skewX * Math.PI / 180) + this.f * Math.sin(skewX * Math.PI / 180)) / Math.sqrt(this.a * this.a + this.b * this.b)\r\n      , transformedY:(this.f * Math.cos(skewX * Math.PI / 180) + this.e * Math.sin(-skewX * Math.PI / 180)) / Math.sqrt(this.c * this.c + this.d * this.d)\r\n        // skew\r\n      , skewX:    -skewX\r\n      , skewY:    180 / Math.PI * Math.atan2(py.y, py.x)\r\n        // scale\r\n      , scaleX:   Math.sqrt(this.a * this.a + this.b * this.b)\r\n      , scaleY:   Math.sqrt(this.c * this.c + this.d * this.d)\r\n        // rotation\r\n      , rotation: skewX\r\n      , a: this.a\r\n      , b: this.b\r\n      , c: this.c\r\n      , d: this.d\r\n      , e: this.e\r\n      , f: this.f\r\n      , matrix: new SVG.Matrix(this)\r\n      }\r\n    }\r\n    // Clone matrix\r\n  , clone: function() {\r\n      return new SVG.Matrix(this)\r\n    }\r\n    // Morph one matrix into another\r\n  , morph: function(matrix) {\r\n      // store new destination\r\n      this.destination = new SVG.Matrix(matrix)\r\n\r\n      return this\r\n    }\r\n    // Get morphed matrix at a given position\r\n  , at: function(pos) {\r\n      // make sure a destination is defined\r\n      if (!this.destination) return this\r\n\r\n      // calculate morphed matrix at a given position\r\n      var matrix = new SVG.Matrix({\r\n        a: this.a + (this.destination.a - this.a) * pos\r\n      , b: this.b + (this.destination.b - this.b) * pos\r\n      , c: this.c + (this.destination.c - this.c) * pos\r\n      , d: this.d + (this.destination.d - this.d) * pos\r\n      , e: this.e + (this.destination.e - this.e) * pos\r\n      , f: this.f + (this.destination.f - this.f) * pos\r\n      })\r\n\r\n      return matrix\r\n    }\r\n    // Multiplies by given matrix\r\n  , multiply: function(matrix) {\r\n      return new SVG.Matrix(this.native().multiply(parseMatrix(matrix).native()))\r\n    }\r\n    // Inverses matrix\r\n  , inverse: function() {\r\n      return new SVG.Matrix(this.native().inverse())\r\n    }\r\n    // Translate matrix\r\n  , translate: function(x, y) {\r\n      return new SVG.Matrix(this.native().translate(x || 0, y || 0))\r\n    }\r\n    // Scale matrix\r\n  , scale: function(x, y, cx, cy) {\r\n      // support uniformal scale\r\n      if (arguments.length == 1) {\r\n        y = x\r\n      } else if (arguments.length == 3) {\r\n        cy = cx\r\n        cx = y\r\n        y = x\r\n      }\r\n\r\n      return this.around(cx, cy, new SVG.Matrix(x, 0, 0, y, 0, 0))\r\n    }\r\n    // Rotate matrix\r\n  , rotate: function(r, cx, cy) {\r\n      // convert degrees to radians\r\n      r = SVG.utils.radians(r)\r\n\r\n      return this.around(cx, cy, new SVG.Matrix(Math.cos(r), Math.sin(r), -Math.sin(r), Math.cos(r), 0, 0))\r\n    }\r\n    // Flip matrix on x or y, at a given offset\r\n  , flip: function(a, o) {\r\n      return a == 'x' ?\r\n          this.scale(-1, 1, o, 0) :\r\n        a == 'y' ?\r\n          this.scale(1, -1, 0, o) :\r\n          this.scale(-1, -1, a, o != null ? o : a)\r\n    }\r\n    // Skew\r\n  , skew: function(x, y, cx, cy) {\r\n      // support uniformal skew\r\n      if (arguments.length == 1) {\r\n        y = x\r\n      } else if (arguments.length == 3) {\r\n        cy = cx\r\n        cx = y\r\n        y = x\r\n      }\r\n\r\n      // convert degrees to radians\r\n      x = SVG.utils.radians(x)\r\n      y = SVG.utils.radians(y)\r\n\r\n      return this.around(cx, cy, new SVG.Matrix(1, Math.tan(y), Math.tan(x), 1, 0, 0))\r\n    }\r\n    // SkewX\r\n  , skewX: function(x, cx, cy) {\r\n      return this.skew(x, 0, cx, cy)\r\n    }\r\n    // SkewY\r\n  , skewY: function(y, cx, cy) {\r\n      return this.skew(0, y, cx, cy)\r\n    }\r\n    // Transform around a center point\r\n  , around: function(cx, cy, matrix) {\r\n      return this\r\n        .multiply(new SVG.Matrix(1, 0, 0, 1, cx || 0, cy || 0))\r\n        .multiply(matrix)\r\n        .multiply(new SVG.Matrix(1, 0, 0, 1, -cx || 0, -cy || 0))\r\n    }\r\n    // Convert to native SVGMatrix\r\n  , native: function() {\r\n      // create new matrix\r\n      var matrix = SVG.parser.native.createSVGMatrix()\r\n\r\n      // update with current values\r\n      for (var i = abcdef.length - 1; i >= 0; i--)\r\n        matrix[abcdef[i]] = this[abcdef[i]]\r\n\r\n      return matrix\r\n    }\r\n    // Convert matrix to string\r\n  , toString: function() {\r\n      // Construct the matrix directly, avoid values that are too small\r\n      return 'matrix(' + float32String(this.a) + ',' + float32String(this.b)\r\n        + ',' + float32String(this.c) + ',' + float32String(this.d)\r\n        + ',' + float32String(this.e) + ',' + float32String(this.f)\r\n        + ')'\r\n    }\r\n  }\r\n\r\n  // Define parent\r\n, parent: SVG.Element\r\n\r\n  // Add parent method\r\n, construct: {\r\n    // Get current matrix\r\n    ctm: function() {\r\n      return new SVG.Matrix(this.node.getCTM())\r\n    },\r\n    // Get current screen matrix\r\n    screenCTM: function() {\r\n      /* https://bugzilla.mozilla.org/show_bug.cgi?id=1344537\r\n         This is needed because FF does not return the transformation matrix\r\n         for the inner coordinate system when getScreenCTM() is called on nested svgs.\r\n         However all other Browsers do that */\r\n      if(this instanceof SVG.Nested) {\r\n        var rect = this.rect(1,1)\r\n        var m = rect.node.getScreenCTM()\r\n        rect.remove()\r\n        return new SVG.Matrix(m)\r\n      }\r\n      return new SVG.Matrix(this.node.getScreenCTM())\r\n    }\r\n\r\n  }\r\n\r\n})\r\n\nSVG.Point = SVG.invent({\r\n  // Initialize\r\n  create: function(x,y) {\r\n    var i, source, base = {x:0, y:0}\r\n\r\n    // ensure source as object\r\n    source = Array.isArray(x) ?\r\n      {x:x[0], y:x[1]} :\r\n    typeof x === 'object' ?\r\n      {x:x.x, y:x.y} :\r\n    x != null ?\r\n      {x:x, y:(y != null ? y : x)} : base // If y has no value, then x is used has its value\r\n\r\n    // merge source\r\n    this.x = source.x\r\n    this.y = source.y\r\n  }\r\n\r\n  // Add methods\r\n, extend: {\r\n    // Clone point\r\n    clone: function() {\r\n      return new SVG.Point(this)\r\n    }\r\n    // Morph one point into another\r\n  , morph: function(x, y) {\r\n      // store new destination\r\n      this.destination = new SVG.Point(x, y)\r\n\r\n      return this\r\n    }\r\n    // Get morphed point at a given position\r\n  , at: function(pos) {\r\n      // make sure a destination is defined\r\n      if (!this.destination) return this\r\n\r\n      // calculate morphed matrix at a given position\r\n      var point = new SVG.Point({\r\n        x: this.x + (this.destination.x - this.x) * pos\r\n      , y: this.y + (this.destination.y - this.y) * pos\r\n      })\r\n\r\n      return point\r\n    }\r\n    // Convert to native SVGPoint\r\n  , native: function() {\r\n      // create new point\r\n      var point = SVG.parser.native.createSVGPoint()\r\n\r\n      // update with current values\r\n      point.x = this.x\r\n      point.y = this.y\r\n\r\n      return point\r\n    }\r\n    // transform point with matrix\r\n  , transform: function(matrix) {\r\n      return new SVG.Point(this.native().matrixTransform(matrix.native()))\r\n    }\r\n\r\n  }\r\n\r\n})\r\n\r\nSVG.extend(SVG.Element, {\r\n\r\n  // Get point\r\n  point: function(x, y) {\r\n    return new SVG.Point(x,y).transform(this.screenCTM().inverse());\r\n  }\r\n\r\n})\r\n\nSVG.extend(SVG.Element, {\r\n  // Set svg element attribute\r\n  attr: function(a, v, n) {\r\n    // act as full getter\r\n    if (a == null) {\r\n      // get an object of attributes\r\n      a = {}\r\n      v = this.node.attributes\r\n      for (n = v.length - 1; n >= 0; n--)\r\n        a[v[n].nodeName] = SVG.regex.isNumber.test(v[n].nodeValue) ? parseFloat(v[n].nodeValue) : v[n].nodeValue\r\n\r\n      return a\r\n\r\n    } else if (typeof a == 'object') {\r\n      // apply every attribute individually if an object is passed\r\n      for (v in a) this.attr(v, a[v])\r\n\r\n    } else if (v === null) {\r\n        // remove value\r\n        this.node.removeAttribute(a)\r\n\r\n    } else if (v == null) {\r\n      // act as a getter if the first and only argument is not an object\r\n      v = this.node.getAttribute(a)\r\n      return v == null ?\r\n        SVG.defaults.attrs[a] :\r\n      SVG.regex.isNumber.test(v) ?\r\n        parseFloat(v) : v\r\n\r\n    } else {\r\n      // BUG FIX: some browsers will render a stroke if a color is given even though stroke width is 0\r\n      if (a == 'stroke-width')\r\n        this.attr('stroke', parseFloat(v) > 0 ? this._stroke : null)\r\n      else if (a == 'stroke')\r\n        this._stroke = v\r\n\r\n      // convert image fill and stroke to patterns\r\n      if (a == 'fill' || a == 'stroke') {\r\n        if (SVG.regex.isImage.test(v))\r\n          v = this.doc().defs().image(v, 0, 0)\r\n\r\n        if (v instanceof SVG.Image)\r\n          v = this.doc().defs().pattern(0, 0, function() {\r\n            this.add(v)\r\n          })\r\n      }\r\n\r\n      // ensure correct numeric values (also accepts NaN and Infinity)\r\n      if (typeof v === 'number')\r\n        v = new SVG.Number(v)\r\n\r\n      // ensure full hex color\r\n      else if (SVG.Color.isColor(v))\r\n        v = new SVG.Color(v)\r\n\r\n      // parse array values\r\n      else if (Array.isArray(v))\r\n        v = new SVG.Array(v)\r\n\r\n      // if the passed attribute is leading...\r\n      if (a == 'leading') {\r\n        // ... call the leading method instead\r\n        if (this.leading)\r\n          this.leading(v)\r\n      } else {\r\n        // set given attribute on node\r\n        typeof n === 'string' ?\r\n          this.node.setAttributeNS(n, a, v.toString()) :\r\n          this.node.setAttribute(a, v.toString())\r\n      }\r\n\r\n      // rebuild if required\r\n      if (this.rebuild && (a == 'font-size' || a == 'x'))\r\n        this.rebuild(a, v)\r\n    }\r\n\r\n    return this\r\n  }\r\n})\nSVG.extend(SVG.Element, {\r\n  // Add transformations\r\n  transform: function(o, relative) {\r\n    // get target in case of the fx module, otherwise reference this\r\n    var target = this\r\n      , matrix, bbox\r\n\r\n    // act as a getter\r\n    if (typeof o !== 'object') {\r\n      // get current matrix\r\n      matrix = new SVG.Matrix(target).extract()\r\n\r\n      return typeof o === 'string' ? matrix[o] : matrix\r\n    }\r\n\r\n    // get current matrix\r\n    matrix = new SVG.Matrix(target)\r\n\r\n    // ensure relative flag\r\n    relative = !!relative || !!o.relative\r\n\r\n    // act on matrix\r\n    if (o.a != null) {\r\n      matrix = relative ?\r\n        // relative\r\n        matrix.multiply(new SVG.Matrix(o)) :\r\n        // absolute\r\n        new SVG.Matrix(o)\r\n\r\n    // act on rotation\r\n    } else if (o.rotation != null) {\r\n      // ensure centre point\r\n      ensureCentre(o, target)\r\n\r\n      // apply transformation\r\n      matrix = relative ?\r\n        // relative\r\n        matrix.rotate(o.rotation, o.cx, o.cy) :\r\n        // absolute\r\n        matrix.rotate(o.rotation - matrix.extract().rotation, o.cx, o.cy)\r\n\r\n    // act on scale\r\n    } else if (o.scale != null || o.scaleX != null || o.scaleY != null) {\r\n      // ensure centre point\r\n      ensureCentre(o, target)\r\n\r\n      // ensure scale values on both axes\r\n      o.scaleX = o.scale != null ? o.scale : o.scaleX != null ? o.scaleX : 1\r\n      o.scaleY = o.scale != null ? o.scale : o.scaleY != null ? o.scaleY : 1\r\n\r\n      if (!relative) {\r\n        // absolute; multiply inversed values\r\n        var e = matrix.extract()\r\n        o.scaleX = o.scaleX * 1 / e.scaleX\r\n        o.scaleY = o.scaleY * 1 / e.scaleY\r\n      }\r\n\r\n      matrix = matrix.scale(o.scaleX, o.scaleY, o.cx, o.cy)\r\n\r\n    // act on skew\r\n    } else if (o.skew != null || o.skewX != null || o.skewY != null) {\r\n      // ensure centre point\r\n      ensureCentre(o, target)\r\n\r\n      // ensure skew values on both axes\r\n      o.skewX = o.skew != null ? o.skew : o.skewX != null ? o.skewX : 0\r\n      o.skewY = o.skew != null ? o.skew : o.skewY != null ? o.skewY : 0\r\n\r\n      if (!relative) {\r\n        // absolute; reset skew values\r\n        var e = matrix.extract()\r\n        matrix = matrix.multiply(new SVG.Matrix().skew(e.skewX, e.skewY, o.cx, o.cy).inverse())\r\n      }\r\n\r\n      matrix = matrix.skew(o.skewX, o.skewY, o.cx, o.cy)\r\n\r\n    // act on flip\r\n    } else if (o.flip) {\r\n      if(o.flip == 'x' || o.flip == 'y') {\r\n        o.offset = o.offset == null ? target.bbox()['c' + o.flip] : o.offset\r\n      } else {\r\n        if(o.offset == null) {\r\n          bbox = target.bbox()\r\n          o.flip = bbox.cx\r\n          o.offset = bbox.cy\r\n        } else {\r\n          o.flip = o.offset\r\n        }\r\n      }\r\n\r\n      matrix = new SVG.Matrix().flip(o.flip, o.offset)\r\n\r\n    // act on translate\r\n    } else if (o.x != null || o.y != null) {\r\n      if (relative) {\r\n        // relative\r\n        matrix = matrix.translate(o.x, o.y)\r\n      } else {\r\n        // absolute\r\n        if (o.x != null) matrix.e = o.x\r\n        if (o.y != null) matrix.f = o.y\r\n      }\r\n    }\r\n\r\n    return this.attr('transform', matrix)\r\n  }\r\n})\r\n\r\nSVG.extend(SVG.FX, {\r\n  transform: function(o, relative) {\r\n    // get target in case of the fx module, otherwise reference this\r\n    var target = this.target()\r\n      , matrix, bbox\r\n\r\n    // act as a getter\r\n    if (typeof o !== 'object') {\r\n      // get current matrix\r\n      matrix = new SVG.Matrix(target).extract()\r\n\r\n      return typeof o === 'string' ? matrix[o] : matrix\r\n    }\r\n\r\n    // ensure relative flag\r\n    relative = !!relative || !!o.relative\r\n\r\n    // act on matrix\r\n    if (o.a != null) {\r\n      matrix = new SVG.Matrix(o)\r\n\r\n    // act on rotation\r\n    } else if (o.rotation != null) {\r\n      // ensure centre point\r\n      ensureCentre(o, target)\r\n\r\n      // apply transformation\r\n      matrix = new SVG.Rotate(o.rotation, o.cx, o.cy)\r\n\r\n    // act on scale\r\n    } else if (o.scale != null || o.scaleX != null || o.scaleY != null) {\r\n      // ensure centre point\r\n      ensureCentre(o, target)\r\n\r\n      // ensure scale values on both axes\r\n      o.scaleX = o.scale != null ? o.scale : o.scaleX != null ? o.scaleX : 1\r\n      o.scaleY = o.scale != null ? o.scale : o.scaleY != null ? o.scaleY : 1\r\n\r\n      matrix = new SVG.Scale(o.scaleX, o.scaleY, o.cx, o.cy)\r\n\r\n    // act on skew\r\n    } else if (o.skewX != null || o.skewY != null) {\r\n      // ensure centre point\r\n      ensureCentre(o, target)\r\n\r\n      // ensure skew values on both axes\r\n      o.skewX = o.skewX != null ? o.skewX : 0\r\n      o.skewY = o.skewY != null ? o.skewY : 0\r\n\r\n      matrix = new SVG.Skew(o.skewX, o.skewY, o.cx, o.cy)\r\n\r\n    // act on flip\r\n    } else if (o.flip) {\r\n      if(o.flip == 'x' || o.flip == 'y') {\r\n        o.offset = o.offset == null ? target.bbox()['c' + o.flip] : o.offset\r\n      } else {\r\n        if(o.offset == null) {\r\n          bbox = target.bbox()\r\n          o.flip = bbox.cx\r\n          o.offset = bbox.cy\r\n        } else {\r\n          o.flip = o.offset\r\n        }\r\n      }\r\n\r\n      matrix = new SVG.Matrix().flip(o.flip, o.offset)\r\n\r\n    // act on translate\r\n    } else if (o.x != null || o.y != null) {\r\n      matrix = new SVG.Translate(o.x, o.y)\r\n    }\r\n\r\n    if(!matrix) return this\r\n\r\n    matrix.relative = relative\r\n\r\n    this.last().transforms.push(matrix)\r\n\r\n    return this._callStart()\r\n  }\r\n})\r\n\r\nSVG.extend(SVG.Element, {\r\n  // Reset all transformations\r\n  untransform: function() {\r\n    return this.attr('transform', null)\r\n  },\r\n  // merge the whole transformation chain into one matrix and returns it\r\n  matrixify: function() {\r\n\r\n    var matrix = (this.attr('transform') || '')\r\n      // split transformations\r\n      .split(SVG.regex.transforms).slice(0,-1).map(function(str){\r\n        // generate key => value pairs\r\n        var kv = str.trim().split('(')\r\n        return [kv[0], kv[1].split(SVG.regex.delimiter).map(function(str){ return parseFloat(str) })]\r\n      })\r\n      // merge every transformation into one matrix\r\n      .reduce(function(matrix, transform){\r\n\r\n        if(transform[0] == 'matrix') return matrix.multiply(arrayToMatrix(transform[1]))\r\n        return matrix[transform[0]].apply(matrix, transform[1])\r\n\r\n      }, new SVG.Matrix())\r\n\r\n    return matrix\r\n  },\r\n  // add an element to another parent without changing the visual representation on the screen\r\n  toParent: function(parent) {\r\n    if(this == parent) return this\r\n    var ctm = this.screenCTM()\r\n    var pCtm = parent.screenCTM().inverse()\r\n\r\n    this.addTo(parent).untransform().transform(pCtm.multiply(ctm))\r\n\r\n    return this\r\n  },\r\n  // same as above with parent equals root-svg\r\n  toDoc: function() {\r\n    return this.toParent(this.doc())\r\n  }\r\n\r\n})\r\n\r\nSVG.Transformation = SVG.invent({\r\n\r\n  create: function(source, inversed){\r\n\r\n    if(arguments.length > 1 && typeof inversed != 'boolean'){\r\n      return this.constructor.call(this, [].slice.call(arguments))\r\n    }\r\n\r\n    if(Array.isArray(source)){\r\n      for(var i = 0, len = this.arguments.length; i < len; ++i){\r\n        this[this.arguments[i]] = source[i]\r\n      }\r\n    } else if(typeof source == 'object'){\r\n      for(var i = 0, len = this.arguments.length; i < len; ++i){\r\n        this[this.arguments[i]] = source[this.arguments[i]]\r\n      }\r\n    }\r\n\r\n    this.inversed = false\r\n\r\n    if(inversed === true){\r\n      this.inversed = true\r\n    }\r\n\r\n  }\r\n\r\n, extend: {\r\n\r\n    arguments: []\r\n  , method: ''\r\n\r\n  , at: function(pos){\r\n\r\n      var params = []\r\n\r\n      for(var i = 0, len = this.arguments.length; i < len; ++i){\r\n        params.push(this[this.arguments[i]])\r\n      }\r\n\r\n      var m = this._undo || new SVG.Matrix()\r\n\r\n      m = new SVG.Matrix().morph(SVG.Matrix.prototype[this.method].apply(m, params)).at(pos)\r\n\r\n      return this.inversed ? m.inverse() : m\r\n\r\n    }\r\n\r\n  , undo: function(o){\r\n      for(var i = 0, len = this.arguments.length; i < len; ++i){\r\n        o[this.arguments[i]] = typeof this[this.arguments[i]] == 'undefined' ? 0 : o[this.arguments[i]]\r\n      }\r\n\r\n      // The method SVG.Matrix.extract which was used before calling this\r\n      // method to obtain a value for the parameter o doesn't return a cx and\r\n      // a cy so we use the ones that were provided to this object at its creation\r\n      o.cx = this.cx\r\n      o.cy = this.cy\r\n\r\n      this._undo = new SVG[capitalize(this.method)](o, true).at(1)\r\n\r\n      return this\r\n    }\r\n\r\n  }\r\n\r\n})\r\n\r\nSVG.Translate = SVG.invent({\r\n\r\n  parent: SVG.Matrix\r\n, inherit: SVG.Transformation\r\n\r\n, create: function(source, inversed){\r\n    this.constructor.apply(this, [].slice.call(arguments))\r\n  }\r\n\r\n, extend: {\r\n    arguments: ['transformedX', 'transformedY']\r\n  , method: 'translate'\r\n  }\r\n\r\n})\r\n\r\nSVG.Rotate = SVG.invent({\r\n\r\n  parent: SVG.Matrix\r\n, inherit: SVG.Transformation\r\n\r\n, create: function(source, inversed){\r\n    this.constructor.apply(this, [].slice.call(arguments))\r\n  }\r\n\r\n, extend: {\r\n    arguments: ['rotation', 'cx', 'cy']\r\n  , method: 'rotate'\r\n  , at: function(pos){\r\n      var m = new SVG.Matrix().rotate(new SVG.Number().morph(this.rotation - (this._undo ? this._undo.rotation : 0)).at(pos), this.cx, this.cy)\r\n      return this.inversed ? m.inverse() : m\r\n    }\r\n  , undo: function(o){\r\n      this._undo = o\r\n      return this\r\n    }\r\n  }\r\n\r\n})\r\n\r\nSVG.Scale = SVG.invent({\r\n\r\n  parent: SVG.Matrix\r\n, inherit: SVG.Transformation\r\n\r\n, create: function(source, inversed){\r\n    this.constructor.apply(this, [].slice.call(arguments))\r\n  }\r\n\r\n, extend: {\r\n    arguments: ['scaleX', 'scaleY', 'cx', 'cy']\r\n  , method: 'scale'\r\n  }\r\n\r\n})\r\n\r\nSVG.Skew = SVG.invent({\r\n\r\n  parent: SVG.Matrix\r\n, inherit: SVG.Transformation\r\n\r\n, create: function(source, inversed){\r\n    this.constructor.apply(this, [].slice.call(arguments))\r\n  }\r\n\r\n, extend: {\r\n    arguments: ['skewX', 'skewY', 'cx', 'cy']\r\n  , method: 'skew'\r\n  }\r\n\r\n})\r\n\nSVG.extend(SVG.Element, {\r\n  // Dynamic style generator\r\n  style: function(s, v) {\r\n    if (arguments.length == 0) {\r\n      // get full style\r\n      return this.node.style.cssText || ''\r\n\r\n    } else if (arguments.length < 2) {\r\n      // apply every style individually if an object is passed\r\n      if (typeof s == 'object') {\r\n        for (v in s) this.style(v, s[v])\r\n\r\n      } else if (SVG.regex.isCss.test(s)) {\r\n        // parse css string\r\n        s = s.split(/\\s*;\\s*/)\r\n          // filter out suffix ; and stuff like ;;\r\n          .filter(function(e) { return !!e })\r\n          .map(function(e){ return e.split(/\\s*:\\s*/) })\r\n\r\n        // apply every definition individually\r\n        while (v = s.pop()) {\r\n          this.style(v[0], v[1])\r\n        }\r\n      } else {\r\n        // act as a getter if the first and only argument is not an object\r\n        return this.node.style[camelCase(s)]\r\n      }\r\n\r\n    } else {\r\n      this.node.style[camelCase(s)] = v === null || SVG.regex.isBlank.test(v) ? '' : v\r\n    }\r\n\r\n    return this\r\n  }\r\n})\nSVG.Parent = SVG.invent({\r\n  // Initialize node\r\n  create: function(element) {\r\n    this.constructor.call(this, element)\r\n  }\r\n\r\n  // Inherit from\r\n, inherit: SVG.Element\r\n\r\n  // Add class methods\r\n, extend: {\r\n    // Returns all child elements\r\n    children: function() {\r\n      return SVG.utils.map(SVG.utils.filterSVGElements(this.node.childNodes), function(node) {\r\n        return SVG.adopt(node)\r\n      })\r\n    }\r\n    // Add given element at a position\r\n  , add: function(element, i) {\r\n      if (i == null)\r\n        this.node.appendChild(element.node)\r\n      else if (element.node != this.node.childNodes[i])\r\n        this.node.insertBefore(element.node, this.node.childNodes[i])\r\n\r\n      return this\r\n    }\r\n    // Basically does the same as `add()` but returns the added element instead\r\n  , put: function(element, i) {\r\n      this.add(element, i)\r\n      return element\r\n    }\r\n    // Checks if the given element is a child\r\n  , has: function(element) {\r\n      return this.index(element) >= 0\r\n    }\r\n    // Gets index of given element\r\n  , index: function(element) {\r\n      return [].slice.call(this.node.childNodes).indexOf(element.node)\r\n    }\r\n    // Get a element at the given index\r\n  , get: function(i) {\r\n      return SVG.adopt(this.node.childNodes[i])\r\n    }\r\n    // Get first child\r\n  , first: function() {\r\n      return this.get(0)\r\n    }\r\n    // Get the last child\r\n  , last: function() {\r\n      return this.get(this.node.childNodes.length - 1)\r\n    }\r\n    // Iterates over all children and invokes a given block\r\n  , each: function(block, deep) {\r\n      var i, il\r\n        , children = this.children()\r\n\r\n      for (i = 0, il = children.length; i < il; i++) {\r\n        if (children[i] instanceof SVG.Element)\r\n          block.apply(children[i], [i, children])\r\n\r\n        if (deep && (children[i] instanceof SVG.Container))\r\n          children[i].each(block, deep)\r\n      }\r\n\r\n      return this\r\n    }\r\n    // Remove a given child\r\n  , removeElement: function(element) {\r\n      this.node.removeChild(element.node)\r\n\r\n      return this\r\n    }\r\n    // Remove all elements in this container\r\n  , clear: function() {\r\n      // remove children\r\n      while(this.node.hasChildNodes())\r\n        this.node.removeChild(this.node.lastChild)\r\n\r\n      // remove defs reference\r\n      delete this._defs\r\n\r\n      return this\r\n    }\r\n  , // Get defs\r\n    defs: function() {\r\n      return this.doc().defs()\r\n    }\r\n  }\r\n\r\n})\r\n\nSVG.extend(SVG.Parent, {\r\n\r\n  ungroup: function(parent, depth) {\r\n    if(depth === 0 || this instanceof SVG.Defs || this.node == SVG.parser.draw) return this\r\n\r\n    parent = parent || (this instanceof SVG.Doc ? this : this.parent(SVG.Parent))\r\n    depth = depth || Infinity\r\n\r\n    this.each(function(){\r\n      if(this instanceof SVG.Defs) return this\r\n      if(this instanceof SVG.Parent) return this.ungroup(parent, depth-1)\r\n      return this.toParent(parent)\r\n    })\r\n\r\n    this.node.firstChild || this.remove()\r\n\r\n    return this\r\n  },\r\n\r\n  flatten: function(parent, depth) {\r\n    return this.ungroup(parent, depth)\r\n  }\r\n\r\n})\nSVG.Container = SVG.invent({\r\n  // Initialize node\r\n  create: function(element) {\r\n    this.constructor.call(this, element)\r\n  }\r\n\r\n  // Inherit from\r\n, inherit: SVG.Parent\r\n\r\n})\n\r\nSVG.ViewBox = SVG.invent({\r\n\r\n  create: function(source) {\r\n    var i, base = [0, 0, 0, 0]\r\n\r\n    var x, y, width, height, box, view, we, he\r\n      , wm   = 1 // width multiplier\r\n      , hm   = 1 // height multiplier\r\n      , reg  = /[+-]?(?:\\d+(?:\\.\\d*)?|\\.\\d+)(?:e[+-]?\\d+)?/gi\r\n\r\n    if(source instanceof SVG.Element){\r\n\r\n      we = source\r\n      he = source\r\n      view = (source.attr('viewBox') || '').match(reg)\r\n      box = source.bbox\r\n\r\n      // get dimensions of current node\r\n      width  = new SVG.Number(source.width())\r\n      height = new SVG.Number(source.height())\r\n\r\n      // find nearest non-percentual dimensions\r\n      while (width.unit == '%') {\r\n        wm *= width.value\r\n        width = new SVG.Number(we instanceof SVG.Doc ? we.parent().offsetWidth : we.parent().width())\r\n        we = we.parent()\r\n      }\r\n      while (height.unit == '%') {\r\n        hm *= height.value\r\n        height = new SVG.Number(he instanceof SVG.Doc ? he.parent().offsetHeight : he.parent().height())\r\n        he = he.parent()\r\n      }\r\n\r\n      // ensure defaults\r\n      this.x      = 0\r\n      this.y      = 0\r\n      this.width  = width  * wm\r\n      this.height = height * hm\r\n      this.zoom   = 1\r\n\r\n      if (view) {\r\n        // get width and height from viewbox\r\n        x      = parseFloat(view[0])\r\n        y      = parseFloat(view[1])\r\n        width  = parseFloat(view[2])\r\n        height = parseFloat(view[3])\r\n\r\n        // calculate zoom accoring to viewbox\r\n        this.zoom = ((this.width / this.height) > (width / height)) ?\r\n          this.height / height :\r\n          this.width  / width\r\n\r\n        // calculate real pixel dimensions on parent SVG.Doc element\r\n        this.x      = x\r\n        this.y      = y\r\n        this.width  = width\r\n        this.height = height\r\n\r\n      }\r\n\r\n    }else{\r\n\r\n      // ensure source as object\r\n      source = typeof source === 'string' ?\r\n        source.match(reg).map(function(el){ return parseFloat(el) }) :\r\n      Array.isArray(source) ?\r\n        source :\r\n      typeof source == 'object' ?\r\n        [source.x, source.y, source.width, source.height] :\r\n      arguments.length == 4 ?\r\n        [].slice.call(arguments) :\r\n        base\r\n\r\n      this.x = source[0]\r\n      this.y = source[1]\r\n      this.width = source[2]\r\n      this.height = source[3]\r\n    }\r\n\r\n\r\n  }\r\n\r\n, extend: {\r\n\r\n    toString: function() {\r\n      return this.x + ' ' + this.y + ' ' + this.width + ' ' + this.height\r\n    }\r\n  , morph: function(x, y, width, height){\r\n      this.destination = new SVG.ViewBox(x, y, width, height)\r\n      return this\r\n    }\r\n\r\n  , at: function(pos) {\r\n\r\n      if(!this.destination) return this\r\n\r\n      return new SVG.ViewBox([\r\n          this.x + (this.destination.x - this.x) * pos\r\n        , this.y + (this.destination.y - this.y) * pos\r\n        , this.width + (this.destination.width - this.width) * pos\r\n        , this.height + (this.destination.height - this.height) * pos\r\n      ])\r\n\r\n    }\r\n\r\n  }\r\n\r\n  // Define parent\r\n, parent: SVG.Container\r\n\r\n  // Add parent method\r\n, construct: {\r\n\r\n    // get/set viewbox\r\n    viewbox: function(x, y, width, height) {\r\n      if (arguments.length == 0)\r\n        // act as a getter if there are no arguments\r\n        return new SVG.ViewBox(this)\r\n\r\n      // otherwise act as a setter\r\n      return this.attr('viewBox', new SVG.ViewBox(x, y, width, height))\r\n    }\r\n\r\n  }\r\n\r\n})\n// Add events to elements\r\n\r\n;[ 'click',\r\n  'dblclick',\r\n  'mousedown',\r\n  'mouseup',\r\n  'mouseover',\r\n  'mouseout',\r\n  'mousemove',\r\n  'mouseenter',\r\n  'mouseleave',\r\n  'touchstart',\r\n  'touchmove',\r\n  'touchleave',\r\n  'touchend',\r\n  'touchcancel' ].forEach(function (event) {\r\n    // add event to SVG.Element\r\n    SVG.Element.prototype[event] = function (f) {\r\n      // bind event to element rather than element node\r\n      if (f == null) {\r\n        SVG.off(this, event)\r\n      } else {\r\n        SVG.on(this, event, f)\r\n      }\r\n      return this\r\n    }\r\n  })\r\n\r\nSVG.listenerId = 0\r\n\r\n// Add event binder in the SVG namespace\r\nSVG.on = function (node, events, listener, binding, options) {\r\n  var l = listener.bind(binding || node)\r\n  var n = node instanceof SVG.Element ? node.node : node\r\n\r\n  // ensure instance object for nodes which are not adopted\r\n  n.instance = n.instance || {_events: {}}\r\n\r\n  var bag = n.instance._events\r\n\r\n  // add id to listener\r\n  if (!listener._svgjsListenerId) { listener._svgjsListenerId = ++SVG.listenerId }\r\n\r\n  events.split(SVG.regex.delimiter).forEach(function (event) {\r\n    var ev = event.split('.')[0]\r\n    var ns = event.split('.')[1] || '*'\r\n\r\n    // ensure valid object\r\n    bag[ev] = bag[ev] || {}\r\n    bag[ev][ns] = bag[ev][ns] || {}\r\n\r\n    // reference listener\r\n    bag[ev][ns][listener._svgjsListenerId] = l\r\n\r\n    // add listener\r\n    n.addEventListener(ev, l, options || false)\r\n  })\r\n}\r\n\r\n// Add event unbinder in the SVG namespace\r\nSVG.off = function (node, events, listener, options) {\r\n  var n = node instanceof SVG.Element ? node.node : node\r\n  if (!n.instance) return\r\n\r\n  // listener can be a function or a number\r\n  if (typeof listener === 'function') {\r\n    listener = listener._svgjsListenerId\r\n    if (!listener) return\r\n  }\r\n\r\n  var bag = n.instance._events\r\n\r\n  ;(events || '').split(SVG.regex.delimiter).forEach(function (event) {\r\n    var ev = event && event.split('.')[0]\r\n    var ns = event && event.split('.')[1]\r\n    var namespace, l\r\n\r\n    if (listener) {\r\n      // remove listener reference\r\n      if (bag[ev] && bag[ev][ns || '*']) {\r\n        // removeListener\r\n        n.removeEventListener(ev, bag[ev][ns || '*'][listener], options || false)\r\n\r\n        delete bag[ev][ns || '*'][listener]\r\n      }\r\n    } else if (ev && ns) {\r\n      // remove all listeners for a namespaced event\r\n      if (bag[ev] && bag[ev][ns]) {\r\n        for (l in bag[ev][ns]) { SVG.off(n, [ev, ns].join('.'), l) }\r\n\r\n        delete bag[ev][ns]\r\n      }\r\n    } else if (ns) {\r\n      // remove all listeners for a specific namespace\r\n      for (event in bag) {\r\n        for (namespace in bag[event]) {\r\n          if (ns === namespace) { SVG.off(n, [event, ns].join('.')) }\r\n        }\r\n      }\r\n    } else if (ev) {\r\n      // remove all listeners for the event\r\n      if (bag[ev]) {\r\n        for (namespace in bag[ev]) { SVG.off(n, [ev, namespace].join('.')) }\r\n\r\n        delete bag[ev]\r\n      }\r\n    } else {\r\n      // remove all listeners on a given node\r\n      for (event in bag) { SVG.off(n, event) }\r\n\r\n      n.instance._events = {}\r\n    }\r\n  })\r\n}\r\n\r\nSVG.extend(SVG.Element, {\r\n  // Bind given event to listener\r\n  on: function (event, listener, binding, options) {\r\n    SVG.on(this, event, listener, binding, options)\r\n    return this\r\n  },\r\n  // Unbind event from listener\r\n  off: function (event, listener) {\r\n    SVG.off(this.node, event, listener)\r\n    return this\r\n  },\r\n  fire: function (event, data) {\r\n    // Dispatch event\r\n    if (event instanceof window.Event) {\r\n      this.node.dispatchEvent(event)\r\n    } else {\r\n      this.node.dispatchEvent(event = new SVG.CustomEvent(event, {detail: data, cancelable: true}))\r\n    }\r\n    this._event = event\r\n    return this\r\n  },\r\n  event: function() {\r\n    return this._event\r\n  }\r\n})\r\n\n\r\nSVG.Defs = SVG.invent({\r\n  // Initialize node\r\n  create: 'defs'\r\n\r\n  // Inherit from\r\n, inherit: SVG.Container\r\n\r\n})\nSVG.G = SVG.invent({\r\n  // Initialize node\r\n  create: 'g'\r\n\r\n  // Inherit from\r\n, inherit: SVG.Container\r\n\r\n  // Add class methods\r\n, extend: {\r\n    // Move over x-axis\r\n    x: function(x) {\r\n      return x == null ? this.transform('x') : this.transform({ x: x - this.x() }, true)\r\n    }\r\n    // Move over y-axis\r\n  , y: function(y) {\r\n      return y == null ? this.transform('y') : this.transform({ y: y - this.y() }, true)\r\n    }\r\n    // Move by center over x-axis\r\n  , cx: function(x) {\r\n      return x == null ? this.gbox().cx : this.x(x - this.gbox().width / 2)\r\n    }\r\n    // Move by center over y-axis\r\n  , cy: function(y) {\r\n      return y == null ? this.gbox().cy : this.y(y - this.gbox().height / 2)\r\n    }\r\n  , gbox: function() {\r\n\r\n      var bbox  = this.bbox()\r\n        , trans = this.transform()\r\n\r\n      bbox.x  += trans.x\r\n      bbox.x2 += trans.x\r\n      bbox.cx += trans.x\r\n\r\n      bbox.y  += trans.y\r\n      bbox.y2 += trans.y\r\n      bbox.cy += trans.y\r\n\r\n      return bbox\r\n    }\r\n  }\r\n\r\n  // Add parent method\r\n, construct: {\r\n    // Create a group element\r\n    group: function() {\r\n      return this.put(new SVG.G)\r\n    }\r\n  }\r\n})\r\n\nSVG.Doc = SVG.invent({\r\n  // Initialize node\r\n  create: function(element) {\r\n    if (element) {\r\n      // ensure the presence of a dom element\r\n      element = typeof element == 'string' ?\r\n        document.getElementById(element) :\r\n        element\r\n\r\n      // If the target is an svg element, use that element as the main wrapper.\r\n      // This allows svg.js to work with svg documents as well.\r\n      if (element.nodeName == 'svg') {\r\n        this.constructor.call(this, element)\r\n      } else {\r\n        this.constructor.call(this, SVG.create('svg'))\r\n        element.appendChild(this.node)\r\n        this.size('100%', '100%')\r\n      }\r\n\r\n      // set svg element attributes and ensure defs node\r\n      this.namespace().defs()\r\n    }\r\n  }\r\n\r\n  // Inherit from\r\n, inherit: SVG.Container\r\n\r\n  // Add class methods\r\n, extend: {\r\n    // Add namespaces\r\n    namespace: function() {\r\n      return this\r\n        .attr({ xmlns: SVG.ns, version: '1.1' })\r\n        .attr('xmlns:xlink', SVG.xlink, SVG.xmlns)\r\n        .attr('xmlns:svgjs', SVG.svgjs, SVG.xmlns)\r\n    }\r\n    // Creates and returns defs element\r\n  , defs: function() {\r\n      if (!this._defs) {\r\n        var defs\r\n\r\n        // Find or create a defs element in this instance\r\n        if (defs = this.node.getElementsByTagName('defs')[0])\r\n          this._defs = SVG.adopt(defs)\r\n        else\r\n          this._defs = new SVG.Defs\r\n\r\n        // Make sure the defs node is at the end of the stack\r\n        this.node.appendChild(this._defs.node)\r\n      }\r\n\r\n      return this._defs\r\n    }\r\n    // custom parent method\r\n  , parent: function() {\r\n      if(!this.node.parentNode || this.node.parentNode.nodeName == '#document' || this.node.parentNode.nodeName == '#document-fragment') return null\r\n      return this.node.parentNode\r\n    }\r\n    // Fix for possible sub-pixel offset. See:\r\n    // https://bugzilla.mozilla.org/show_bug.cgi?id=608812\r\n  , spof: function() {\r\n      var pos = this.node.getScreenCTM()\r\n\r\n      if (pos)\r\n        this\r\n          .style('left', (-pos.e % 1) + 'px')\r\n          .style('top',  (-pos.f % 1) + 'px')\r\n\r\n      return this\r\n    }\r\n\r\n      // Removes the doc from the DOM\r\n  , remove: function() {\r\n      if(this.parent()) {\r\n        this.parent().removeChild(this.node)\r\n      }\r\n\r\n      return this\r\n    }\r\n  , clear: function() {\r\n      // remove children\r\n      while(this.node.hasChildNodes())\r\n        this.node.removeChild(this.node.lastChild)\r\n\r\n      // remove defs reference\r\n      delete this._defs\r\n\r\n      // add back parser\r\n      if(!SVG.parser.draw.parentNode)\r\n        this.node.appendChild(SVG.parser.draw)\r\n\r\n      return this\r\n    }\r\n  , clone: function (parent) {\r\n      // write dom data to the dom so the clone can pickup the data\r\n      this.writeDataToDom()\r\n\r\n      // get reference to node\r\n      var node = this.node\r\n\r\n      // clone element and assign new id\r\n      var clone = assignNewId(node.cloneNode(true))\r\n\r\n      // insert the clone in the given parent or after myself\r\n      if(parent) {\r\n        (parent.node || parent).appendChild(clone.node)\r\n      } else {\r\n        node.parentNode.insertBefore(clone.node, node.nextSibling)\r\n      }\r\n\r\n      return clone\r\n    }\r\n  }\r\n\r\n})\r\n\n// ### This module adds backward / forward functionality to elements.\r\n\r\n//\r\nSVG.extend(SVG.Element, {\r\n  // Get all siblings, including myself\r\n  siblings: function() {\r\n    return this.parent().children()\r\n  }\r\n  // Get the curent position siblings\r\n, position: function() {\r\n    return this.parent().index(this)\r\n  }\r\n  // Get the next element (will return null if there is none)\r\n, next: function() {\r\n    return this.siblings()[this.position() + 1]\r\n  }\r\n  // Get the next element (will return null if there is none)\r\n, previous: function() {\r\n    return this.siblings()[this.position() - 1]\r\n  }\r\n  // Send given element one step forward\r\n, forward: function() {\r\n    var i = this.position() + 1\r\n      , p = this.parent()\r\n\r\n    // move node one step forward\r\n    p.removeElement(this).add(this, i)\r\n\r\n    // make sure defs node is always at the top\r\n    if (p instanceof SVG.Doc)\r\n      p.node.appendChild(p.defs().node)\r\n\r\n    return this\r\n  }\r\n  // Send given element one step backward\r\n, backward: function() {\r\n    var i = this.position()\r\n\r\n    if (i > 0)\r\n      this.parent().removeElement(this).add(this, i - 1)\r\n\r\n    return this\r\n  }\r\n  // Send given element all the way to the front\r\n, front: function() {\r\n    var p = this.parent()\r\n\r\n    // Move node forward\r\n    p.node.appendChild(this.node)\r\n\r\n    // Make sure defs node is always at the top\r\n    if (p instanceof SVG.Doc)\r\n      p.node.appendChild(p.defs().node)\r\n\r\n    return this\r\n  }\r\n  // Send given element all the way to the back\r\n, back: function() {\r\n    if (this.position() > 0)\r\n      this.parent().removeElement(this).add(this, 0)\r\n\r\n    return this\r\n  }\r\n  // Inserts a given element before the targeted element\r\n, before: function(element) {\r\n    element.remove()\r\n\r\n    var i = this.position()\r\n\r\n    this.parent().add(element, i)\r\n\r\n    return this\r\n  }\r\n  // Insters a given element after the targeted element\r\n, after: function(element) {\r\n    element.remove()\r\n\r\n    var i = this.position()\r\n\r\n    this.parent().add(element, i + 1)\r\n\r\n    return this\r\n  }\r\n\r\n})\nSVG.Mask = SVG.invent({\r\n  // Initialize node\r\n  create: function() {\r\n    this.constructor.call(this, SVG.create('mask'))\r\n\r\n    // keep references to masked elements\r\n    this.targets = []\r\n  }\r\n\r\n  // Inherit from\r\n, inherit: SVG.Container\r\n\r\n  // Add class methods\r\n, extend: {\r\n    // Unmask all masked elements and remove itself\r\n    remove: function() {\r\n      // unmask all targets\r\n      for (var i = this.targets.length - 1; i >= 0; i--)\r\n        if (this.targets[i])\r\n          this.targets[i].unmask()\r\n      this.targets = []\r\n\r\n      // remove mask from parent\r\n      SVG.Element.prototype.remove.call(this)\r\n\r\n      return this\r\n    }\r\n  }\r\n\r\n  // Add parent method\r\n, construct: {\r\n    // Create masking element\r\n    mask: function() {\r\n      return this.defs().put(new SVG.Mask)\r\n    }\r\n  }\r\n})\r\n\r\n\r\nSVG.extend(SVG.Element, {\r\n  // Distribute mask to svg element\r\n  maskWith: function(element) {\r\n    // use given mask or create a new one\r\n    this.masker = element instanceof SVG.Mask ? element : this.parent().mask().add(element)\r\n\r\n    // store reverence on self in mask\r\n    this.masker.targets.push(this)\r\n\r\n    // apply mask\r\n    return this.attr('mask', 'url(\"#' + this.masker.attr('id') + '\")')\r\n  }\r\n  // Unmask element\r\n, unmask: function() {\r\n    delete this.masker\r\n    return this.attr('mask', null)\r\n  }\r\n\r\n})\r\n\nSVG.ClipPath = SVG.invent({\r\n  // Initialize node\r\n  create: function() {\r\n    this.constructor.call(this, SVG.create('clipPath'))\r\n\r\n    // keep references to clipped elements\r\n    this.targets = []\r\n  }\r\n\r\n  // Inherit from\r\n, inherit: SVG.Container\r\n\r\n  // Add class methods\r\n, extend: {\r\n    // Unclip all clipped elements and remove itself\r\n    remove: function() {\r\n      // unclip all targets\r\n      for (var i = this.targets.length - 1; i >= 0; i--)\r\n        if (this.targets[i])\r\n          this.targets[i].unclip()\r\n      this.targets = []\r\n\r\n      // remove clipPath from parent\r\n      this.parent().removeElement(this)\r\n\r\n      return this\r\n    }\r\n  }\r\n\r\n  // Add parent method\r\n, construct: {\r\n    // Create clipping element\r\n    clip: function() {\r\n      return this.defs().put(new SVG.ClipPath)\r\n    }\r\n  }\r\n})\r\n\r\n//\r\nSVG.extend(SVG.Element, {\r\n  // Distribute clipPath to svg element\r\n  clipWith: function(element) {\r\n    // use given clip or create a new one\r\n    this.clipper = element instanceof SVG.ClipPath ? element : this.parent().clip().add(element)\r\n\r\n    // store reverence on self in mask\r\n    this.clipper.targets.push(this)\r\n\r\n    // apply mask\r\n    return this.attr('clip-path', 'url(\"#' + this.clipper.attr('id') + '\")')\r\n  }\r\n  // Unclip element\r\n, unclip: function() {\r\n    delete this.clipper\r\n    return this.attr('clip-path', null)\r\n  }\r\n\r\n})\nSVG.Gradient = SVG.invent({\r\n  // Initialize node\r\n  create: function(type) {\r\n    this.constructor.call(this, SVG.create(type + 'Gradient'))\r\n\r\n    // store type\r\n    this.type = type\r\n  }\r\n\r\n  // Inherit from\r\n, inherit: SVG.Container\r\n\r\n  // Add class methods\r\n, extend: {\r\n    // Add a color stop\r\n    at: function(offset, color, opacity) {\r\n      return this.put(new SVG.Stop).update(offset, color, opacity)\r\n    }\r\n    // Update gradient\r\n  , update: function(block) {\r\n      // remove all stops\r\n      this.clear()\r\n\r\n      // invoke passed block\r\n      if (typeof block == 'function')\r\n        block.call(this, this)\r\n\r\n      return this\r\n    }\r\n    // Return the fill id\r\n  , fill: function() {\r\n      return 'url(#' + this.id() + ')'\r\n    }\r\n    // Alias string convertion to fill\r\n  , toString: function() {\r\n      return this.fill()\r\n    }\r\n    // custom attr to handle transform\r\n  , attr: function(a, b, c) {\r\n      if(a == 'transform') a = 'gradientTransform'\r\n      return SVG.Container.prototype.attr.call(this, a, b, c)\r\n    }\r\n  }\r\n\r\n  // Add parent method\r\n, construct: {\r\n    // Create gradient element in defs\r\n    gradient: function(type, block) {\r\n      return this.defs().gradient(type, block)\r\n    }\r\n  }\r\n})\r\n\r\n// Add animatable methods to both gradient and fx module\r\nSVG.extend(SVG.Gradient, SVG.FX, {\r\n  // From position\r\n  from: function(x, y) {\r\n    return (this._target || this).type == 'radial' ?\r\n      this.attr({ fx: new SVG.Number(x), fy: new SVG.Number(y) }) :\r\n      this.attr({ x1: new SVG.Number(x), y1: new SVG.Number(y) })\r\n  }\r\n  // To position\r\n, to: function(x, y) {\r\n    return (this._target || this).type == 'radial' ?\r\n      this.attr({ cx: new SVG.Number(x), cy: new SVG.Number(y) }) :\r\n      this.attr({ x2: new SVG.Number(x), y2: new SVG.Number(y) })\r\n  }\r\n})\r\n\r\n// Base gradient generation\r\nSVG.extend(SVG.Defs, {\r\n  // define gradient\r\n  gradient: function(type, block) {\r\n    return this.put(new SVG.Gradient(type)).update(block)\r\n  }\r\n\r\n})\r\n\r\nSVG.Stop = SVG.invent({\r\n  // Initialize node\r\n  create: 'stop'\r\n\r\n  // Inherit from\r\n, inherit: SVG.Element\r\n\r\n  // Add class methods\r\n, extend: {\r\n    // add color stops\r\n    update: function(o) {\r\n      if (typeof o == 'number' || o instanceof SVG.Number) {\r\n        o = {\r\n          offset:  arguments[0]\r\n        , color:   arguments[1]\r\n        , opacity: arguments[2]\r\n        }\r\n      }\r\n\r\n      // set attributes\r\n      if (o.opacity != null) this.attr('stop-opacity', o.opacity)\r\n      if (o.color   != null) this.attr('stop-color', o.color)\r\n      if (o.offset  != null) this.attr('offset', new SVG.Number(o.offset))\r\n\r\n      return this\r\n    }\r\n  }\r\n\r\n})\r\n\nSVG.Pattern = SVG.invent({\r\n  // Initialize node\r\n  create: 'pattern'\r\n\r\n  // Inherit from\r\n, inherit: SVG.Container\r\n\r\n  // Add class methods\r\n, extend: {\r\n    // Return the fill id\r\n    fill: function() {\r\n      return 'url(#' + this.id() + ')'\r\n    }\r\n    // Update pattern by rebuilding\r\n  , update: function(block) {\r\n      // remove content\r\n      this.clear()\r\n\r\n      // invoke passed block\r\n      if (typeof block == 'function')\r\n        block.call(this, this)\r\n\r\n      return this\r\n    }\r\n    // Alias string convertion to fill\r\n  , toString: function() {\r\n      return this.fill()\r\n    }\r\n    // custom attr to handle transform\r\n  , attr: function(a, b, c) {\r\n      if(a == 'transform') a = 'patternTransform'\r\n      return SVG.Container.prototype.attr.call(this, a, b, c)\r\n    }\r\n\r\n  }\r\n\r\n  // Add parent method\r\n, construct: {\r\n    // Create pattern element in defs\r\n    pattern: function(width, height, block) {\r\n      return this.defs().pattern(width, height, block)\r\n    }\r\n  }\r\n})\r\n\r\nSVG.extend(SVG.Defs, {\r\n  // Define gradient\r\n  pattern: function(width, height, block) {\r\n    return this.put(new SVG.Pattern).update(block).attr({\r\n      x:            0\r\n    , y:            0\r\n    , width:        width\r\n    , height:       height\r\n    , patternUnits: 'userSpaceOnUse'\r\n    })\r\n  }\r\n\r\n})\nSVG.Shape = SVG.invent({\r\n  // Initialize node\r\n  create: function(element) {\r\n    this.constructor.call(this, element)\r\n  }\r\n\r\n  // Inherit from\r\n, inherit: SVG.Element\r\n\r\n})\n\r\nSVG.Bare = SVG.invent({\r\n  // Initialize\r\n  create: function(element, inherit) {\r\n    // construct element\r\n    this.constructor.call(this, SVG.create(element))\r\n\r\n    // inherit custom methods\r\n    if (inherit)\r\n      for (var method in inherit.prototype)\r\n        if (typeof inherit.prototype[method] === 'function')\r\n          this[method] = inherit.prototype[method]\r\n  }\r\n\r\n  // Inherit from\r\n, inherit: SVG.Element\r\n\r\n  // Add methods\r\n, extend: {\r\n    // Insert some plain text\r\n    words: function(text) {\r\n      // remove contents\r\n      while (this.node.hasChildNodes())\r\n        this.node.removeChild(this.node.lastChild)\r\n\r\n      // create text node\r\n      this.node.appendChild(document.createTextNode(text))\r\n\r\n      return this\r\n    }\r\n  }\r\n})\r\n\r\n\r\nSVG.extend(SVG.Parent, {\r\n  // Create an element that is not described by SVG.js\r\n  element: function(element, inherit) {\r\n    return this.put(new SVG.Bare(element, inherit))\r\n  }\r\n})\r\n\nSVG.Symbol = SVG.invent({\r\n  // Initialize node\r\n  create: 'symbol'\r\n\r\n  // Inherit from\r\n, inherit: SVG.Container\r\n\r\n, construct: {\r\n    // create symbol\r\n    symbol: function() {\r\n      return this.put(new SVG.Symbol)\r\n    }\r\n  }\r\n})\r\n\nSVG.Use = SVG.invent({\r\n  // Initialize node\r\n  create: 'use'\r\n\r\n  // Inherit from\r\n, inherit: SVG.Shape\r\n\r\n  // Add class methods\r\n, extend: {\r\n    // Use element as a reference\r\n    element: function(element, file) {\r\n      // Set lined element\r\n      return this.attr('href', (file || '') + '#' + element, SVG.xlink)\r\n    }\r\n  }\r\n\r\n  // Add parent method\r\n, construct: {\r\n    // Create a use element\r\n    use: function(element, file) {\r\n      return this.put(new SVG.Use).element(element, file)\r\n    }\r\n  }\r\n})\nSVG.Rect = SVG.invent({\r\n  // Initialize node\r\n  create: 'rect'\r\n\r\n  // Inherit from\r\n, inherit: SVG.Shape\r\n\r\n  // Add parent method\r\n, construct: {\r\n    // Create a rect element\r\n    rect: function(width, height) {\r\n      return this.put(new SVG.Rect()).size(width, height)\r\n    }\r\n  }\r\n})\nSVG.Circle = SVG.invent({\r\n  // Initialize node\r\n  create: 'circle'\r\n\r\n  // Inherit from\r\n, inherit: SVG.Shape\r\n\r\n  // Add parent method\r\n, construct: {\r\n    // Create circle element, based on ellipse\r\n    circle: function(size) {\r\n      return this.put(new SVG.Circle).rx(new SVG.Number(size).divide(2)).move(0, 0)\r\n    }\r\n  }\r\n})\r\n\r\nSVG.extend(SVG.Circle, SVG.FX, {\r\n  // Radius x value\r\n  rx: function(rx) {\r\n    return this.attr('r', rx)\r\n  }\r\n  // Alias radius x value\r\n, ry: function(ry) {\r\n    return this.rx(ry)\r\n  }\r\n})\r\n\r\nSVG.Ellipse = SVG.invent({\r\n  // Initialize node\r\n  create: 'ellipse'\r\n\r\n  // Inherit from\r\n, inherit: SVG.Shape\r\n\r\n  // Add parent method\r\n, construct: {\r\n    // Create an ellipse\r\n    ellipse: function(width, height) {\r\n      return this.put(new SVG.Ellipse).size(width, height).move(0, 0)\r\n    }\r\n  }\r\n})\r\n\r\nSVG.extend(SVG.Ellipse, SVG.Rect, SVG.FX, {\r\n  // Radius x value\r\n  rx: function(rx) {\r\n    return this.attr('rx', rx)\r\n  }\r\n  // Radius y value\r\n, ry: function(ry) {\r\n    return this.attr('ry', ry)\r\n  }\r\n})\r\n\r\n// Add common method\r\nSVG.extend(SVG.Circle, SVG.Ellipse, {\r\n    // Move over x-axis\r\n    x: function(x) {\r\n      return x == null ? this.cx() - this.rx() : this.cx(x + this.rx())\r\n    }\r\n    // Move over y-axis\r\n  , y: function(y) {\r\n      return y == null ? this.cy() - this.ry() : this.cy(y + this.ry())\r\n    }\r\n    // Move by center over x-axis\r\n  , cx: function(x) {\r\n      return x == null ? this.attr('cx') : this.attr('cx', x)\r\n    }\r\n    // Move by center over y-axis\r\n  , cy: function(y) {\r\n      return y == null ? this.attr('cy') : this.attr('cy', y)\r\n    }\r\n    // Set width of element\r\n  , width: function(width) {\r\n      return width == null ? this.rx() * 2 : this.rx(new SVG.Number(width).divide(2))\r\n    }\r\n    // Set height of element\r\n  , height: function(height) {\r\n      return height == null ? this.ry() * 2 : this.ry(new SVG.Number(height).divide(2))\r\n    }\r\n    // Custom size function\r\n  , size: function(width, height) {\r\n      var p = proportionalSize(this, width, height)\r\n\r\n      return this\r\n        .rx(new SVG.Number(p.width).divide(2))\r\n        .ry(new SVG.Number(p.height).divide(2))\r\n    }\r\n})\nSVG.Line = SVG.invent({\r\n  // Initialize node\r\n  create: 'line'\r\n\r\n  // Inherit from\r\n, inherit: SVG.Shape\r\n\r\n  // Add class methods\r\n, extend: {\r\n    // Get array\r\n    array: function() {\r\n      return new SVG.PointArray([\r\n        [ this.attr('x1'), this.attr('y1') ]\r\n      , [ this.attr('x2'), this.attr('y2') ]\r\n      ])\r\n    }\r\n    // Overwrite native plot() method\r\n  , plot: function(x1, y1, x2, y2) {\r\n      if (x1 == null)\r\n        return this.array()\r\n      else if (typeof y1 !== 'undefined')\r\n        x1 = { x1: x1, y1: y1, x2: x2, y2: y2 }\r\n      else\r\n        x1 = new SVG.PointArray(x1).toLine()\r\n\r\n      return this.attr(x1)\r\n    }\r\n    // Move by left top corner\r\n  , move: function(x, y) {\r\n      return this.attr(this.array().move(x, y).toLine())\r\n    }\r\n    // Set element size to given width and height\r\n  , size: function(width, height) {\r\n      var p = proportionalSize(this, width, height)\r\n\r\n      return this.attr(this.array().size(p.width, p.height).toLine())\r\n    }\r\n  }\r\n\r\n  // Add parent method\r\n, construct: {\r\n    // Create a line element\r\n    line: function(x1, y1, x2, y2) {\r\n      // make sure plot is called as a setter\r\n      // x1 is not necessarily a number, it can also be an array, a string and a SVG.PointArray\r\n      return SVG.Line.prototype.plot.apply(\r\n        this.put(new SVG.Line)\r\n      , x1 != null ? [x1, y1, x2, y2] : [0, 0, 0, 0]\r\n      )\r\n    }\r\n  }\r\n})\r\n\nSVG.Polyline = SVG.invent({\r\n  // Initialize node\r\n  create: 'polyline'\r\n\r\n  // Inherit from\r\n, inherit: SVG.Shape\r\n\r\n  // Add parent method\r\n, construct: {\r\n    // Create a wrapped polyline element\r\n    polyline: function(p) {\r\n      // make sure plot is called as a setter\r\n      return this.put(new SVG.Polyline).plot(p || new SVG.PointArray)\r\n    }\r\n  }\r\n})\r\n\r\nSVG.Polygon = SVG.invent({\r\n  // Initialize node\r\n  create: 'polygon'\r\n\r\n  // Inherit from\r\n, inherit: SVG.Shape\r\n\r\n  // Add parent method\r\n, construct: {\r\n    // Create a wrapped polygon element\r\n    polygon: function(p) {\r\n      // make sure plot is called as a setter\r\n      return this.put(new SVG.Polygon).plot(p || new SVG.PointArray)\r\n    }\r\n  }\r\n})\r\n\r\n// Add polygon-specific functions\r\nSVG.extend(SVG.Polyline, SVG.Polygon, {\r\n  // Get array\r\n  array: function() {\r\n    return this._array || (this._array = new SVG.PointArray(this.attr('points')))\r\n  }\r\n  // Plot new path\r\n, plot: function(p) {\r\n    return (p == null) ?\r\n      this.array() :\r\n      this.clear().attr('points', typeof p == 'string' ? p : (this._array = new SVG.PointArray(p)))\r\n  }\r\n  // Clear array cache\r\n, clear: function() {\r\n    delete this._array\r\n    return this\r\n  }\r\n  // Move by left top corner\r\n, move: function(x, y) {\r\n    return this.attr('points', this.array().move(x, y))\r\n  }\r\n  // Set element size to given width and height\r\n, size: function(width, height) {\r\n    var p = proportionalSize(this, width, height)\r\n\r\n    return this.attr('points', this.array().size(p.width, p.height))\r\n  }\r\n\r\n})\r\n\n// unify all point to point elements\r\nSVG.extend(SVG.Line, SVG.Polyline, SVG.Polygon, {\r\n  // Define morphable array\r\n  morphArray:  SVG.PointArray\r\n  // Move by left top corner over x-axis\r\n, x: function(x) {\r\n    return x == null ? this.bbox().x : this.move(x, this.bbox().y)\r\n  }\r\n  // Move by left top corner over y-axis\r\n, y: function(y) {\r\n    return y == null ? this.bbox().y : this.move(this.bbox().x, y)\r\n  }\r\n  // Set width of element\r\n, width: function(width) {\r\n    var b = this.bbox()\r\n\r\n    return width == null ? b.width : this.size(width, b.height)\r\n  }\r\n  // Set height of element\r\n, height: function(height) {\r\n    var b = this.bbox()\r\n\r\n    return height == null ? b.height : this.size(b.width, height)\r\n  }\r\n})\nSVG.Path = SVG.invent({\r\n  // Initialize node\r\n  create: 'path'\r\n\r\n  // Inherit from\r\n, inherit: SVG.Shape\r\n\r\n  // Add class methods\r\n, extend: {\r\n    // Define morphable array\r\n    morphArray:  SVG.PathArray\r\n    // Get array\r\n  , array: function() {\r\n      return this._array || (this._array = new SVG.PathArray(this.attr('d')))\r\n    }\r\n    // Plot new path\r\n  , plot: function(d) {\r\n      return (d == null) ?\r\n        this.array() :\r\n        this.clear().attr('d', typeof d == 'string' ? d : (this._array = new SVG.PathArray(d)))\r\n    }\r\n    // Clear array cache\r\n  , clear: function() {\r\n      delete this._array\r\n      return this\r\n    }\r\n    // Move by left top corner\r\n  , move: function(x, y) {\r\n      return this.attr('d', this.array().move(x, y))\r\n    }\r\n    // Move by left top corner over x-axis\r\n  , x: function(x) {\r\n      return x == null ? this.bbox().x : this.move(x, this.bbox().y)\r\n    }\r\n    // Move by left top corner over y-axis\r\n  , y: function(y) {\r\n      return y == null ? this.bbox().y : this.move(this.bbox().x, y)\r\n    }\r\n    // Set element size to given width and height\r\n  , size: function(width, height) {\r\n      var p = proportionalSize(this, width, height)\r\n\r\n      return this.attr('d', this.array().size(p.width, p.height))\r\n    }\r\n    // Set width of element\r\n  , width: function(width) {\r\n      return width == null ? this.bbox().width : this.size(width, this.bbox().height)\r\n    }\r\n    // Set height of element\r\n  , height: function(height) {\r\n      return height == null ? this.bbox().height : this.size(this.bbox().width, height)\r\n    }\r\n\r\n  }\r\n\r\n  // Add parent method\r\n, construct: {\r\n    // Create a wrapped path element\r\n    path: function(d) {\r\n      // make sure plot is called as a setter\r\n      return this.put(new SVG.Path).plot(d || new SVG.PathArray)\r\n    }\r\n  }\r\n})\r\n\nSVG.Image = SVG.invent({\r\n  // Initialize node\r\n  create: 'image'\r\n\r\n  // Inherit from\r\n, inherit: SVG.Shape\r\n\r\n  // Add class methods\r\n, extend: {\r\n    // (re)load image\r\n    load: function(url) {\r\n      if (!url) return this\r\n\r\n      var self = this\r\n        , img  = new window.Image()\r\n\r\n      // preload image\r\n      SVG.on(img, 'load', function() {\r\n        SVG.off(img)\r\n\r\n        var p = self.parent(SVG.Pattern)\r\n\r\n        if(p === null) return\r\n\r\n        // ensure image size\r\n        if (self.width() == 0 && self.height() == 0)\r\n          self.size(img.width, img.height)\r\n\r\n        // ensure pattern size if not set\r\n        if (p && p.width() == 0 && p.height() == 0)\r\n          p.size(self.width(), self.height())\r\n\r\n        // callback\r\n        if (typeof self._loaded === 'function')\r\n          self._loaded.call(self, {\r\n            width:  img.width\r\n          , height: img.height\r\n          , ratio:  img.width / img.height\r\n          , url:    url\r\n          })\r\n      })\r\n\r\n      SVG.on(img, 'error', function(e){\r\n        SVG.off(img)\r\n\r\n        if (typeof self._error === 'function'){\r\n            self._error.call(self, e)\r\n        }\r\n      })\r\n\r\n      return this.attr('href', (img.src = this.src = url), SVG.xlink)\r\n    }\r\n    // Add loaded callback\r\n  , loaded: function(loaded) {\r\n      this._loaded = loaded\r\n      return this\r\n    }\r\n\r\n  , error: function(error) {\r\n      this._error = error\r\n      return this\r\n    }\r\n  }\r\n\r\n  // Add parent method\r\n, construct: {\r\n    // create image element, load image and set its size\r\n    image: function(source, width, height) {\r\n      return this.put(new SVG.Image).load(source).size(width || 0, height || width || 0)\r\n    }\r\n  }\r\n\r\n})\nSVG.Text = SVG.invent({\r\n  // Initialize node\r\n  create: function() {\r\n    this.constructor.call(this, SVG.create('text'))\r\n\r\n    this.dom.leading = new SVG.Number(1.3)    // store leading value for rebuilding\r\n    this._rebuild = true                      // enable automatic updating of dy values\r\n    this._build   = false                     // disable build mode for adding multiple lines\r\n\r\n    // set default font\r\n    this.attr('font-family', SVG.defaults.attrs['font-family'])\r\n  }\r\n\r\n  // Inherit from\r\n, inherit: SVG.Shape\r\n\r\n  // Add class methods\r\n, extend: {\r\n    // Move over x-axis\r\n    x: function(x) {\r\n      // act as getter\r\n      if (x == null)\r\n        return this.attr('x')\r\n\r\n      return this.attr('x', x)\r\n    }\r\n    // Move over y-axis\r\n  , y: function(y) {\r\n      var oy = this.attr('y')\r\n        , o  = typeof oy === 'number' ? oy - this.bbox().y : 0\r\n\r\n      // act as getter\r\n      if (y == null)\r\n        return typeof oy === 'number' ? oy - o : oy\r\n\r\n      return this.attr('y', typeof y.valueOf() === 'number' ? y + o : y)\r\n    }\r\n    // Move center over x-axis\r\n  , cx: function(x) {\r\n      return x == null ? this.bbox().cx : this.x(x - this.bbox().width / 2)\r\n    }\r\n    // Move center over y-axis\r\n  , cy: function(y) {\r\n      return y == null ? this.bbox().cy : this.y(y - this.bbox().height / 2)\r\n    }\r\n    // Set the text content\r\n  , text: function(text) {\r\n      // act as getter\r\n      if (typeof text === 'undefined'){\r\n        var text = ''\r\n        var children = this.node.childNodes\r\n        for(var i = 0, len = children.length; i < len; ++i){\r\n\r\n          // add newline if its not the first child and newLined is set to true\r\n          if(i != 0 && children[i].nodeType != 3 && SVG.adopt(children[i]).dom.newLined == true){\r\n            text += '\\n'\r\n          }\r\n\r\n          // add content of this node\r\n          text += children[i].textContent\r\n        }\r\n\r\n        return text\r\n      }\r\n\r\n      // remove existing content\r\n      this.clear().build(true)\r\n\r\n      if (typeof text === 'function') {\r\n        // call block\r\n        text.call(this, this)\r\n\r\n      } else {\r\n        // store text and make sure text is not blank\r\n        text = text.split('\\n')\r\n\r\n        // build new lines\r\n        for (var i = 0, il = text.length; i < il; i++)\r\n          this.tspan(text[i]).newLine()\r\n      }\r\n\r\n      // disable build mode and rebuild lines\r\n      return this.build(false).rebuild()\r\n    }\r\n    // Set font size\r\n  , size: function(size) {\r\n      return this.attr('font-size', size).rebuild()\r\n    }\r\n    // Set / get leading\r\n  , leading: function(value) {\r\n      // act as getter\r\n      if (value == null)\r\n        return this.dom.leading\r\n\r\n      // act as setter\r\n      this.dom.leading = new SVG.Number(value)\r\n\r\n      return this.rebuild()\r\n    }\r\n    // Get all the first level lines\r\n  , lines: function() {\r\n      var node = (this.textPath && this.textPath() || this).node\r\n\r\n      // filter tspans and map them to SVG.js instances\r\n      var lines = SVG.utils.map(SVG.utils.filterSVGElements(node.childNodes), function(el){\r\n        return SVG.adopt(el)\r\n      })\r\n\r\n      // return an instance of SVG.set\r\n      return new SVG.Set(lines)\r\n    }\r\n    // Rebuild appearance type\r\n  , rebuild: function(rebuild) {\r\n      // store new rebuild flag if given\r\n      if (typeof rebuild == 'boolean')\r\n        this._rebuild = rebuild\r\n\r\n      // define position of all lines\r\n      if (this._rebuild) {\r\n        var self = this\r\n          , blankLineOffset = 0\r\n          , dy = this.dom.leading * new SVG.Number(this.attr('font-size'))\r\n\r\n        this.lines().each(function() {\r\n          if (this.dom.newLined) {\r\n            if (!self.textPath())\r\n              this.attr('x', self.attr('x'))\r\n            if(this.text() == '\\n') {\r\n              blankLineOffset += dy\r\n            }else{\r\n              this.attr('dy', dy + blankLineOffset)\r\n              blankLineOffset = 0\r\n            }\r\n          }\r\n        })\r\n\r\n        this.fire('rebuild')\r\n      }\r\n\r\n      return this\r\n    }\r\n    // Enable / disable build mode\r\n  , build: function(build) {\r\n      this._build = !!build\r\n      return this\r\n    }\r\n    // overwrite method from parent to set data properly\r\n  , setData: function(o){\r\n      this.dom = o\r\n      this.dom.leading = new SVG.Number(o.leading || 1.3)\r\n      return this\r\n    }\r\n  }\r\n\r\n  // Add parent method\r\n, construct: {\r\n    // Create text element\r\n    text: function(text) {\r\n      return this.put(new SVG.Text).text(text)\r\n    }\r\n    // Create plain text element\r\n  , plain: function(text) {\r\n      return this.put(new SVG.Text).plain(text)\r\n    }\r\n  }\r\n\r\n})\r\n\r\nSVG.Tspan = SVG.invent({\r\n  // Initialize node\r\n  create: 'tspan'\r\n\r\n  // Inherit from\r\n, inherit: SVG.Shape\r\n\r\n  // Add class methods\r\n, extend: {\r\n    // Set text content\r\n    text: function(text) {\r\n      if(text == null) return this.node.textContent + (this.dom.newLined ? '\\n' : '')\r\n\r\n      typeof text === 'function' ? text.call(this, this) : this.plain(text)\r\n\r\n      return this\r\n    }\r\n    // Shortcut dx\r\n  , dx: function(dx) {\r\n      return this.attr('dx', dx)\r\n    }\r\n    // Shortcut dy\r\n  , dy: function(dy) {\r\n      return this.attr('dy', dy)\r\n    }\r\n    // Create new line\r\n  , newLine: function() {\r\n      // fetch text parent\r\n      var t = this.parent(SVG.Text)\r\n\r\n      // mark new line\r\n      this.dom.newLined = true\r\n\r\n      // apply new hy¡n\r\n      return this.dy(t.dom.leading * t.attr('font-size')).attr('x', t.x())\r\n    }\r\n  }\r\n\r\n})\r\n\r\nSVG.extend(SVG.Text, SVG.Tspan, {\r\n  // Create plain text node\r\n  plain: function(text) {\r\n    // clear if build mode is disabled\r\n    if (this._build === false)\r\n      this.clear()\r\n\r\n    // create text node\r\n    this.node.appendChild(document.createTextNode(text))\r\n\r\n    return this\r\n  }\r\n  // Create a tspan\r\n, tspan: function(text) {\r\n    var node  = (this.textPath && this.textPath() || this).node\r\n      , tspan = new SVG.Tspan\r\n\r\n    // clear if build mode is disabled\r\n    if (this._build === false)\r\n      this.clear()\r\n\r\n    // add new tspan\r\n    node.appendChild(tspan.node)\r\n\r\n    return tspan.text(text)\r\n  }\r\n  // Clear all lines\r\n, clear: function() {\r\n    var node = (this.textPath && this.textPath() || this).node\r\n\r\n    // remove existing child nodes\r\n    while (node.hasChildNodes())\r\n      node.removeChild(node.lastChild)\r\n\r\n    return this\r\n  }\r\n  // Get length of text element\r\n, length: function() {\r\n    return this.node.getComputedTextLength()\r\n  }\r\n})\r\n\nSVG.TextPath = SVG.invent({\r\n  // Initialize node\r\n  create: 'textPath'\r\n\r\n  // Inherit from\r\n, inherit: SVG.Parent\r\n\r\n  // Define parent class\r\n, parent: SVG.Text\r\n\r\n  // Add parent method\r\n, construct: {\r\n    morphArray: SVG.PathArray\r\n    // Create path for text to run on\r\n  , path: function(d) {\r\n      // create textPath element\r\n      var path  = new SVG.TextPath\r\n        , track = this.doc().defs().path(d)\r\n\r\n      // move lines to textpath\r\n      while (this.node.hasChildNodes())\r\n        path.node.appendChild(this.node.firstChild)\r\n\r\n      // add textPath element as child node\r\n      this.node.appendChild(path.node)\r\n\r\n      // link textPath to path and add content\r\n      path.attr('href', '#' + track, SVG.xlink)\r\n\r\n      return this\r\n    }\r\n    // return the array of the path track element\r\n  , array: function() {\r\n      var track = this.track()\r\n\r\n      return track ? track.array() : null\r\n    }\r\n    // Plot path if any\r\n  , plot: function(d) {\r\n      var track = this.track()\r\n        , pathArray = null\r\n\r\n      if (track) {\r\n        pathArray = track.plot(d)\r\n      }\r\n\r\n      return (d == null) ? pathArray : this\r\n    }\r\n    // Get the path track element\r\n  , track: function() {\r\n      var path = this.textPath()\r\n\r\n      if (path)\r\n        return path.reference('href')\r\n    }\r\n    // Get the textPath child\r\n  , textPath: function() {\r\n      if (this.node.firstChild && this.node.firstChild.nodeName == 'textPath')\r\n        return SVG.adopt(this.node.firstChild)\r\n    }\r\n  }\r\n})\r\n\nSVG.Nested = SVG.invent({\r\n  // Initialize node\r\n  create: function() {\r\n    this.constructor.call(this, SVG.create('svg'))\r\n\r\n    this.style('overflow', 'visible')\r\n  }\r\n\r\n  // Inherit from\r\n, inherit: SVG.Container\r\n\r\n  // Add parent method\r\n, construct: {\r\n    // Create nested svg document\r\n    nested: function() {\r\n      return this.put(new SVG.Nested)\r\n    }\r\n  }\r\n})\nSVG.A = SVG.invent({\r\n  // Initialize node\r\n  create: 'a'\r\n\r\n  // Inherit from\r\n, inherit: SVG.Container\r\n\r\n  // Add class methods\r\n, extend: {\r\n    // Link url\r\n    to: function(url) {\r\n      return this.attr('href', url, SVG.xlink)\r\n    }\r\n    // Link show attribute\r\n  , show: function(target) {\r\n      return this.attr('show', target, SVG.xlink)\r\n    }\r\n    // Link target attribute\r\n  , target: function(target) {\r\n      return this.attr('target', target)\r\n    }\r\n  }\r\n\r\n  // Add parent method\r\n, construct: {\r\n    // Create a hyperlink element\r\n    link: function(url) {\r\n      return this.put(new SVG.A).to(url)\r\n    }\r\n  }\r\n})\r\n\r\nSVG.extend(SVG.Element, {\r\n  // Create a hyperlink element\r\n  linkTo: function(url) {\r\n    var link = new SVG.A\r\n\r\n    if (typeof url == 'function')\r\n      url.call(link, link)\r\n    else\r\n      link.to(url)\r\n\r\n    return this.parent().put(link).put(this)\r\n  }\r\n\r\n})\nSVG.Marker = SVG.invent({\r\n  // Initialize node\r\n  create: 'marker'\r\n\r\n  // Inherit from\r\n, inherit: SVG.Container\r\n\r\n  // Add class methods\r\n, extend: {\r\n    // Set width of element\r\n    width: function(width) {\r\n      return this.attr('markerWidth', width)\r\n    }\r\n    // Set height of element\r\n  , height: function(height) {\r\n      return this.attr('markerHeight', height)\r\n    }\r\n    // Set marker refX and refY\r\n  , ref: function(x, y) {\r\n      return this.attr('refX', x).attr('refY', y)\r\n    }\r\n    // Update marker\r\n  , update: function(block) {\r\n      // remove all content\r\n      this.clear()\r\n\r\n      // invoke passed block\r\n      if (typeof block == 'function')\r\n        block.call(this, this)\r\n\r\n      return this\r\n    }\r\n    // Return the fill id\r\n  , toString: function() {\r\n      return 'url(#' + this.id() + ')'\r\n    }\r\n  }\r\n\r\n  // Add parent method\r\n, construct: {\r\n    marker: function(width, height, block) {\r\n      // Create marker element in defs\r\n      return this.defs().marker(width, height, block)\r\n    }\r\n  }\r\n\r\n})\r\n\r\nSVG.extend(SVG.Defs, {\r\n  // Create marker\r\n  marker: function(width, height, block) {\r\n    // Set default viewbox to match the width and height, set ref to cx and cy and set orient to auto\r\n    return this.put(new SVG.Marker)\r\n      .size(width, height)\r\n      .ref(width / 2, height / 2)\r\n      .viewbox(0, 0, width, height)\r\n      .attr('orient', 'auto')\r\n      .update(block)\r\n  }\r\n\r\n})\r\n\r\nSVG.extend(SVG.Line, SVG.Polyline, SVG.Polygon, SVG.Path, {\r\n  // Create and attach markers\r\n  marker: function(marker, width, height, block) {\r\n    var attr = ['marker']\r\n\r\n    // Build attribute name\r\n    if (marker != 'all') attr.push(marker)\r\n    attr = attr.join('-')\r\n\r\n    // Set marker attribute\r\n    marker = arguments[1] instanceof SVG.Marker ?\r\n      arguments[1] :\r\n      this.doc().marker(width, height, block)\r\n\r\n    return this.attr(attr, marker)\r\n  }\r\n\r\n})\n// Define list of available attributes for stroke and fill\r\nvar sugar = {\r\n  stroke: ['color', 'width', 'opacity', 'linecap', 'linejoin', 'miterlimit', 'dasharray', 'dashoffset']\r\n, fill:   ['color', 'opacity', 'rule']\r\n, prefix: function(t, a) {\r\n    return a == 'color' ? t : t + '-' + a\r\n  }\r\n}\r\n\r\n// Add sugar for fill and stroke\r\n;['fill', 'stroke'].forEach(function(m) {\r\n  var i, extension = {}\r\n\r\n  extension[m] = function(o) {\r\n    if (typeof o == 'undefined')\r\n      return this\r\n    if (typeof o == 'string' || SVG.Color.isRgb(o) || (o && typeof o.fill === 'function'))\r\n      this.attr(m, o)\r\n\r\n    else\r\n      // set all attributes from sugar.fill and sugar.stroke list\r\n      for (i = sugar[m].length - 1; i >= 0; i--)\r\n        if (o[sugar[m][i]] != null)\r\n          this.attr(sugar.prefix(m, sugar[m][i]), o[sugar[m][i]])\r\n\r\n    return this\r\n  }\r\n\r\n  SVG.extend(SVG.Element, SVG.FX, extension)\r\n\r\n})\r\n\r\nSVG.extend(SVG.Element, SVG.FX, {\r\n  // Map rotation to transform\r\n  rotate: function(d, cx, cy) {\r\n    return this.transform({ rotation: d, cx: cx, cy: cy })\r\n  }\r\n  // Map skew to transform\r\n, skew: function(x, y, cx, cy) {\r\n    return arguments.length == 1  || arguments.length == 3 ?\r\n      this.transform({ skew: x, cx: y, cy: cx }) :\r\n      this.transform({ skewX: x, skewY: y, cx: cx, cy: cy })\r\n  }\r\n  // Map scale to transform\r\n, scale: function(x, y, cx, cy) {\r\n    return arguments.length == 1  || arguments.length == 3 ?\r\n      this.transform({ scale: x, cx: y, cy: cx }) :\r\n      this.transform({ scaleX: x, scaleY: y, cx: cx, cy: cy })\r\n  }\r\n  // Map translate to transform\r\n, translate: function(x, y) {\r\n    return this.transform({ x: x, y: y })\r\n  }\r\n  // Map flip to transform\r\n, flip: function(a, o) {\r\n    o = typeof a == 'number' ? a : o\r\n    return this.transform({ flip: a || 'both', offset: o })\r\n  }\r\n  // Map matrix to transform\r\n, matrix: function(m) {\r\n    return this.attr('transform', new SVG.Matrix(arguments.length == 6 ? [].slice.call(arguments) : m))\r\n  }\r\n  // Opacity\r\n, opacity: function(value) {\r\n    return this.attr('opacity', value)\r\n  }\r\n  // Relative move over x axis\r\n, dx: function(x) {\r\n    return this.x(new SVG.Number(x).plus(this instanceof SVG.FX ? 0 : this.x()), true)\r\n  }\r\n  // Relative move over y axis\r\n, dy: function(y) {\r\n    return this.y(new SVG.Number(y).plus(this instanceof SVG.FX ? 0 : this.y()), true)\r\n  }\r\n  // Relative move over x and y axes\r\n, dmove: function(x, y) {\r\n    return this.dx(x).dy(y)\r\n  }\r\n})\r\n\r\nSVG.extend(SVG.Rect, SVG.Ellipse, SVG.Circle, SVG.Gradient, SVG.FX, {\r\n  // Add x and y radius\r\n  radius: function(x, y) {\r\n    var type = (this._target || this).type;\r\n    return type == 'radial' || type == 'circle' ?\r\n      this.attr('r', new SVG.Number(x)) :\r\n      this.rx(x).ry(y == null ? x : y)\r\n  }\r\n})\r\n\r\nSVG.extend(SVG.Path, {\r\n  // Get path length\r\n  length: function() {\r\n    return this.node.getTotalLength()\r\n  }\r\n  // Get point at length\r\n, pointAt: function(length) {\r\n    return this.node.getPointAtLength(length)\r\n  }\r\n})\r\n\r\nSVG.extend(SVG.Parent, SVG.Text, SVG.Tspan, SVG.FX, {\r\n  // Set font\r\n  font: function(a, v) {\r\n    if (typeof a == 'object') {\r\n      for (v in a) this.font(v, a[v])\r\n    }\r\n\r\n    return a == 'leading' ?\r\n        this.leading(v) :\r\n      a == 'anchor' ?\r\n        this.attr('text-anchor', v) :\r\n      a == 'size' || a == 'family' || a == 'weight' || a == 'stretch' || a == 'variant' || a == 'style' ?\r\n        this.attr('font-'+ a, v) :\r\n        this.attr(a, v)\r\n  }\r\n})\r\n\nSVG.Set = SVG.invent({\r\n  // Initialize\r\n  create: function(members) {\r\n    if (members instanceof SVG.Set) {\r\n      this.members = members.members.slice()\r\n    } else {\r\n      Array.isArray(members) ? this.members = members : this.clear()\r\n    }\r\n  }\r\n\r\n  // Add class methods\r\n, extend: {\r\n    // Add element to set\r\n    add: function() {\r\n      var i, il, elements = [].slice.call(arguments)\r\n\r\n      for (i = 0, il = elements.length; i < il; i++)\r\n        this.members.push(elements[i])\r\n\r\n      return this\r\n    }\r\n    // Remove element from set\r\n  , remove: function(element) {\r\n      var i = this.index(element)\r\n\r\n      // remove given child\r\n      if (i > -1)\r\n        this.members.splice(i, 1)\r\n\r\n      return this\r\n    }\r\n    // Iterate over all members\r\n  , each: function(block) {\r\n      for (var i = 0, il = this.members.length; i < il; i++)\r\n        block.apply(this.members[i], [i, this.members])\r\n\r\n      return this\r\n    }\r\n    // Restore to defaults\r\n  , clear: function() {\r\n      // initialize store\r\n      this.members = []\r\n\r\n      return this\r\n    }\r\n    // Get the length of a set\r\n  , length: function() {\r\n      return this.members.length\r\n    }\r\n    // Checks if a given element is present in set\r\n  , has: function(element) {\r\n      return this.index(element) >= 0\r\n    }\r\n    // retuns index of given element in set\r\n  , index: function(element) {\r\n      return this.members.indexOf(element)\r\n    }\r\n    // Get member at given index\r\n  , get: function(i) {\r\n      return this.members[i]\r\n    }\r\n    // Get first member\r\n  , first: function() {\r\n      return this.get(0)\r\n    }\r\n    // Get last member\r\n  , last: function() {\r\n      return this.get(this.members.length - 1)\r\n    }\r\n    // Default value\r\n  , valueOf: function() {\r\n      return this.members\r\n    }\r\n    // Get the bounding box of all members included or empty box if set has no items\r\n  , bbox: function(){\r\n      // return an empty box of there are no members\r\n      if (this.members.length == 0)\r\n        return new SVG.RBox()\r\n\r\n      // get the first rbox and update the target bbox\r\n      var rbox = this.members[0].rbox(this.members[0].doc())\r\n\r\n      this.each(function() {\r\n        // user rbox for correct position and visual representation\r\n        rbox = rbox.merge(this.rbox(this.doc()))\r\n      })\r\n\r\n      return rbox\r\n    }\r\n  }\r\n\r\n  // Add parent method\r\n, construct: {\r\n    // Create a new set\r\n    set: function(members) {\r\n      return new SVG.Set(members)\r\n    }\r\n  }\r\n})\r\n\r\nSVG.FX.Set = SVG.invent({\r\n  // Initialize node\r\n  create: function(set) {\r\n    // store reference to set\r\n    this.set = set\r\n  }\r\n\r\n})\r\n\r\n// Alias methods\r\nSVG.Set.inherit = function() {\r\n  var m\r\n    , methods = []\r\n\r\n  // gather shape methods\r\n  for(var m in SVG.Shape.prototype)\r\n    if (typeof SVG.Shape.prototype[m] == 'function' && typeof SVG.Set.prototype[m] != 'function')\r\n      methods.push(m)\r\n\r\n  // apply shape aliasses\r\n  methods.forEach(function(method) {\r\n    SVG.Set.prototype[method] = function() {\r\n      for (var i = 0, il = this.members.length; i < il; i++)\r\n        if (this.members[i] && typeof this.members[i][method] == 'function')\r\n          this.members[i][method].apply(this.members[i], arguments)\r\n\r\n      return method == 'animate' ? (this.fx || (this.fx = new SVG.FX.Set(this))) : this\r\n    }\r\n  })\r\n\r\n  // clear methods for the next round\r\n  methods = []\r\n\r\n  // gather fx methods\r\n  for(var m in SVG.FX.prototype)\r\n    if (typeof SVG.FX.prototype[m] == 'function' && typeof SVG.FX.Set.prototype[m] != 'function')\r\n      methods.push(m)\r\n\r\n  // apply fx aliasses\r\n  methods.forEach(function(method) {\r\n    SVG.FX.Set.prototype[method] = function() {\r\n      for (var i = 0, il = this.set.members.length; i < il; i++)\r\n        this.set.members[i].fx[method].apply(this.set.members[i].fx, arguments)\r\n\r\n      return this\r\n    }\r\n  })\r\n}\r\n\n\r\nSVG.extend(SVG.Element, {\r\n  // Store data values on svg nodes\r\n  data: function(a, v, r) {\r\n    if (typeof a == 'object') {\r\n      for (v in a)\r\n        this.data(v, a[v])\r\n\r\n    } else if (arguments.length < 2) {\r\n      try {\r\n        return JSON.parse(this.attr('data-' + a))\r\n      } catch(e) {\r\n        return this.attr('data-' + a)\r\n      }\r\n\r\n    } else {\r\n      this.attr(\r\n        'data-' + a\r\n      , v === null ?\r\n          null :\r\n        r === true || typeof v === 'string' || typeof v === 'number' ?\r\n          v :\r\n          JSON.stringify(v)\r\n      )\r\n    }\r\n\r\n    return this\r\n  }\r\n})\nSVG.extend(SVG.Element, {\r\n  // Remember arbitrary data\r\n  remember: function(k, v) {\r\n    // remember every item in an object individually\r\n    if (typeof arguments[0] == 'object')\r\n      for (var v in k)\r\n        this.remember(v, k[v])\r\n\r\n    // retrieve memory\r\n    else if (arguments.length == 1)\r\n      return this.memory()[k]\r\n\r\n    // store memory\r\n    else\r\n      this.memory()[k] = v\r\n\r\n    return this\r\n  }\r\n\r\n  // Erase a given memory\r\n, forget: function() {\r\n    if (arguments.length == 0)\r\n      this._memory = {}\r\n    else\r\n      for (var i = arguments.length - 1; i >= 0; i--)\r\n        delete this.memory()[arguments[i]]\r\n\r\n    return this\r\n  }\r\n\r\n  // Initialize or return local memory object\r\n, memory: function() {\r\n    return this._memory || (this._memory = {})\r\n  }\r\n\r\n})\n// Method for getting an element by id\r\nSVG.get = function(id) {\r\n  var node = document.getElementById(idFromReference(id) || id)\r\n  return SVG.adopt(node)\r\n}\r\n\r\n// Select elements by query string\r\nSVG.select = function(query, parent) {\r\n  return new SVG.Set(\r\n    SVG.utils.map((parent || document).querySelectorAll(query), function(node) {\r\n      return SVG.adopt(node)\r\n    })\r\n  )\r\n}\r\n\r\nSVG.extend(SVG.Parent, {\r\n  // Scoped select method\r\n  select: function(query) {\r\n    return SVG.select(query, this.node)\r\n  }\r\n\r\n})\nfunction pathRegReplace(a, b, c, d) {\r\n  return c + d.replace(SVG.regex.dots, ' .')\r\n}\r\n\r\n// creates deep clone of array\r\nfunction array_clone(arr){\r\n  var clone = arr.slice(0)\r\n  for(var i = clone.length; i--;){\r\n    if(Array.isArray(clone[i])){\r\n      clone[i] = array_clone(clone[i])\r\n    }\r\n  }\r\n  return clone\r\n}\r\n\r\n// tests if a given element is instance of an object\r\nfunction is(el, obj){\r\n  return el instanceof obj\r\n}\r\n\r\n// tests if a given selector matches an element\r\nfunction matches(el, selector) {\r\n  return (el.matches || el.matchesSelector || el.msMatchesSelector || el.mozMatchesSelector || el.webkitMatchesSelector || el.oMatchesSelector).call(el, selector);\r\n}\r\n\r\n// Convert dash-separated-string to camelCase\r\nfunction camelCase(s) {\r\n  return s.toLowerCase().replace(/-(.)/g, function(m, g) {\r\n    return g.toUpperCase()\r\n  })\r\n}\r\n\r\n// Capitalize first letter of a string\r\nfunction capitalize(s) {\r\n  return s.charAt(0).toUpperCase() + s.slice(1)\r\n}\r\n\r\n// Ensure to six-based hex\r\nfunction fullHex(hex) {\r\n  return hex.length == 4 ?\r\n    [ '#',\r\n      hex.substring(1, 2), hex.substring(1, 2)\r\n    , hex.substring(2, 3), hex.substring(2, 3)\r\n    , hex.substring(3, 4), hex.substring(3, 4)\r\n    ].join('') : hex\r\n}\r\n\r\n// Component to hex value\r\nfunction compToHex(comp) {\r\n  var hex = comp.toString(16)\r\n  return hex.length == 1 ? '0' + hex : hex\r\n}\r\n\r\n// Calculate proportional width and height values when necessary\r\nfunction proportionalSize(element, width, height) {\r\n  if (width == null || height == null) {\r\n    var box = element.bbox()\r\n\r\n    if (width == null)\r\n      width = box.width / box.height * height\r\n    else if (height == null)\r\n      height = box.height / box.width * width\r\n  }\r\n\r\n  return {\r\n    width:  width\r\n  , height: height\r\n  }\r\n}\r\n\r\n// Delta transform point\r\nfunction deltaTransformPoint(matrix, x, y) {\r\n  return {\r\n    x: x * matrix.a + y * matrix.c + 0\r\n  , y: x * matrix.b + y * matrix.d + 0\r\n  }\r\n}\r\n\r\n// Map matrix array to object\r\nfunction arrayToMatrix(a) {\r\n  return { a: a[0], b: a[1], c: a[2], d: a[3], e: a[4], f: a[5] }\r\n}\r\n\r\n// Parse matrix if required\r\nfunction parseMatrix(matrix) {\r\n  if (!(matrix instanceof SVG.Matrix))\r\n    matrix = new SVG.Matrix(matrix)\r\n\r\n  return matrix\r\n}\r\n\r\n// Add centre point to transform object\r\nfunction ensureCentre(o, target) {\r\n  o.cx = o.cx == null ? target.bbox().cx : o.cx\r\n  o.cy = o.cy == null ? target.bbox().cy : o.cy\r\n}\r\n\r\n// PathArray Helpers\r\nfunction arrayToString(a) {\r\n  for (var i = 0, il = a.length, s = ''; i < il; i++) {\r\n    s += a[i][0]\r\n\r\n    if (a[i][1] != null) {\r\n      s += a[i][1]\r\n\r\n      if (a[i][2] != null) {\r\n        s += ' '\r\n        s += a[i][2]\r\n\r\n        if (a[i][3] != null) {\r\n          s += ' '\r\n          s += a[i][3]\r\n          s += ' '\r\n          s += a[i][4]\r\n\r\n          if (a[i][5] != null) {\r\n            s += ' '\r\n            s += a[i][5]\r\n            s += ' '\r\n            s += a[i][6]\r\n\r\n            if (a[i][7] != null) {\r\n              s += ' '\r\n              s += a[i][7]\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  return s + ' '\r\n}\r\n\r\n// Deep new id assignment\r\nfunction assignNewId(node) {\r\n  // do the same for SVG child nodes as well\r\n  for (var i = node.childNodes.length - 1; i >= 0; i--)\r\n    if (node.childNodes[i] instanceof window.SVGElement)\r\n      assignNewId(node.childNodes[i])\r\n\r\n  return SVG.adopt(node).id(SVG.eid(node.nodeName))\r\n}\r\n\r\n// Add more bounding box properties\r\nfunction fullBox(b) {\r\n  if (b.x == null) {\r\n    b.x      = 0\r\n    b.y      = 0\r\n    b.width  = 0\r\n    b.height = 0\r\n  }\r\n\r\n  b.w  = b.width\r\n  b.h  = b.height\r\n  b.x2 = b.x + b.width\r\n  b.y2 = b.y + b.height\r\n  b.cx = b.x + b.width / 2\r\n  b.cy = b.y + b.height / 2\r\n\r\n  return b\r\n}\r\n\r\n// Get id from reference string\r\nfunction idFromReference(url) {\r\n  var m = (url || '').toString().match(SVG.regex.reference)\r\n\r\n  if (m) return m[1]\r\n}\r\n\r\n// If values like 1e-88 are passed, this is not a valid 32 bit float,\r\n// but in those cases, we are so close to 0 that 0 works well!\r\nfunction float32String(v) {\r\n  return Math.abs(v) > 1e-37 ? v : 0\r\n}\r\n\r\n// Create matrix array for looping\r\nvar abcdef = 'abcdef'.split('')\r\n\n// Add CustomEvent to IE9 and IE10\r\nif (typeof window.CustomEvent !== 'function') {\r\n  // Code from: https://developer.mozilla.org/en-US/docs/Web/API/CustomEvent\r\n  var CustomEventPoly = function(event, options) {\r\n    options = options || { bubbles: false, cancelable: false, detail: undefined }\r\n    var e = document.createEvent('CustomEvent')\r\n    e.initCustomEvent(event, options.bubbles, options.cancelable, options.detail)\r\n    return e\r\n  }\r\n\r\n  CustomEventPoly.prototype = window.Event.prototype\r\n\r\n  SVG.CustomEvent = CustomEventPoly\r\n} else {\r\n  SVG.CustomEvent = window.CustomEvent\r\n}\r\n\r\n// requestAnimationFrame / cancelAnimationFrame Polyfill with fallback based on Paul Irish\r\n(function(w) {\r\n  var lastTime = 0\r\n  var vendors = ['moz', 'webkit']\r\n\r\n  for(var x = 0; x < vendors.length && !window.requestAnimationFrame; ++x) {\r\n    w.requestAnimationFrame = w[vendors[x] + 'RequestAnimationFrame']\r\n    w.cancelAnimationFrame  = w[vendors[x] + 'CancelAnimationFrame'] ||\r\n                              w[vendors[x] + 'CancelRequestAnimationFrame']\r\n  }\r\n\r\n  w.requestAnimationFrame = w.requestAnimationFrame ||\r\n    function(callback) {\r\n      var currTime = new Date().getTime()\r\n      var timeToCall = Math.max(0, 16 - (currTime - lastTime))\r\n\r\n      var id = w.setTimeout(function() {\r\n        callback(currTime + timeToCall)\r\n      }, timeToCall)\r\n\r\n      lastTime = currTime + timeToCall\r\n      return id\r\n    }\r\n\r\n  w.cancelAnimationFrame = w.cancelAnimationFrame || w.clearTimeout;\r\n\r\n}(window))\r\n\r\nreturn SVG\r\n\r\n}));\r","/*! svg.draggable.js - v2.2.2 - 2019-01-08\r\n* https://github.com/svgdotjs/svg.draggable.js\r\n* Copyright (c) 2019 Wout Fierens; Licensed MIT */\r\n;(function() {\r\n\r\n  // creates handler, saves it\r\n  function DragHandler(el){\r\n    el.remember('_draggable', this)\r\n    this.el = el\r\n  }\r\n\r\n\r\n  // Sets new parameter, starts dragging\r\n  DragHandler.prototype.init = function(constraint, val){\r\n    var _this = this\r\n    this.constraint = constraint\r\n    this.value = val\r\n    this.el.on('mousedown.drag', function(e){ _this.start(e) })\r\n    this.el.on('touchstart.drag', function(e){ _this.start(e) })\r\n  }\r\n\r\n  // transforms one point from screen to user coords\r\n  DragHandler.prototype.transformPoint = function(event, offset){\r\n      event = event || window.event\r\n      var touches = event.changedTouches && event.changedTouches[0] || event\r\n      this.p.x = touches.clientX - (offset || 0)\r\n      this.p.y = touches.clientY\r\n      return this.p.matrixTransform(this.m)\r\n  }\r\n\r\n  // gets elements bounding box with special handling of groups, nested and use\r\n  DragHandler.prototype.getBBox = function(){\r\n\r\n    var box = this.el.bbox()\r\n\r\n    if(this.el instanceof SVG.Nested) box = this.el.rbox()\r\n\r\n    if (this.el instanceof SVG.G || this.el instanceof SVG.Use || this.el instanceof SVG.Nested) {\r\n      box.x = this.el.x()\r\n      box.y = this.el.y()\r\n    }\r\n\r\n    return box\r\n  }\r\n\r\n  // start dragging\r\n  DragHandler.prototype.start = function(e){\r\n\r\n    // check for left button\r\n    if(e.type == 'click'|| e.type == 'mousedown' || e.type == 'mousemove'){\r\n      if((e.which || e.buttons) != 1){\r\n          return\r\n      }\r\n    }\r\n\r\n    var _this = this\r\n\r\n    // fire beforedrag event\r\n    this.el.fire('beforedrag', { event: e, handler: this })\r\n    if(this.el.event().defaultPrevented) return;\r\n\r\n    // prevent browser drag behavior as soon as possible\r\n    e.preventDefault();\r\n\r\n    // prevent propagation to a parent that might also have dragging enabled\r\n    e.stopPropagation();\r\n\r\n    // search for parent on the fly to make sure we can call\r\n    // draggable() even when element is not in the dom currently\r\n    this.parent = this.parent || this.el.parent(SVG.Nested) || this.el.parent(SVG.Doc)\r\n    this.p = this.parent.node.createSVGPoint()\r\n\r\n    // save current transformation matrix\r\n    this.m = this.el.node.getScreenCTM().inverse()\r\n\r\n    var box = this.getBBox()\r\n\r\n    var anchorOffset;\r\n\r\n    // fix text-anchor in text-element (#37)\r\n    if(this.el instanceof SVG.Text){\r\n      anchorOffset = this.el.node.getComputedTextLength();\r\n\r\n      switch(this.el.attr('text-anchor')){\r\n        case 'middle':\r\n          anchorOffset /= 2;\r\n          break\r\n        case 'start':\r\n          anchorOffset = 0;\r\n          break;\r\n      }\r\n    }\r\n\r\n    this.startPoints = {\r\n      // We take absolute coordinates since we are just using a delta here\r\n      point: this.transformPoint(e, anchorOffset),\r\n      box:   box,\r\n      transform: this.el.transform()\r\n    }\r\n\r\n    // add drag and end events to window\r\n    SVG.on(window, 'mousemove.drag', function(e){ _this.drag(e) })\r\n    SVG.on(window, 'touchmove.drag', function(e){ _this.drag(e) })\r\n    SVG.on(window, 'mouseup.drag', function(e){ _this.end(e) })\r\n    SVG.on(window, 'touchend.drag', function(e){ _this.end(e) })\r\n\r\n    // fire dragstart event\r\n    this.el.fire('dragstart', {event: e, p: this.startPoints.point, m: this.m, handler: this})\r\n  }\r\n\r\n  // while dragging\r\n  DragHandler.prototype.drag = function(e){\r\n\r\n    var box = this.getBBox()\r\n      , p   = this.transformPoint(e)\r\n      , x   = this.startPoints.box.x + p.x - this.startPoints.point.x\r\n      , y   = this.startPoints.box.y + p.y - this.startPoints.point.y\r\n      , c   = this.constraint\r\n      , gx  = p.x - this.startPoints.point.x\r\n      , gy  = p.y - this.startPoints.point.y\r\n\r\n    this.el.fire('dragmove', {\r\n        event: e\r\n      , p: p\r\n      , m: this.m\r\n      , handler: this\r\n    })\r\n\r\n    if(this.el.event().defaultPrevented) return p\r\n\r\n    // move the element to its new position, if possible by constraint\r\n    if (typeof c == 'function') {\r\n\r\n      var coord = c.call(this.el, x, y, this.m)\r\n\r\n      // bool, just show us if movement is allowed or not\r\n      if (typeof coord == 'boolean') {\r\n        coord = {\r\n          x: coord,\r\n          y: coord\r\n        }\r\n      }\r\n\r\n      // if true, we just move. If !false its a number and we move it there\r\n      if (coord.x === true) {\r\n        this.el.x(x)\r\n      } else if (coord.x !== false) {\r\n        this.el.x(coord.x)\r\n      }\r\n\r\n      if (coord.y === true) {\r\n        this.el.y(y)\r\n      } else if (coord.y !== false) {\r\n        this.el.y(coord.y)\r\n      }\r\n\r\n    } else if (typeof c == 'object') {\r\n\r\n      // keep element within constrained box\r\n      if (c.minX != null && x < c.minX) {\r\n        x = c.minX\r\n        gx = x - this.startPoints.box.x\r\n      } else if (c.maxX != null && x > c.maxX - box.width) {\r\n        x = c.maxX - box.width\r\n        gx = x - this.startPoints.box.x\r\n      } if (c.minY != null && y < c.minY) {\r\n        y = c.minY\r\n        gy = y - this.startPoints.box.y\r\n      } else if (c.maxY != null && y > c.maxY - box.height) {\r\n        y = c.maxY - box.height\r\n        gy = y - this.startPoints.box.y\r\n      }\r\n\r\n      if (c.snapToGrid != null) {\r\n        x = x - (x % c.snapToGrid)\r\n        y = y - (y % c.snapToGrid)\r\n        gx = gx - (gx % c.snapToGrid)\r\n        gy = gy - (gy % c.snapToGrid)\r\n      }\r\n\r\n      if(this.el instanceof SVG.G)\r\n        this.el.matrix(this.startPoints.transform).transform({x:gx, y: gy}, true)\r\n      else\r\n        this.el.move(x, y)\r\n    }\r\n\r\n    // so we can use it in the end-method, too\r\n    return p\r\n  }\r\n\r\n  DragHandler.prototype.end = function(e){\r\n\r\n    // final drag\r\n    var p = this.drag(e);\r\n\r\n    // fire dragend event\r\n    this.el.fire('dragend', { event: e, p: p, m: this.m, handler: this })\r\n\r\n    // unbind events\r\n    SVG.off(window, 'mousemove.drag')\r\n    SVG.off(window, 'touchmove.drag')\r\n    SVG.off(window, 'mouseup.drag')\r\n    SVG.off(window, 'touchend.drag')\r\n\r\n  }\r\n\r\n  SVG.extend(SVG.Element, {\r\n    // Make element draggable\r\n    // Constraint might be an object (as described in readme.md) or a function in the form \"function (x, y)\" that gets called before every move.\r\n    // The function can return a boolean or an object of the form {x, y}, to which the element will be moved. \"False\" skips moving, true moves to raw x, y.\r\n    draggable: function(value, constraint) {\r\n\r\n      // Check the parameters and reassign if needed\r\n      if (typeof value == 'function' || typeof value == 'object') {\r\n        constraint = value\r\n        value = true\r\n      }\r\n\r\n      var dragHandler = this.remember('_draggable') || new DragHandler(this)\r\n\r\n      // When no parameter is given, value is true\r\n      value = typeof value === 'undefined' ? true : value\r\n\r\n      if(value) dragHandler.init(constraint || {}, value)\r\n      else {\r\n        this.off('mousedown.drag')\r\n        this.off('touchstart.drag')\r\n      }\r\n\r\n      return this\r\n    }\r\n\r\n  })\r\n\r\n}).call(this);\r\n","/*!\n* svg.resize.js - An extension for svg.js which allows to resize elements which are selected\n* @version 1.4.3\n* https://github.com/svgdotjs/svg.resize.js\n*\n* @copyright [object Object]\n* @license MIT\n*/;\n;(function() {\n\"use strict\";\n\n;(function () {\r\n\r\n    function ResizeHandler(el) {\r\n\r\n        el.remember('_resizeHandler', this);\r\n\r\n        this.el = el;\r\n        this.parameters = {};\r\n        this.lastUpdateCall = null;\r\n        this.p = el.doc().node.createSVGPoint();\r\n    }\r\n\r\n    ResizeHandler.prototype.transformPoint = function(x, y, m){\r\n\r\n        this.p.x = x - (this.offset.x - window.pageXOffset);\r\n        this.p.y = y - (this.offset.y - window.pageYOffset);\r\n\r\n        return this.p.matrixTransform(m || this.m);\r\n\r\n    };\r\n\r\n    ResizeHandler.prototype._extractPosition = function(event) {\r\n        // Extract a position from a mouse/touch event.\r\n        // Returns { x: .., y: .. }\r\n        return {\r\n            x: event.clientX != null ? event.clientX : event.touches[0].clientX,\r\n            y: event.clientY != null ? event.clientY : event.touches[0].clientY\r\n        }\r\n    };\r\n\r\n    ResizeHandler.prototype.init = function (options) {\r\n\r\n        var _this = this;\r\n\r\n        this.stop();\r\n\r\n        if (options === 'stop') {\r\n            return;\r\n        }\r\n\r\n        this.options = {};\r\n\r\n        // Merge options and defaults\r\n        for (var i in this.el.resize.defaults) {\r\n            this.options[i] = this.el.resize.defaults[i];\r\n            if (typeof options[i] !== 'undefined') {\r\n                this.options[i] = options[i];\r\n            }\r\n        }\r\n\r\n        // We listen to all these events which are specifying different edges\r\n        this.el.on('lt.resize', function(e){ _this.resize(e || window.event); });  // Left-Top\r\n        this.el.on('rt.resize', function(e){ _this.resize(e || window.event); });  // Right-Top\r\n        this.el.on('rb.resize', function(e){ _this.resize(e || window.event); });  // Right-Bottom\r\n        this.el.on('lb.resize', function(e){ _this.resize(e || window.event); });  // Left-Bottom\r\n\r\n        this.el.on('t.resize', function(e){ _this.resize(e || window.event); });   // Top\r\n        this.el.on('r.resize', function(e){ _this.resize(e || window.event); });   // Right\r\n        this.el.on('b.resize', function(e){ _this.resize(e || window.event); });   // Bottom\r\n        this.el.on('l.resize', function(e){ _this.resize(e || window.event); });   // Left\r\n\r\n        this.el.on('rot.resize', function(e){ _this.resize(e || window.event); }); // Rotation\r\n\r\n        this.el.on('point.resize', function(e){ _this.resize(e || window.event); }); // Point-Moving\r\n\r\n        // This call ensures, that the plugin reacts to a change of snapToGrid immediately\r\n        this.update();\r\n\r\n    };\r\n\r\n    ResizeHandler.prototype.stop = function(){\r\n        this.el.off('lt.resize');\r\n        this.el.off('rt.resize');\r\n        this.el.off('rb.resize');\r\n        this.el.off('lb.resize');\r\n\r\n        this.el.off('t.resize');\r\n        this.el.off('r.resize');\r\n        this.el.off('b.resize');\r\n        this.el.off('l.resize');\r\n\r\n        this.el.off('rot.resize');\r\n\r\n        this.el.off('point.resize');\r\n\r\n        return this;\r\n    };\r\n\r\n    ResizeHandler.prototype.resize = function (event) {\r\n\r\n        var _this = this;\r\n\r\n        this.m = this.el.node.getScreenCTM().inverse();\r\n        this.offset = { x: window.pageXOffset, y: window.pageYOffset };\r\n\r\n        var txPt = this._extractPosition(event.detail.event);\r\n        this.parameters = {\r\n            type: this.el.type, // the type of element\r\n            p: this.transformPoint(txPt.x, txPt.y),\r\n            x: event.detail.x,      // x-position of the mouse when resizing started\r\n            y: event.detail.y,      // y-position of the mouse when resizing started\r\n            box: this.el.bbox(),    // The bounding-box of the element\r\n            rotation: this.el.transform().rotation  // The current rotation of the element\r\n        };\r\n\r\n        // Add font-size parameter if the element type is text\r\n        if (this.el.type === \"text\") {\r\n            this.parameters.fontSize = this.el.attr()[\"font-size\"];\r\n        }\r\n\r\n        // the i-param in the event holds the index of the point which is moved, when using `deepSelect`\r\n        if (event.detail.i !== undefined) {\r\n\r\n            // get the point array\r\n            var array = this.el.array().valueOf();\r\n\r\n            // Save the index and the point which is moved\r\n            this.parameters.i = event.detail.i;\r\n            this.parameters.pointCoords = [array[event.detail.i][0], array[event.detail.i][1]];\r\n        }\r\n\r\n        // Lets check which edge of the bounding-box was clicked and resize the this.el according to this\r\n        switch (event.type) {\r\n\r\n            // Left-Top-Edge\r\n            case 'lt':\r\n                // We build a calculating function for every case which gives us the new position of the this.el\r\n                this.calc = function (diffX, diffY) {\r\n                    // The procedure is always the same\r\n                    // First we snap the edge to the given grid (snapping to 1px grid is normal resizing)\r\n                    var snap = this.snapToGrid(diffX, diffY);\r\n\r\n                    // Now we check if the new height and width still valid (> 0)\r\n                    if (this.parameters.box.width - snap[0] > 0 && this.parameters.box.height - snap[1] > 0) {\r\n                        // ...if valid, we resize the this.el (which can include moving because the coord-system starts at the left-top and this edge is moving sometimes when resized)\r\n\r\n                        /*\r\n                         * but first check if the element is text box, so we can change the font size instead of\r\n                         * the width and height\r\n                         */\r\n\r\n                        if (this.parameters.type === \"text\") {\r\n                            this.el.move(this.parameters.box.x + snap[0], this.parameters.box.y);\r\n                            this.el.attr(\"font-size\", this.parameters.fontSize - snap[0]);\r\n                            return;\r\n                        }\r\n\r\n                        snap = this.checkAspectRatio(snap);\r\n\r\n                        this.el.move(this.parameters.box.x + snap[0], this.parameters.box.y + snap[1]).size(this.parameters.box.width - snap[0], this.parameters.box.height - snap[1]);\r\n                    }\r\n                };\r\n                break;\r\n\r\n            // Right-Top\r\n            case 'rt':\r\n                // s.a.\r\n                this.calc = function (diffX, diffY) {\r\n                    var snap = this.snapToGrid(diffX, diffY, 1 << 1);\r\n                    if (this.parameters.box.width + snap[0] > 0 && this.parameters.box.height - snap[1] > 0) {\r\n                        if (this.parameters.type === \"text\") {\r\n                            this.el.move(this.parameters.box.x - snap[0], this.parameters.box.y);\r\n                            this.el.attr(\"font-size\", this.parameters.fontSize + snap[0]);\r\n                            return;\r\n                        }\r\n\r\n                        snap = this.checkAspectRatio(snap, true);\r\n\r\n                        this.el.move(this.parameters.box.x, this.parameters.box.y + snap[1]).size(this.parameters.box.width + snap[0], this.parameters.box.height - snap[1]);\r\n                    }\r\n                };\r\n                break;\r\n\r\n            // Right-Bottom\r\n            case 'rb':\r\n                // s.a.\r\n                this.calc = function (diffX, diffY) {\r\n                    var snap = this.snapToGrid(diffX, diffY, 0);\r\n                    if (this.parameters.box.width + snap[0] > 0 && this.parameters.box.height + snap[1] > 0) {\r\n                        if (this.parameters.type === \"text\") {\r\n                            this.el.move(this.parameters.box.x - snap[0], this.parameters.box.y);\r\n                            this.el.attr(\"font-size\", this.parameters.fontSize + snap[0]);\r\n                            return;\r\n                        }\r\n\r\n                        snap = this.checkAspectRatio(snap);\r\n\r\n                        this.el.move(this.parameters.box.x, this.parameters.box.y).size(this.parameters.box.width + snap[0], this.parameters.box.height + snap[1]);\r\n                    }\r\n                };\r\n                break;\r\n\r\n            // Left-Bottom\r\n            case 'lb':\r\n                // s.a.\r\n                this.calc = function (diffX, diffY) {\r\n                    var snap = this.snapToGrid(diffX, diffY, 1);\r\n                    if (this.parameters.box.width - snap[0] > 0 && this.parameters.box.height + snap[1] > 0) {\r\n                        if (this.parameters.type === \"text\") {\r\n                            this.el.move(this.parameters.box.x + snap[0], this.parameters.box.y);\r\n                            this.el.attr(\"font-size\", this.parameters.fontSize - snap[0]);\r\n                            return;\r\n                        }\r\n\r\n                        snap = this.checkAspectRatio(snap, true);\r\n\r\n                        this.el.move(this.parameters.box.x + snap[0], this.parameters.box.y).size(this.parameters.box.width - snap[0], this.parameters.box.height + snap[1]);\r\n                    }\r\n                };\r\n                break;\r\n\r\n            // Top\r\n            case 't':\r\n                // s.a.\r\n                this.calc = function (diffX, diffY) {\r\n                    var snap = this.snapToGrid(diffX, diffY, 1 << 1);\r\n                    if (this.parameters.box.height - snap[1] > 0) {\r\n                        // Disable the font-resizing if it is not from the corner of bounding-box\r\n                        if (this.parameters.type === \"text\") {\r\n                            return;\r\n                        }\r\n\r\n                        this.el.move(this.parameters.box.x, this.parameters.box.y + snap[1]).height(this.parameters.box.height - snap[1]);\r\n                    }\r\n                };\r\n                break;\r\n\r\n            // Right\r\n            case 'r':\r\n                // s.a.\r\n                this.calc = function (diffX, diffY) {\r\n                    var snap = this.snapToGrid(diffX, diffY, 0);\r\n                    if (this.parameters.box.width + snap[0] > 0) {\r\n                        if (this.parameters.type === \"text\") {\r\n                            return;\r\n                        }\r\n\r\n                        this.el.move(this.parameters.box.x, this.parameters.box.y).width(this.parameters.box.width + snap[0]);\r\n                    }\r\n                };\r\n                break;\r\n\r\n            // Bottom\r\n            case 'b':\r\n                // s.a.\r\n                this.calc = function (diffX, diffY) {\r\n                    var snap = this.snapToGrid(diffX, diffY, 0);\r\n                    if (this.parameters.box.height + snap[1] > 0) {\r\n                        if (this.parameters.type === \"text\") {\r\n                            return;\r\n                        }\r\n\r\n                        this.el.move(this.parameters.box.x, this.parameters.box.y).height(this.parameters.box.height + snap[1]);\r\n                    }\r\n                };\r\n                break;\r\n\r\n            // Left\r\n            case 'l':\r\n                // s.a.\r\n                this.calc = function (diffX, diffY) {\r\n                    var snap = this.snapToGrid(diffX, diffY, 1);\r\n                    if (this.parameters.box.width - snap[0] > 0) {\r\n                        if (this.parameters.type === \"text\") {\r\n                            return;\r\n                        }\r\n\r\n                        this.el.move(this.parameters.box.x + snap[0], this.parameters.box.y).width(this.parameters.box.width - snap[0]);\r\n                    }\r\n                };\r\n                break;\r\n\r\n            // Rotation\r\n            case 'rot':\r\n                // s.a.\r\n                this.calc = function (diffX, diffY) {\r\n\r\n                    // yes this is kinda stupid but we need the mouse coords back...\r\n                    var current = {x: diffX + this.parameters.p.x, y: diffY + this.parameters.p.y};\r\n\r\n                    // start minus middle\r\n                    var sAngle = Math.atan2((this.parameters.p.y - this.parameters.box.y - this.parameters.box.height / 2), (this.parameters.p.x - this.parameters.box.x - this.parameters.box.width / 2));\r\n\r\n                    // end minus middle\r\n                    var pAngle = Math.atan2((current.y - this.parameters.box.y - this.parameters.box.height / 2), (current.x - this.parameters.box.x - this.parameters.box.width / 2));\r\n\r\n                    var angle = this.parameters.rotation + (pAngle - sAngle) * 180 / Math.PI + this.options.snapToAngle / 2;\r\n\r\n                    // We have to move the element to the center of the box first and change the rotation afterwards\r\n                    // because rotation always works around a rotation-center, which is changed when moving the element\r\n                    // We also set the new rotation center to the center of the box.\r\n                    this.el.center(this.parameters.box.cx, this.parameters.box.cy).rotate(angle - (angle % this.options.snapToAngle), this.parameters.box.cx, this.parameters.box.cy);\r\n                };\r\n                break;\r\n\r\n            // Moving one single Point (needed when an element is deepSelected which means you can move every single point of the object)\r\n            case 'point':\r\n                this.calc = function (diffX, diffY) {\r\n\r\n                    // Snapping the point to the grid\r\n                    var snap = this.snapToGrid(diffX, diffY, this.parameters.pointCoords[0], this.parameters.pointCoords[1]);\r\n\r\n                    // Get the point array\r\n                    var array = this.el.array().valueOf();\r\n\r\n                    // Changing the moved point in the array\r\n                    array[this.parameters.i][0] = this.parameters.pointCoords[0] + snap[0];\r\n                    array[this.parameters.i][1] = this.parameters.pointCoords[1] + snap[1];\r\n\r\n                    // And plot the new this.el\r\n                    this.el.plot(array);\r\n                };\r\n        }\r\n\r\n        this.el.fire('resizestart', {dx: this.parameters.x, dy: this.parameters.y, event: event});\r\n        // When resizing started, we have to register events for...\r\n        // Touches.\r\n        SVG.on(window, 'touchmove.resize', function(e) {\r\n            _this.update(e || window.event);\r\n        });\r\n        SVG.on(window, 'touchend.resize', function() {\r\n            _this.done();\r\n        });\r\n        // Mouse.\r\n        SVG.on(window, 'mousemove.resize', function (e) {\r\n            _this.update(e || window.event);\r\n        });\r\n        SVG.on(window, 'mouseup.resize', function () {\r\n            _this.done();\r\n        });\r\n\r\n    };\r\n\r\n    // The update-function redraws the element every time the mouse is moving\r\n    ResizeHandler.prototype.update = function (event) {\r\n\r\n        if (!event) {\r\n            if (this.lastUpdateCall) {\r\n                this.calc(this.lastUpdateCall[0], this.lastUpdateCall[1]);\r\n            }\r\n            return;\r\n        }\r\n\r\n        // Calculate the difference between the mouseposition at start and now\r\n        var txPt = this._extractPosition(event);\r\n        var p = this.transformPoint(txPt.x, txPt.y);\r\n\r\n        var diffX = p.x - this.parameters.p.x,\r\n            diffY = p.y - this.parameters.p.y;\r\n\r\n        this.lastUpdateCall = [diffX, diffY];\r\n\r\n        // Calculate the new position and height / width of the element\r\n        this.calc(diffX, diffY);\r\n\r\n       // Emit an event to say we have changed.\r\n        this.el.fire('resizing', {dx: diffX, dy: diffY, event: event});\r\n    };\r\n\r\n    // Is called on mouseup.\r\n    // Removes the update-function from the mousemove event\r\n    ResizeHandler.prototype.done = function () {\r\n        this.lastUpdateCall = null;\r\n        SVG.off(window, 'mousemove.resize');\r\n        SVG.off(window, 'mouseup.resize');\r\n        SVG.off(window, 'touchmove.resize');\r\n        SVG.off(window, 'touchend.resize');\r\n        this.el.fire('resizedone');\r\n    };\r\n\r\n    // The flag is used to determine whether the resizing is used with a left-Point (first bit) and top-point (second bit)\r\n    // In this cases the temp-values are calculated differently\r\n    ResizeHandler.prototype.snapToGrid = function (diffX, diffY, flag, pointCoordsY) {\r\n\r\n        var temp;\r\n\r\n        // If `pointCoordsY` is given, a single Point has to be snapped (deepSelect). That's why we need a different temp-value\r\n        if (typeof pointCoordsY !== 'undefined') {\r\n            // Note that flag = pointCoordsX in this case\r\n            temp = [(flag + diffX) % this.options.snapToGrid, (pointCoordsY + diffY) % this.options.snapToGrid];\r\n        } else {\r\n            // We check if the flag is set and if not we set a default-value (both bits set - which means upper-left-edge)\r\n            flag = flag == null ? 1 | 1 << 1 : flag;\r\n            temp = [(this.parameters.box.x + diffX + (flag & 1 ? 0 : this.parameters.box.width)) % this.options.snapToGrid, (this.parameters.box.y + diffY + (flag & (1 << 1) ? 0 : this.parameters.box.height)) % this.options.snapToGrid];\r\n        }\r\n\r\n        if(diffX < 0) {\r\n            temp[0] -= this.options.snapToGrid;\r\n        }\r\n        if(diffY < 0) {\r\n            temp[1] -= this.options.snapToGrid;\r\n        }\r\n\r\n        diffX -= (Math.abs(temp[0]) < this.options.snapToGrid / 2 ?\r\n                  temp[0] :\r\n                  temp[0] - (diffX < 0 ? -this.options.snapToGrid : this.options.snapToGrid));\r\n        diffY -= (Math.abs(temp[1]) < this.options.snapToGrid / 2 ?\r\n                  temp[1] :\r\n                  temp[1] - (diffY < 0 ? -this.options.snapToGrid : this.options.snapToGrid));\r\n\r\n        return this.constraintToBox(diffX, diffY, flag, pointCoordsY);\r\n\r\n    };\r\n\r\n    // keep element within constrained box\r\n    ResizeHandler.prototype.constraintToBox = function (diffX, diffY, flag, pointCoordsY) {\r\n        //return [diffX, diffY]\r\n        var c = this.options.constraint || {};\r\n        var orgX, orgY;\r\n\r\n        if (typeof pointCoordsY !== 'undefined') {\r\n          orgX = flag;\r\n          orgY = pointCoordsY;\r\n        } else {\r\n          orgX = this.parameters.box.x + (flag & 1 ? 0 : this.parameters.box.width);\r\n          orgY = this.parameters.box.y + (flag & (1<<1) ? 0 : this.parameters.box.height);\r\n        }\r\n\r\n        if (typeof c.minX !== 'undefined' && orgX + diffX < c.minX) {\r\n          diffX = c.minX - orgX;\r\n        }\r\n\r\n        if (typeof c.maxX !== 'undefined' && orgX + diffX > c.maxX) {\r\n          diffX = c.maxX - orgX;\r\n        }\r\n\r\n        if (typeof c.minY !== 'undefined' && orgY + diffY < c.minY) {\r\n          diffY = c.minY - orgY;\r\n        }\r\n\r\n        if (typeof c.maxY !== 'undefined' && orgY + diffY > c.maxY) {\r\n          diffY = c.maxY - orgY;\r\n        }\r\n\r\n        return [diffX, diffY];\r\n    };\r\n\r\n    ResizeHandler.prototype.checkAspectRatio = function (snap, isReverse) {\r\n        if (!this.options.saveAspectRatio) {\r\n            return snap;\r\n        }\r\n\r\n        var updatedSnap = snap.slice();\r\n        var aspectRatio = this.parameters.box.width / this.parameters.box.height;\r\n        var newW = this.parameters.box.width + snap[0];\r\n        var newH = this.parameters.box.height - snap[1];\r\n        var newAspectRatio = newW / newH;\r\n\r\n        if (newAspectRatio < aspectRatio) {\r\n            // Height is too big. Adapt it\r\n            updatedSnap[1] = newW / aspectRatio - this.parameters.box.height;\r\n            isReverse && (updatedSnap[1] = -updatedSnap[1]);\r\n        } else if (newAspectRatio > aspectRatio) {\r\n            // Width is too big. Adapt it\r\n            updatedSnap[0] = this.parameters.box.width - newH * aspectRatio;\r\n            isReverse && (updatedSnap[0] = -updatedSnap[0]);\r\n        }\r\n\r\n        return updatedSnap;\r\n    };\r\n\r\n    SVG.extend(SVG.Element, {\r\n        // Resize element with mouse\r\n        resize: function (options) {\r\n\r\n            (this.remember('_resizeHandler') || new ResizeHandler(this)).init(options || {});\r\n\r\n            return this;\r\n\r\n        }\r\n\r\n    });\r\n\r\n    SVG.Element.prototype.resize.defaults = {\r\n        snapToAngle: 0.1,       // Specifies the speed the rotation is happening when moving the mouse\r\n        snapToGrid: 1,          // Snaps to a grid of `snapToGrid` Pixels\r\n        constraint: {},         // keep element within constrained box\r\n        saveAspectRatio: false  // Save aspect ratio when resizing using lt, rt, rb or lb points\r\n    };\r\n\r\n}).call(this);\n}());\n","/*!\n* svg.select.js - An extension of svg.js which allows to select elements with mouse\n* @version 3.0.1\n* https://github.com/svgdotjs/svg.select.js\n*\n* @copyright Ulrich-Matthias Schäfer\n* @license MIT\n*/;\n;(function() {\n\"use strict\";\n\nfunction SelectHandler(el) {\r\n\r\n    this.el = el;\r\n    el.remember('_selectHandler', this);\r\n    this.pointSelection = {isSelected: false};\r\n    this.rectSelection = {isSelected: false};\r\n\r\n    // helper list with position settings of each type of point\r\n    this.pointsList = {\r\n      lt: [ 0, 0 ],\r\n      rt: [ 'width', 0 ],\r\n      rb: [ 'width', 'height' ],\r\n      lb: [ 0, 'height' ],\r\n      t: [ 'width', 0 ],\r\n      r: [ 'width', 'height' ],\r\n      b: [ 'width', 'height' ],\r\n      l: [ 0, 'height' ]\r\n    };\r\n\r\n    // helper function to get point coordinates based on settings above and an object (bbox in our case)\r\n    this.pointCoord = function (setting, object, isPointCentered) {\r\n      var coord = typeof setting !== 'string' ? setting : object[setting];\r\n      // Top, bottom, right and left points are placed in the center of element width/height\r\n      return isPointCentered ? coord / 2 : coord\r\n    }\r\n\r\n    this.pointCoords = function (point, object) {\r\n      var settings = this.pointsList[point];\r\n\r\n      return {\r\n        x: this.pointCoord(settings[0], object, (point === 't' || point === 'b')),\r\n        y: this.pointCoord(settings[1], object, (point === 'r' || point === 'l'))\r\n      }\r\n    }\r\n}\r\n\r\nSelectHandler.prototype.init = function (value, options) {\r\n\r\n    var bbox = this.el.bbox();\r\n    this.options = {};\r\n\r\n    // store defaults list of points in order to verify users config\r\n    var points = this.el.selectize.defaults.points;\r\n\r\n    // Merging the defaults and the options-object together\r\n    for (var i in this.el.selectize.defaults) {\r\n        this.options[i] = this.el.selectize.defaults[i];\r\n        if (options[i] !== undefined) {\r\n            this.options[i] = options[i];\r\n        }\r\n    }\r\n\r\n    // prepare & validate list of points to be added (or excluded)\r\n    var pointsLists = ['points', 'pointsExclude'];\r\n\r\n    for (var i in pointsLists) {\r\n      var option = this.options[pointsLists[i]];\r\n\r\n      if (typeof option === 'string') {\r\n        if (option.length > 0) {\r\n          // if set as comma separated string list => convert it into an array\r\n          option = option.split(/\\s*,\\s*/i);\r\n        } else {\r\n          option = [];\r\n        }\r\n      } else if (typeof option === 'boolean' && pointsLists[i] === 'points') {\r\n        // this is not needed, but let's have it for legacy support\r\n        option = option ? points : [];\r\n      }\r\n\r\n      this.options[pointsLists[i]] = option;\r\n    }\r\n\r\n    // intersect correct all points options with users config (exclude unwanted points)\r\n    // ES5 -> NO arrow functions nor Array.includes()\r\n    this.options.points = [ points, this.options.points ].reduce(\r\n      function (a, b) {\r\n        return a.filter(\r\n          function (c) {\r\n            return b.indexOf(c) > -1;\r\n          }\r\n        )\r\n      }\r\n    );\r\n\r\n    // exclude pointsExclude, if wanted\r\n    this.options.points = [ this.options.points, this.options.pointsExclude ].reduce(\r\n      function (a, b) {\r\n        return a.filter(\r\n          function (c) {\r\n            return b.indexOf(c) < 0;\r\n          }\r\n        )\r\n      }\r\n    );\r\n\r\n    this.parent = this.el.parent();\r\n    this.nested = (this.nested || this.parent.group());\r\n    this.nested.matrix(new SVG.Matrix(this.el).translate(bbox.x, bbox.y));\r\n\r\n    // When deepSelect is enabled and the element is a line/polyline/polygon, draw only points for moving\r\n    if (this.options.deepSelect && ['line', 'polyline', 'polygon'].indexOf(this.el.type) !== -1) {\r\n        this.selectPoints(value);\r\n    } else {\r\n        this.selectRect(value);\r\n    }\r\n\r\n    this.observe();\r\n    this.cleanup();\r\n\r\n};\r\n\r\nSelectHandler.prototype.selectPoints = function (value) {\r\n\r\n    this.pointSelection.isSelected = value;\r\n\r\n    // When set is already there we dont have to create one\r\n    if (this.pointSelection.set) {\r\n        return this;\r\n    }\r\n\r\n    // Create our set of elements\r\n    this.pointSelection.set = this.parent.set();\r\n    // draw the points and mark the element as selected\r\n    this.drawPoints();\r\n\r\n    return this;\r\n\r\n};\r\n\r\n// create the point-array which contains the 2 points of a line or simply the points-array of polyline/polygon\r\nSelectHandler.prototype.getPointArray = function () {\r\n    var bbox = this.el.bbox();\r\n\r\n    return this.el.array().valueOf().map(function (el) {\r\n        return [el[0] - bbox.x, el[1] - bbox.y];\r\n    });\r\n};\r\n\r\n// Draws a points\r\nSelectHandler.prototype.drawPoints = function () {\r\n\r\n    var _this = this, array = this.getPointArray();\r\n\r\n    // go through the array of points\r\n    for (var i = 0, len = array.length; i < len; ++i) {\r\n\r\n        var curriedEvent = (function (k) {\r\n            return function (ev) {\r\n                ev = ev || window.event;\r\n                ev.preventDefault ? ev.preventDefault() : ev.returnValue = false;\r\n                ev.stopPropagation();\r\n\r\n                var x = ev.pageX || ev.touches[0].pageX;\r\n                var y = ev.pageY || ev.touches[0].pageY;\r\n                _this.el.fire('point', {x: x, y: y, i: k, event: ev});\r\n            };\r\n        })(i);\r\n\r\n        // add every point to the set\r\n        // add css-classes and a touchstart-event which fires our event for moving points\r\n        var point = this.drawPoint(array[i][0], array[i][1])\r\n                        .addClass(this.options.classPoints)\r\n                        .addClass(this.options.classPoints + '_point')\r\n                        .on('touchstart', curriedEvent)\r\n                        .on('mousedown', curriedEvent)\r\n        this.pointSelection.set.add(point);\r\n    }\r\n};\r\n\r\n// The function to draw single point\r\nSelectHandler.prototype.drawPoint = function (cx, cy) {\r\n    var pointType = this.options.pointType;\r\n\r\n    switch (pointType) {\r\n        case 'circle':\r\n            return this.drawCircle(cx, cy);\r\n        case 'rect':\r\n            return this.drawRect(cx, cy);\r\n        default:\r\n            if (typeof pointType === 'function') {\r\n                return pointType.call(this, cx, cy);\r\n            }\r\n\r\n            throw new Error('Unknown ' + pointType + ' point type!');\r\n    }\r\n};\r\n\r\n// The function to draw the circle point\r\nSelectHandler.prototype.drawCircle = function (cx, cy) {\r\n    return this.nested.circle(this.options.pointSize)\r\n                      .center(cx, cy);\r\n};\r\n\r\n// The function to draw the rect point\r\nSelectHandler.prototype.drawRect = function (cx, cy) {\r\n    return this.nested.rect(this.options.pointSize, this.options.pointSize)\r\n                      .center(cx, cy);\r\n};\r\n\r\n// every time a point is moved, we have to update the positions of our point\r\nSelectHandler.prototype.updatePointSelection = function () {\r\n    var array = this.getPointArray();\r\n\r\n    this.pointSelection.set.each(function (i) {\r\n        if (this.cx() === array[i][0] && this.cy() === array[i][1]) {\r\n            return;\r\n        }\r\n        this.center(array[i][0], array[i][1]);\r\n    });\r\n};\r\n\r\nSelectHandler.prototype.updateRectSelection = function () {\r\n    var _this = this, bbox = this.el.bbox();\r\n\r\n    this.rectSelection.set.get(0).attr({\r\n        width: bbox.width,\r\n        height: bbox.height\r\n    });\r\n\r\n    // set.get(1) is always in the upper left corner. no need to move it\r\n    if (this.options.points.length) {\r\n      this.options.points.map(function (point, index) {\r\n        var coords = _this.pointCoords(point, bbox);\r\n\r\n        _this.rectSelection.set.get(index + 1).center(coords.x, coords.y);\r\n      });\r\n    }\r\n\r\n    if (this.options.rotationPoint) {\r\n        var length = this.rectSelection.set.length();\r\n\r\n        this.rectSelection.set.get(length - 1).center(bbox.width / 2, 20);\r\n    }\r\n};\r\n\r\nSelectHandler.prototype.selectRect = function (value) {\r\n\r\n    var _this = this, bbox = this.el.bbox();\r\n\r\n    this.rectSelection.isSelected = value;\r\n\r\n    // when set is already p\r\n    this.rectSelection.set = this.rectSelection.set || this.parent.set();\r\n\r\n    // helperFunction to create a mouse-down function which triggers the event specified in `eventName`\r\n    function getMoseDownFunc(eventName) {\r\n        return function (ev) {\r\n            ev = ev || window.event;\r\n            ev.preventDefault ? ev.preventDefault() : ev.returnValue = false;\r\n            ev.stopPropagation();\r\n\r\n            var x = ev.pageX || ev.touches[0].pageX;\r\n            var y = ev.pageY || ev.touches[0].pageY;\r\n            _this.el.fire(eventName, {x: x, y: y, event: ev});\r\n        };\r\n    }\r\n\r\n    // create the selection-rectangle and add the css-class\r\n    if (!this.rectSelection.set.get(0)) {\r\n        this.rectSelection.set.add(this.nested.rect(bbox.width, bbox.height).addClass(this.options.classRect));\r\n    }\r\n\r\n    // Draw Points at the edges, if enabled\r\n    if (this.options.points.length && this.rectSelection.set.length() < 2) {\r\n        var ename =\"touchstart\", mname = \"mousedown\";\r\n\r\n        this.options.points.map(function (point, index) {\r\n            var coords = _this.pointCoords(point, bbox);\r\n\r\n            var pointElement = _this.drawPoint(coords.x, coords.y)\r\n                                    .attr('class', _this.options.classPoints + '_' + point)\r\n                                    .on(mname, getMoseDownFunc(point))\r\n                                    .on(ename, getMoseDownFunc(point));\r\n            _this.rectSelection.set.add(pointElement);\r\n        });\r\n\r\n        this.rectSelection.set.each(function () {\r\n            this.addClass(_this.options.classPoints);\r\n        });\r\n    }\r\n\r\n    // draw rotationPint, if enabled\r\n    if (this.options.rotationPoint && ((this.options.points && !this.rectSelection.set.get(9)) || (!this.options.points && !this.rectSelection.set.get(1)))) {\r\n\r\n        var curriedEvent = function (ev) {\r\n            ev = ev || window.event;\r\n            ev.preventDefault ? ev.preventDefault() : ev.returnValue = false;\r\n            ev.stopPropagation();\r\n\r\n            var x = ev.pageX || ev.touches[0].pageX;\r\n            var y = ev.pageY || ev.touches[0].pageY;\r\n            _this.el.fire('rot', {x: x, y: y, event: ev});\r\n        };\r\n\r\n        var pointElement = this.drawPoint(bbox.width / 2, 20)\r\n                              .attr('class', this.options.classPoints + '_rot')\r\n                              .on(\"touchstart\", curriedEvent)\r\n                              .on(\"mousedown\", curriedEvent);\r\n        this.rectSelection.set.add(pointElement);\r\n    }\r\n\r\n};\r\n\r\nSelectHandler.prototype.handler = function () {\r\n\r\n    var bbox = this.el.bbox();\r\n    this.nested.matrix(new SVG.Matrix(this.el).translate(bbox.x, bbox.y));\r\n\r\n    if (this.rectSelection.isSelected) {\r\n        this.updateRectSelection();\r\n    }\r\n\r\n    if (this.pointSelection.isSelected) {\r\n        this.updatePointSelection();\r\n    }\r\n\r\n};\r\n\r\nSelectHandler.prototype.observe = function () {\r\n    var _this = this;\r\n\r\n    if (MutationObserver) {\r\n        if (this.rectSelection.isSelected || this.pointSelection.isSelected) {\r\n            this.observerInst = this.observerInst || new MutationObserver(function () {\r\n                _this.handler();\r\n            });\r\n            this.observerInst.observe(this.el.node, {attributes: true});\r\n        } else {\r\n            try {\r\n                this.observerInst.disconnect();\r\n                delete this.observerInst;\r\n            } catch (e) {\r\n            }\r\n        }\r\n    } else {\r\n        this.el.off('DOMAttrModified.select');\r\n\r\n        if (this.rectSelection.isSelected || this.pointSelection.isSelected) {\r\n            this.el.on('DOMAttrModified.select', function () {\r\n                _this.handler();\r\n            });\r\n        }\r\n    }\r\n};\r\n\r\nSelectHandler.prototype.cleanup = function () {\r\n\r\n    //var _this = this;\r\n\r\n    if (!this.rectSelection.isSelected && this.rectSelection.set) {\r\n        // stop watching the element, remove the selection\r\n        this.rectSelection.set.each(function () {\r\n            this.remove();\r\n        });\r\n\r\n        this.rectSelection.set.clear();\r\n        delete this.rectSelection.set;\r\n    }\r\n\r\n    if (!this.pointSelection.isSelected && this.pointSelection.set) {\r\n        // Remove all points, clear the set, stop watching the element\r\n        this.pointSelection.set.each(function () {\r\n            this.remove();\r\n        });\r\n\r\n        this.pointSelection.set.clear();\r\n        delete this.pointSelection.set;\r\n    }\r\n\r\n    if (!this.pointSelection.isSelected && !this.rectSelection.isSelected) {\r\n        this.nested.remove();\r\n        delete this.nested;\r\n\r\n    }\r\n};\r\n\r\n\r\nSVG.extend(SVG.Element, {\r\n    // Select element with mouse\r\n    selectize: function (value, options) {\r\n\r\n        // Check the parameters and reassign if needed\r\n        if (typeof value === 'object') {\r\n            options = value;\r\n            value = true;\r\n        }\r\n\r\n        var selectHandler = this.remember('_selectHandler') || new SelectHandler(this);\r\n\r\n        selectHandler.init(value === undefined ? true : value, options || {});\r\n\r\n        return this;\r\n\r\n    }\r\n});\r\n\r\nSVG.Element.prototype.selectize.defaults = {\r\n    points: ['lt', 'rt', 'rb', 'lb', 't', 'r', 'b', 'l'],    // which points to draw, default all\r\n    pointsExclude: [],                       // easier option if to exclude few than rewrite all\r\n    classRect: 'svg_select_boundingRect',    // Css-class added to the rect\r\n    classPoints: 'svg_select_points',        // Css-class added to the points\r\n    pointSize: 7,                            // size of point\r\n    rotationPoint: true,                     // If true, rotation point is drawn. Needed for rotation!\r\n    deepSelect: false,                       // If true, moving of single points is possible (only line, polyline, polyon)\r\n    pointType: 'circle'                      // Point type: circle or rect, default circle\r\n};\n}());\n","/*! svg.draw.js - v2.0.3 - 2017-06-19\r\n* https://github.com/svgdotjs/svg.draw.js\r\n* Copyright (c) 2017 Ulrich-Matthias Schäfer; Licensed MIT */\r\n\r\n;(function () {\r\n    // Our Object which manages drawing\r\n    function PaintHandler(el, event, options) {\r\n\r\n        this.el = el;\r\n        el.remember('_paintHandler', this);\r\n    \r\n        var _this = this,\r\n            plugin = this.getPlugin();\r\n\r\n        this.parent = el.parent(SVG.Nested) || el.parent(SVG.Doc);\r\n        this.p = this.parent.node.createSVGPoint(); // Helping point for coord transformation\r\n        this.m = null;  // transformation matrix. We get it when drawing starts\r\n        this.startPoint = null;\r\n        this.lastUpdateCall = null;\r\n        this.options = {};\r\n\r\n        // Merge options and defaults\r\n        for (var i in this.el.draw.defaults) {\r\n            this.options[i] = this.el.draw.defaults[i];\r\n            if (typeof options[i] !== 'undefined') {\r\n                this.options[i] = options[i];\r\n            }\r\n        }\r\n        \r\n        if(plugin.point) {\r\n          plugin['pointPlugin'] = plugin.point;\r\n          delete plugin.point;\r\n        }\r\n        \r\n        // Import all methods from plugin into object\r\n        for (var i in plugin){\r\n            this[i] = plugin[i];\r\n        }\r\n        \r\n        // When we got an event, we use this for start, otherwise we use the click-event as default\r\n        if (!event) {\r\n            this.parent.on('click.draw', function (e) {\r\n                _this.start(e);\r\n            });\r\n\r\n        }\r\n\r\n    }\r\n\r\n    PaintHandler.prototype.transformPoint = function(x, y){\r\n\r\n        this.p.x = x - (this.offset.x - window.pageXOffset);\r\n        this.p.y = y - (this.offset.y - window.pageYOffset);\r\n        \r\n        return this.p.matrixTransform(this.m);\r\n    \r\n    }\r\n    \r\n    PaintHandler.prototype.start = function (event) {\r\n    \r\n        var _this = this;\r\n    \r\n        // get the current transform matrix from screen to element (offset corrected)\r\n        this.m = this.el.node.getScreenCTM().inverse();\r\n\r\n        // we save the current scrolling-offset here\r\n        this.offset = { x: window.pageXOffset, y: window.pageYOffset };\r\n\r\n        // we want to snap in screen-coords, so we have to scale the snapToGrid accordingly\r\n        this.options.snapToGrid *= Math.sqrt(this.m.a * this.m.a + this.m.b * this.m.b)\r\n\r\n        // save the startpoint\r\n        this.startPoint = this.snapToGrid(this.transformPoint(event.clientX, event.clientY));\r\n\r\n        // the plugin may do some initial work\r\n        if(this.init){ this.init(event); }\r\n\r\n        // Fire our `drawstart`-event. We send the offset-corrected cursor-position along\r\n        this.el.fire('drawstart', {event:event, p:this.p, m:this.m});\r\n\r\n        // We need to bind the update-function to the mousemove event to keep track of the cursor\r\n        SVG.on(window, 'mousemove.draw', function (e) {\r\n            _this.update(e);\r\n        });\r\n\r\n        // Every consecutive call to start should map to point now\r\n        this.start = this.point;\r\n\r\n\r\n    };\r\n\r\n    // This function draws a point if the element is a polyline or polygon\r\n    // Otherwise it will just stop drawing the shape cause we are done\r\n    PaintHandler.prototype.point = function (event) {\r\n        if (this.point != this.start) return this.start(event);\r\n        \r\n        if (this.pointPlugin) {\r\n            return this.pointPlugin(event);\r\n        }\r\n    \r\n        // If this function is not overwritten we just call stop\r\n        this.stop(event);\r\n    };\r\n\r\n\r\n    // The stop-function does the cleanup work\r\n    PaintHandler.prototype.stop = function (event) {\r\n        if (event) {\r\n            this.update(event);\r\n        }\r\n        \r\n        // Plugin may want to clean something\r\n        if(this.clean){ this.clean(); }\r\n\r\n        // Unbind from all events\r\n        SVG.off(window, 'mousemove.draw');\r\n        this.parent.off('click.draw');\r\n\r\n        // remove Refernce to PaintHandler\r\n        this.el.forget('_paintHandler');\r\n\r\n        // overwrite draw-function since we never need it again for this element\r\n        this.el.draw = function () {\r\n        };\r\n\r\n        // Fire the `drawstop`-event\r\n        this.el.fire('drawstop');\r\n    };\r\n\r\n    // Updates the element while moving the cursor\r\n    PaintHandler.prototype.update = function (event) {\r\n\r\n        if(!event && this.lastUpdateCall){\r\n            event = this.lastUpdateCall;\r\n        }\r\n        \r\n        this.lastUpdateCall = event;\r\n    \r\n        // Call the calc-function which calculates the new position and size\r\n        this.calc(event);\r\n\r\n        // Fire the `drawupdate`-event\r\n        this.el.fire('drawupdate', {event:event, p:this.p, m:this.m});\r\n    };\r\n\r\n    // Called from outside. Finishs a poly-element\r\n    PaintHandler.prototype.done = function () {\r\n        this.calc();\r\n        this.stop();\r\n\r\n        this.el.fire('drawdone');\r\n    };\r\n\r\n    // Called from outside. Cancels a poly-element\r\n    PaintHandler.prototype.cancel = function () {\r\n        // stop drawing and remove the element\r\n        this.stop();\r\n        this.el.remove();\r\n\r\n        this.el.fire('drawcancel');\r\n    };\r\n\r\n    // Calculate the corrected position when using `snapToGrid`\r\n    PaintHandler.prototype.snapToGrid = function (draw) {\r\n\r\n        var temp = null;\r\n\r\n        // An array was given. Loop through every element\r\n        if (draw.length) {\r\n            temp = [draw[0] % this.options.snapToGrid, draw[1] % this.options.snapToGrid];\r\n            draw[0] -= temp[0] < this.options.snapToGrid / 2 ? temp[0] : temp[0] - this.options.snapToGrid;\r\n            draw[1] -= temp[1] < this.options.snapToGrid / 2 ? temp[1] : temp[1] - this.options.snapToGrid;\r\n            return draw;\r\n        }\r\n\r\n        // Properties of element were given. Snap them all\r\n        for (var i in draw) {\r\n            temp = draw[i] % this.options.snapToGrid;\r\n            draw[i] -= (temp < this.options.snapToGrid / 2 ? temp : temp - this.options.snapToGrid) + (temp < 0 ? this.options.snapToGrid : 0);\r\n        }\r\n\r\n        return draw;\r\n    };\r\n\r\n    PaintHandler.prototype.param = function (key, value) {\r\n        this.options[key] = value === null ? this.el.draw.defaults[key] : value;\r\n        this.update();\r\n    };\r\n\r\n    // Returns the plugin\r\n    PaintHandler.prototype.getPlugin = function () {\r\n        return this.el.draw.plugins[this.el.type];\r\n    };\r\n\r\n    SVG.extend(SVG.Element, {\r\n        // Draw element with mouse\r\n        draw: function (event, options, value) {\r\n\r\n            // sort the parameters\r\n            if (!(event instanceof Event || typeof event === 'string')) {\r\n                options = event;\r\n                event = null;\r\n            }\r\n\r\n            // get the old Handler or create a new one from event and options\r\n            var paintHandler = this.remember('_paintHandler') || new PaintHandler(this, event, options || {});\r\n\r\n            // When we got an event we have to start/continue drawing\r\n            if (event instanceof Event) {\r\n                paintHandler['start'](event);\r\n            }\r\n\r\n            // if event is located in our PaintHandler we handle it as method\r\n            if (paintHandler[event]) {\r\n                paintHandler[event](options, value);\r\n            }\r\n\r\n            return this;\r\n        }\r\n\r\n    });\r\n\r\n    // Default values. Can be changed for the whole project if needed\r\n    SVG.Element.prototype.draw.defaults = {\r\n        snapToGrid: 1        // Snaps to a grid of `snapToGrid` px\r\n    };\r\n\r\n    SVG.Element.prototype.draw.extend = function(name, obj){\r\n\r\n        var plugins = {};\r\n        if(typeof name === 'string'){\r\n            plugins[name] = obj;\r\n        }else{\r\n            plugins = name;\r\n        }\r\n\r\n        for(var shapes in plugins){\r\n            var shapesArr = shapes.trim().split(/\\s+/);\r\n\r\n            for(var i in shapesArr){\r\n                SVG.Element.prototype.draw.plugins[shapesArr[i]] = plugins[shapes];\r\n            }\r\n        }\r\n\r\n    };\r\n\r\n    // Container for all types not specified here\r\n    SVG.Element.prototype.draw.plugins = {};\r\n\r\n    SVG.Element.prototype.draw.extend('rect image', {\r\n    \r\n        init:function(e){\r\n\r\n            var p = this.startPoint;\r\n            \r\n            this.el.attr({ x: p.x, y: p.y, height: 0, width: 0 });\r\n        },\r\n        \r\n        calc:function (e) {\r\n\r\n            var rect = {\r\n                x: this.startPoint.x,\r\n                y: this.startPoint.y\r\n            },  p = this.transformPoint(e.clientX, e.clientY);\r\n\r\n            rect.width = p.x - rect.x;\r\n            rect.height = p.y - rect.y;\r\n\r\n            // Snap the params to the grid we specified\r\n            this.snapToGrid(rect);\r\n\r\n            // When width is less than zero, we have to draw to the left\r\n            // which means we have to move the start-point to the left\r\n            if (rect.width < 0) {\r\n                rect.x = rect.x + rect.width;\r\n                rect.width = -rect.width;\r\n            }\r\n\r\n            // ...same with height\r\n            if (rect.height < 0) {\r\n                rect.y = rect.y + rect.height;\r\n                rect.height = -rect.height;\r\n            }\r\n\r\n            // draw the element\r\n            this.el.attr(rect);\r\n        }\r\n    \r\n    });\r\n\r\n\r\n    SVG.Element.prototype.draw.extend('line polyline polygon', {\r\n\r\n        init:function(e){\r\n            // When we draw a polygon, we immediately need 2 points.\r\n            // One start-point and one point at the mouse-position\r\n\r\n            this.set = new SVG.Set();\r\n\r\n            var p = this.startPoint,\r\n                arr = [\r\n                    [p.x, p.y],\r\n                    [p.x, p.y]\r\n                ];\r\n\r\n            this.el.plot(arr);\r\n\r\n            // We draw little circles around each point\r\n            // This is absolutely not needed and maybe removed in a later release\r\n            this.drawCircles();\r\n\r\n        },\r\n\r\n\r\n        // The calc-function sets the position of the last point to the mouse-position (with offset ofc)\r\n        calc:function (e) {\r\n            var arr = this.el.array().valueOf();\r\n            arr.pop();\r\n\r\n            if (e) {\r\n                var p = this.transformPoint(e.clientX, e.clientY);\r\n                arr.push(this.snapToGrid([p.x, p.y]));\r\n            }\r\n\r\n            this.el.plot(arr);\r\n\r\n        },\r\n\r\n        point:function(e){\r\n\r\n            if (this.el.type.indexOf('poly') > -1) {\r\n                // Add the new Point to the point-array\r\n                var p = this.transformPoint(e.clientX, e.clientY),\r\n                    arr = this.el.array().valueOf();\r\n\r\n                arr.push(this.snapToGrid([p.x, p.y]));\r\n\r\n                this.el.plot(arr);\r\n                this.drawCircles();\r\n\r\n                // Fire the `drawpoint`-event, which holds the coords of the new Point\r\n                this.el.fire('drawpoint', {event:e, p:{x:p.x, y:p.y}, m:this.m});\r\n\r\n                return;\r\n            }\r\n\r\n            // We are done, if the element is no polyline or polygon\r\n            this.stop(e);\r\n\r\n        },\r\n\r\n        clean:function(){\r\n\r\n            // Remove all circles\r\n            this.set.each(function () {\r\n                this.remove();\r\n            });\r\n\r\n            this.set.clear();\r\n\r\n            delete this.set;\r\n\r\n        },\r\n\r\n        drawCircles:function () {\r\n            var array = this.el.array().valueOf()\r\n\r\n            this.set.each(function () {\r\n                this.remove();\r\n            });\r\n\r\n            this.set.clear();\r\n\r\n            for (var i = 0; i < array.length; ++i) {\r\n\r\n                this.p.x = array[i][0]\r\n                this.p.y = array[i][1]\r\n\r\n                var p = this.p.matrixTransform(this.parent.node.getScreenCTM().inverse().multiply(this.el.node.getScreenCTM()));\r\n\r\n                this.set.add(this.parent.circle(5).stroke({width: 1}).fill('#ccc').center(p.x, p.y));\r\n            }\r\n        }\r\n\r\n    });\r\n\r\n    SVG.Element.prototype.draw.extend('circle', {\r\n    \r\n        init:function(e){\r\n        \r\n            var p = this.startPoint;\r\n\r\n            this.el.attr({ cx: p.x, cy: p.y, r: 1 });\r\n        },\r\n\r\n        // We determine the radius by the cursor position\r\n        calc:function (e) {\r\n            \r\n            var p = this.transformPoint(e.clientX, e.clientY),\r\n                circle = {\r\n                    cx: this.startPoint.x,\r\n                    cy: this.startPoint.y,\r\n\r\n                    // calculating the radius\r\n                    r: Math.sqrt(\r\n                        (p.x - this.startPoint.x) * (p.x - this.startPoint.x) +\r\n                        (p.y - this.startPoint.y) * (p.y - this.startPoint.y)\r\n                    )\r\n            };\r\n            \r\n            this.snapToGrid(circle);\r\n            this.el.attr(circle);\r\n        }\r\n        \r\n    });\r\n\r\n    SVG.Element.prototype.draw.extend('ellipse', {\r\n    \r\n        init:function(e){\r\n            // We start with a circle with radius 1 at the position of the cursor\r\n            var p = this.startPoint;\r\n\r\n            this.el.attr({ cx: p.x, cy: p.y, rx: 1, ry: 1 });\r\n            \r\n        },\r\n\r\n        calc:function (e) {\r\n            var p = this.transformPoint(e.clientX, e.clientY);\r\n        \r\n            var ellipse = {\r\n                cx: this.startPoint.x,\r\n                cy: this.startPoint.y,\r\n                rx: Math.abs(p.x - this.startPoint.x),\r\n                ry: Math.abs(p.y - this.startPoint.y)\r\n            };\r\n            \r\n            this.snapToGrid(ellipse);\r\n            this.el.attr(ellipse);\r\n        }\r\n        \r\n    });\r\n}).call(this);","/*\n* Copyright (C) 2019 Intel Corporation\n* SPDX-License-Identifier: MIT\n*/\n\nexport interface Master {\n    subscribe(listener: Listener): void;\n    unsubscribe(listener: Listener): void;\n    unsubscribeAll(): void;\n    notify(reason: string): void;\n}\n\nexport interface Listener {\n    notify(master: Master, reason: string): void;\n}\n\nexport class MasterImpl implements Master {\n    private listeners: Listener[];\n\n    public constructor() {\n        this.listeners = [];\n    }\n\n    public subscribe(listener: Listener): void {\n        this.listeners.push(listener);\n    }\n\n    public unsubscribe(listener: Listener): void {\n        for (let i = 0; i < this.listeners.length; i++) {\n            if (this.listeners[i] === listener) {\n                this.listeners.splice(i, 1);\n            }\n        }\n    }\n\n    public unsubscribeAll(): void {\n        this.listeners = [];\n    }\n\n    public notify(reason: string): void {\n        for (const listener of this.listeners) {\n            listener.notify(this, reason);\n        }\n    }\n}\n","/*\n* Copyright (C) 2019 Intel Corporation\n* SPDX-License-Identifier: MIT\n*/\n\n// Disable till full implementation\n/* eslint class-methods-use-this: \"off\" */\n\nimport { MasterImpl } from './master';\n\nexport interface Size {\n    width: number;\n    height: number;\n}\n\nexport interface Position {\n    x: number;\n    y: number;\n}\n\nexport interface Geometry {\n    image: Size;\n    canvas: Size;\n    grid: Size;\n    top: number;\n    left: number;\n    scale: number;\n    offset: number;\n    angle: number;\n}\n\nexport interface FocusData {\n    clientID: number;\n    padding: number;\n}\n\nexport interface ActiveElement {\n    clientID: number;\n    attributeID: number;\n}\n\nexport interface DrawData {\n    enabled: boolean;\n    shapeType?: string;\n    numberOfPoints?: number;\n    initialState?: any;\n    crosshair?: boolean;\n}\n\nexport enum FrameZoom {\n    MIN = 0.1,\n    MAX = 10,\n}\n\nexport enum Rotation {\n    ANTICLOCKWISE90,\n    CLOCKWISE90,\n}\n\nexport enum UpdateReasons {\n    IMAGE = 'image',\n    OBJECTS = 'objects',\n    ZOOM = 'zoom',\n    FIT = 'fit',\n    MOVE = 'move',\n    GRID = 'grid',\n    FOCUS = 'focus',\n    ACTIVATE = 'activate',\n    DRAW = 'draw',\n}\n\nexport interface CanvasModel extends MasterImpl {\n    readonly image: string;\n    readonly objects: any[];\n    readonly gridSize: Size;\n    readonly focusData: FocusData;\n    readonly activeElement: ActiveElement;\n    readonly objectStateClass: any;\n    readonly drawData: DrawData;\n    geometry: Geometry;\n\n    zoom(x: number, y: number, direction: number): void;\n    move(topOffset: number, leftOffset: number): void;\n\n    setup(frameData: any, objectStates: any[]): void;\n    activate(clientID: number, attributeID: number): void;\n    rotate(rotation: Rotation, remember: boolean): void;\n    focus(clientID: number, padding: number): void;\n    fit(): void;\n    grid(stepX: number, stepY: number): void;\n\n    draw(drawData: DrawData): void;\n    split(enabled: boolean): void;\n    group(enabled: boolean): void;\n    merge(enabled: boolean): void;\n\n    cancel(): void;\n}\n\nexport class CanvasModelImpl extends MasterImpl implements CanvasModel {\n    private data: {\n        ObjectStateClass: any;\n        activeElement: ActiveElement;\n        angle: number;\n        canvasSize: Size;\n        drawData: DrawData;\n        image: string;\n        imageOffset: number;\n        imageSize: Size;\n        focusData: FocusData;\n        gridSize: Size;\n        left: number;\n        objects: any[];\n        rememberAngle: boolean;\n        scale: number;\n        top: number;\n    };\n\n    public constructor(ObjectStateClass: any) {\n        super();\n\n        this.data = {\n            activeElement: {\n                clientID: null,\n                attributeID: null,\n            },\n            angle: 0,\n            canvasSize: {\n                height: 0,\n                width: 0,\n            },\n            drawData: {\n                enabled: false,\n                shapeType: null,\n                numberOfPoints: null,\n                initialState: null,\n            },\n            image: '',\n            imageOffset: 0,\n            imageSize: {\n                height: 0,\n                width: 0,\n            },\n            focusData: {\n                clientID: 0,\n                padding: 0,\n            },\n            gridSize: {\n                height: 100,\n                width: 100,\n            },\n            left: 0,\n            objects: [],\n            ObjectStateClass,\n            rememberAngle: false,\n            scale: 1,\n            top: 0,\n        };\n    }\n\n    public zoom(x: number, y: number, direction: number): void {\n        const oldScale: number = this.data.scale;\n        const newScale: number = direction > 0 ? oldScale * 6 / 5 : oldScale * 5 / 6;\n        this.data.scale = Math.min(Math.max(newScale, FrameZoom.MIN), FrameZoom.MAX);\n\n        const { angle } = this.data;\n\n        const mutiplier = Math.sin(angle * Math.PI / 180) + Math.cos(angle * Math.PI / 180);\n        if ((angle / 90) % 2) {\n            // 90, 270, ..\n            this.data.top += mutiplier * ((x - this.data.imageSize.width / 2)\n                * (oldScale / this.data.scale - 1)) * this.data.scale;\n            this.data.left -= mutiplier * ((y - this.data.imageSize.height / 2)\n                * (oldScale / this.data.scale - 1)) * this.data.scale;\n        } else {\n            this.data.left += mutiplier * ((x - this.data.imageSize.width / 2)\n                * (oldScale / this.data.scale - 1)) * this.data.scale;\n            this.data.top += mutiplier * ((y - this.data.imageSize.height / 2)\n                * (oldScale / this.data.scale - 1)) * this.data.scale;\n        }\n\n        this.notify(UpdateReasons.ZOOM);\n    }\n\n    public move(topOffset: number, leftOffset: number): void {\n        this.data.top += topOffset;\n        this.data.left += leftOffset;\n        this.notify(UpdateReasons.MOVE);\n    }\n\n    public setup(frameData: any, objectStates: any[]): void {\n        frameData.data(\n            (): void => {\n                this.data.image = '';\n                this.notify(UpdateReasons.IMAGE);\n            },\n        ).then((data: string): void => {\n            this.data.imageSize = {\n                height: (frameData.height as number),\n                width: (frameData.width as number),\n            };\n\n            if (!this.data.rememberAngle) {\n                this.data.angle = 0;\n            }\n\n            this.data.image = data;\n            this.notify(UpdateReasons.IMAGE);\n            this.data.objects = objectStates;\n            this.notify(UpdateReasons.OBJECTS);\n        }).catch((exception: any): void => {\n            throw exception;\n        });\n    }\n\n    public activate(clientID: number, attributeID: number): void {\n        this.data.activeElement = {\n            clientID,\n            attributeID,\n        };\n\n        this.notify(UpdateReasons.ACTIVATE);\n    }\n\n    public rotate(rotation: Rotation, remember: boolean = false): void {\n        if (rotation === Rotation.CLOCKWISE90) {\n            this.data.angle += 90;\n        } else {\n            this.data.angle -= 90;\n        }\n\n        this.data.angle %= 360;\n        this.data.rememberAngle = remember;\n        this.fit();\n    }\n\n    public focus(clientID: number, padding: number): void {\n        this.data.focusData = {\n            clientID,\n            padding,\n        };\n\n        this.notify(UpdateReasons.FOCUS);\n    }\n\n    public fit(): void {\n        const { angle } = this.data;\n\n        if ((angle / 90) % 2) {\n            // 90, 270, ..\n            this.data.scale = Math.min(\n                this.data.canvasSize.width / this.data.imageSize.height,\n                this.data.canvasSize.height / this.data.imageSize.width,\n            );\n        } else {\n            this.data.scale = Math.min(\n                this.data.canvasSize.width / this.data.imageSize.width,\n                this.data.canvasSize.height / this.data.imageSize.height,\n            );\n        }\n\n        this.data.scale = Math.min(\n            Math.max(this.data.scale, FrameZoom.MIN),\n            FrameZoom.MAX,\n        );\n\n        this.data.top = (this.data.canvasSize.height / 2 - this.data.imageSize.height / 2);\n        this.data.left = (this.data.canvasSize.width / 2 - this.data.imageSize.width / 2);\n\n        this.notify(UpdateReasons.FIT);\n    }\n\n    public grid(stepX: number, stepY: number): void {\n        this.data.gridSize = {\n            height: stepY,\n            width: stepX,\n        };\n\n        this.notify(UpdateReasons.GRID);\n    }\n\n    public draw(drawData: DrawData): void {\n        if (drawData.enabled) {\n            if (this.data.drawData.enabled) {\n                throw new Error('Drawing has been already started');\n            } else if (!drawData.shapeType) {\n                throw new Error('A shape type is not specified');\n            } else if (typeof (drawData.numberOfPoints) !== 'undefined') {\n                if (drawData.shapeType === 'polygon' && drawData.numberOfPoints < 3) {\n                    throw new Error('A polygon consists of at least 3 points');\n                } else if (drawData.shapeType === 'polyline' && drawData.numberOfPoints < 2) {\n                    throw new Error('A polyline consists of at least 2 points');\n                }\n            }\n        }\n\n        this.data.drawData = Object.assign({}, drawData);\n        this.notify(UpdateReasons.DRAW);\n    }\n\n    public split(enabled: boolean): any {\n        return enabled;\n    }\n\n    public group(enabled: boolean): any {\n        return enabled;\n    }\n\n    public merge(enabled: boolean): any {\n        return enabled;\n    }\n\n    public cancel(): void {\n        console.log('hello');\n    }\n\n    public get geometry(): Geometry {\n        return {\n            angle: this.data.angle,\n            canvas: Object.assign({}, this.data.canvasSize),\n            image: Object.assign({}, this.data.imageSize),\n            grid: Object.assign({}, this.data.gridSize),\n            left: this.data.left,\n            offset: this.data.imageOffset,\n            scale: this.data.scale,\n            top: this.data.top,\n        };\n    }\n\n    public set geometry(geometry: Geometry) {\n        this.data.angle = geometry.angle;\n        this.data.canvasSize = Object.assign({}, geometry.canvas);\n        this.data.imageSize = Object.assign({}, geometry.image);\n        this.data.gridSize = Object.assign({}, geometry.grid);\n        this.data.left = geometry.left;\n        this.data.top = geometry.top;\n        this.data.imageOffset = geometry.offset;\n        this.data.scale = geometry.scale;\n\n        this.data.imageOffset = Math.floor(Math.max(\n            this.data.canvasSize.height / FrameZoom.MIN,\n            this.data.canvasSize.width / FrameZoom.MIN,\n        ));\n    }\n\n    public get image(): string {\n        return this.data.image;\n    }\n\n    public get objects(): any[] {\n        return this.data.objects;\n    }\n\n    public get gridSize(): Size {\n        return Object.assign({}, this.data.gridSize);\n    }\n\n    public get focusData(): FocusData {\n        return Object.assign({}, this.data.focusData);\n    }\n\n    public get activeElement(): ActiveElement {\n        return Object.assign({}, this.data.activeElement);\n    }\n\n    public get objectStateClass(): any {\n        return this.data.ObjectStateClass;\n    }\n\n    public get drawData(): DrawData {\n        return Object.assign({}, this.data.drawData);\n    }\n}\n","/*\n* Copyright (C) 2019 Intel Corporation\n* SPDX-License-Identifier: MIT\n*/\n\nimport {\n    CanvasModel,\n    Geometry,\n    Position,\n    FocusData,\n    ActiveElement,\n    DrawData,\n} from './canvasModel';\n\nexport interface CanvasController {\n    readonly objects: any[];\n    readonly focusData: FocusData;\n    readonly activeElement: ActiveElement;\n    readonly objectStateClass: any;\n    readonly drawData: DrawData;\n    geometry: Geometry;\n\n    zoom(x: number, y: number, direction: number): void;\n    draw(drawData: DrawData): void;\n    enableDrag(x: number, y: number): void;\n    drag(x: number, y: number): void;\n    disableDrag(): void;\n\n    fit(): void;\n}\n\nexport class CanvasControllerImpl implements CanvasController {\n    private model: CanvasModel;\n    private lastDragPosition: Position;\n    private isDragging: boolean;\n\n    public constructor(model: CanvasModel) {\n        this.model = model;\n    }\n\n    public zoom(x: number, y: number, direction: number): void {\n        this.model.zoom(x, y, direction);\n    }\n\n    public fit(): void {\n        this.model.fit();\n    }\n\n    public enableDrag(x: number, y: number): void {\n        this.lastDragPosition = {\n            x,\n            y,\n        };\n        this.isDragging = true;\n    }\n\n    public drag(x: number, y: number): void {\n        if (this.isDragging) {\n            const topOffset: number = y - this.lastDragPosition.y;\n            const leftOffset: number = x - this.lastDragPosition.x;\n            this.lastDragPosition = {\n                x,\n                y,\n            };\n            this.model.move(topOffset, leftOffset);\n        }\n    }\n\n    public disableDrag(): void {\n        this.isDragging = false;\n    }\n\n    public draw(drawData: DrawData): void {\n        this.model.draw(drawData);\n    }\n\n    public get geometry(): Geometry {\n        return this.model.geometry;\n    }\n\n    public set geometry(geometry: Geometry) {\n        this.model.geometry = geometry;\n    }\n\n    public get objects(): any[] {\n        return this.model.objects;\n    }\n\n    public get focusData(): FocusData {\n        return this.model.focusData;\n    }\n\n    public get activeElement(): ActiveElement {\n        return this.model.activeElement;\n    }\n\n    public get objectStateClass(): any {\n        return this.model.objectStateClass;\n    }\n\n    public get drawData(): DrawData {\n        return this.model.drawData;\n    }\n}\n","/*\n* Copyright (C) 2019 Intel Corporation\n* SPDX-License-Identifier: MIT\n*/\n\nconst BASE_STROKE_WIDTH = 2;\nconst BASE_POINT_SIZE = 8;\nconst TEXT_MARGIN = 10;\nconst AREA_THRESHOLD = 9;\nconst SIZE_THRESHOLD = 3;\n\nexport default {\n    BASE_STROKE_WIDTH,\n    BASE_POINT_SIZE,\n    TEXT_MARGIN,\n    AREA_THRESHOLD,\n    SIZE_THRESHOLD,\n};\n","import * as SVG from 'svg.js';\n\n/* eslint-disable */\n\nimport 'svg.draggable.js';\nimport 'svg.resize.js';\nimport 'svg.select.js';\nimport 'svg.draw.js';\n\n// Update constructor\nconst originalDraw = SVG.Element.prototype.draw;\nSVG.Element.prototype.draw = function constructor(...args: any): any {\n    let handler = this.remember('_paintHandler');\n    if (!handler) {\n        originalDraw.call(this, ...args);\n        handler = this.remember('_paintHandler');\n        handler.set = new SVG.Set();\n    } else {\n        originalDraw.call(this, ...args);\n    }\n\n    return this;\n};\nfor (const key of Object.keys(originalDraw)) {\n    SVG.Element.prototype.draw[key] = originalDraw[key];\n}\n\n// Create undo for polygones and polylines\nfunction undo(): void {\n    if (this.set.length()) {\n        this.set.members.splice(-1, 1)[0].remove();\n        this.el.array().value.splice(-2, 1);\n        this.el.plot(this.el.array());\n        this.el.fire('undopoint');\n    }\n}\n\nSVG.Element.prototype.draw.extend('polyline', Object.assign({},\n    SVG.Element.prototype.draw.plugins.polyline,\n    {\n        undo: undo,\n    },\n));\n\nSVG.Element.prototype.draw.extend('polygon', Object.assign({},\n    SVG.Element.prototype.draw.plugins.polygon,\n    {\n        undo: undo,\n    },\n));\n\n\n// Create transform for rect, polyline and polygon\nfunction transform(): void {\n    this.m = this.el.node.getScreenCTM().inverse();\n    this.offset = { x: window.pageXOffset, y: window.pageYOffset };\n}\n\nSVG.Element.prototype.draw.extend('rect', Object.assign({},\n    SVG.Element.prototype.draw.plugins.rect,\n    {\n        transform: transform,\n    },\n));\n\nSVG.Element.prototype.draw.extend('polyline', Object.assign({},\n    SVG.Element.prototype.draw.plugins.polyline,\n    {\n        transform: transform,\n    },\n));\n\nSVG.Element.prototype.draw.extend('polygon', Object.assign({},\n    SVG.Element.prototype.draw.plugins.polygon,\n    {\n        transform: transform,\n    },\n));\n\n// Fix method drawCircles\nfunction drawCircles(): void {\n    const array = this.el.array().valueOf();\n\n    this.set.each(function (): void {\n        this.remove();\n    });\n\n    this.set.clear();\n\n    for (let i = 0; i < array.length - 1; ++i) {\n        [this.p.x] = array[i];\n        [, this.p.y] = array[i];\n\n        const p = this.p.matrixTransform(\n            this.parent.node.getScreenCTM()\n                .inverse()\n                .multiply(this.el.node.getScreenCTM()),\n        );\n\n        this.set.add(\n            this.parent\n                .circle(5)\n                .stroke({\n                    width: 1,\n                }).fill('#ccc')\n                .center(p.x, p.y),\n        );\n    }\n}\n\nSVG.Element.prototype.draw.extend('line', Object.assign({},\n    SVG.Element.prototype.draw.plugins.line,\n    {\n        drawCircles: drawCircles,\n    }\n));\n\nSVG.Element.prototype.draw.extend('polyline', Object.assign({},\n    SVG.Element.prototype.draw.plugins.polyline,\n    {\n        drawCircles: drawCircles,\n    }\n));\n\nSVG.Element.prototype.draw.extend('polygon', Object.assign({},\n    SVG.Element.prototype.draw.plugins.polygon,\n    {\n        drawCircles: drawCircles,\n    }\n));\n\n// Fix method drag\nconst originalDraggable = SVG.Element.prototype.draggable;\nSVG.Element.prototype.draggable = function constructor(...args: any): any {\n    let handler = this.remember('_draggable');\n    if (!handler) {\n        originalDraggable.call(this, ...args);\n        handler = this.remember('_draggable');\n        handler.drag = function(e: any) {\n            this.m = this.el.node.getScreenCTM().inverse();\n            handler.constructor.prototype.drag.call(this, e);\n        }\n    } else {\n        originalDraggable.call(this, ...args);\n    }\n\n    return this;\n};\nfor (const key of Object.keys(originalDraggable)) {\n    SVG.Element.prototype.draggable[key] = originalDraggable[key];\n}\n\n// Fix method resize\nconst originalResize = SVG.Element.prototype.resize;\nSVG.Element.prototype.resize = function constructor(...args: any): any {\n    let handler = this.remember('_resizeHandler');\n    if (!handler) {\n        originalResize.call(this, ...args);\n        handler = this.remember('_resizeHandler');\n        handler.update = function(e: any) {\n            this.m = this.el.node.getScreenCTM().inverse();\n            handler.constructor.prototype.update.call(this, e);\n        }\n    } else {\n        originalResize.call(this, ...args);\n    }\n\n    return this;\n};\nfor (const key of Object.keys(originalResize)) {\n    SVG.Element.prototype.resize[key] = originalResize[key];\n}\n","/*\n* Copyright (C) 2019 Intel Corporation\n* SPDX-License-Identifier: MIT\n*/\n\n// Translate point array from the client coordinate system\n// to a coordinate system of a canvas\nexport function translateFromSVG(svg: SVGSVGElement, points: number[]): number[] {\n    const output = [];\n    const transformationMatrix = svg.getScreenCTM();\n    let pt = svg.createSVGPoint();\n    for (let i = 0; i < points.length - 1; i += 2) {\n        pt.x = points[i];\n        pt.y = points[i + 1];\n        pt = pt.matrixTransform(transformationMatrix);\n        output.push(pt.x, pt.y);\n    }\n\n    return output;\n}\n\n// Translate point array from a coordinate system of a canvas\n// to the client coordinate system\nexport function translateToSVG(svg: SVGSVGElement, points: number[]): number[] {\n    const output = [];\n    const transformationMatrix = svg.getScreenCTM().inverse();\n    let pt = svg.createSVGPoint();\n    for (let i = 0; i < points.length; i += 2) {\n        pt.x = points[i];\n        pt.y = points[i + 1];\n        pt = pt.matrixTransform(transformationMatrix);\n        output.push(pt.x, pt.y);\n    }\n\n    return output;\n}\n","/*\n* Copyright (C) 2019 Intel Corporation\n* SPDX-License-Identifier: MIT\n*/\n\nimport * as SVG from 'svg.js';\nimport consts from './consts';\nimport 'svg.draw.js';\nimport './svg.patch';\n\nimport {\n    DrawData,\n    Geometry,\n} from './canvasModel';\n\nimport {\n    translateToSVG,\n    translateFromSVG,\n} from './shared';\n\nexport interface DrawHandler {\n    draw(drawData: DrawData, geometry: Geometry): void;\n}\n\nexport class DrawHandlerImpl implements DrawHandler {\n    private onDrawDone: any; // callback is used to notify about creating new shape\n    private canvas: SVG.Container;\n    private background: SVGSVGElement;\n    private crosshair: {\n        x: SVG.Line;\n        y: SVG.Line;\n    };\n    private drawData: DrawData;\n    private geometry: Geometry;\n    private drawInstance: any;\n\n\n    private addCrosshair(): void {\n        this.crosshair = {\n            x: this.canvas.line(0, 0, this.canvas.node.clientWidth, 0).attr({\n                'stroke-width': consts.BASE_STROKE_WIDTH / (2 * this.geometry.scale),\n                zOrder: Number.MAX_SAFE_INTEGER,\n            }).addClass('cvat_canvas_crosshair'),\n            y: this.canvas.line(0, 0, 0, this.canvas.node.clientHeight).attr({\n                'stroke-width': consts.BASE_STROKE_WIDTH / (2 * this.geometry.scale),\n                zOrder: Number.MAX_SAFE_INTEGER,\n            }).addClass('cvat_canvas_crosshair'),\n        };\n    }\n\n    private removeCrosshair(): void {\n        this.crosshair.x.remove();\n        this.crosshair.y.remove();\n        this.crosshair = null;\n    }\n\n    private initDrawing(): void {\n        if (this.drawData.crosshair) {\n            this.addCrosshair();\n        }\n    }\n\n    private closeDrawing(): void {\n        if (this.crosshair) {\n            this.removeCrosshair();\n        }\n\n        if (this.drawInstance) {\n            if (this.drawData.shapeType === 'rectangle') {\n                this.drawInstance.draw('cancel');\n            } else {\n                this.drawInstance.draw('done');\n            }\n\n            // We should check again because state can be changed in 'cancel' and 'done'\n            if (this.drawInstance) {\n                this.drawInstance.remove();\n                this.drawInstance = null;\n            }\n        }\n    }\n\n    private drawBox(): void {\n        this.drawInstance = this.canvas.rect();\n        this.drawInstance.draw({\n            snapToGrid: 0.1,\n        }).addClass('cvat_canvas_shape_drawing').attr({\n            'stroke-width': consts.BASE_STROKE_WIDTH / this.geometry.scale,\n        }).on('drawstop', (e: Event): void => {\n            const frameWidth = this.geometry.image.width;\n            const frameHeight = this.geometry.image.height;\n            const bbox = (e.target as SVGRectElement).getBBox();\n\n            let [xtl, ytl, xbr, ybr] = translateFromSVG(\n                this.canvas.node as any as SVGSVGElement,\n                [bbox.x, bbox.y, bbox.x + bbox.width, bbox.y + bbox.height],\n            );\n\n            ([xtl, ytl, xbr, ybr] = translateToSVG(\n                this.background,\n                [xtl, ytl, xbr, ybr],\n            ));\n\n            xtl = Math.min(Math.max(xtl, 0), frameWidth);\n            xbr = Math.min(Math.max(xbr, 0), frameWidth);\n            ytl = Math.min(Math.max(ytl, 0), frameHeight);\n            ybr = Math.min(Math.max(ybr, 0), frameHeight);\n\n            if ((xbr - xtl) * (ybr - ytl) >= consts.AREA_THRESHOLD) {\n                this.onDrawDone({\n                    points: [xtl, ytl, xbr, ybr],\n                });\n            } else {\n                this.onDrawDone(null);\n            }\n        });\n    }\n\n    private drawPolyshape(): void {\n        let size = this.drawData.numberOfPoints;\n        const sizeDecrement = function sizeDecrement(): void {\n            if (!--size) {\n                this.drawInstance.draw('done');\n            }\n        }.bind(this);\n\n        const sizeIncrement = function sizeIncrement(): void {\n            size++;\n        };\n\n        if (this.drawData.numberOfPoints) {\n            this.drawInstance.on('drawstart', sizeDecrement);\n            this.drawInstance.on('drawpoint', sizeDecrement);\n            this.drawInstance.on('undopoint', sizeIncrement);\n        }\n\n        // Add ability to cancel the latest drawn point\n        const handleUndo = function handleUndo(e: MouseEvent): void {\n            if (e.which === 3) {\n                e.stopPropagation();\n                e.preventDefault();\n                this.drawInstance.draw('undo');\n            }\n        }.bind(this);\n        this.canvas.node.addEventListener('mousedown', handleUndo);\n\n        // Add ability to draw shapes by sliding\n        // We need to remember last drawn point\n        // to implementation of slide drawing\n        const lastDrawnPoint: {\n            x: number;\n            y: number;\n        } = {\n            x: null,\n            y: null,\n        };\n\n        const handleSlide = function handleSlide(e: MouseEvent): void {\n            // TODO: Use enumeration after typification cvat-core\n            if (e.shiftKey && ['polygon', 'polyline'].includes(this.drawData.shapeType)) {\n                if (lastDrawnPoint.x === null || lastDrawnPoint.y === null) {\n                    this.drawInstance.draw('point', e);\n                } else {\n                    const deltaTreshold = 15;\n                    const delta = Math.sqrt(\n                        ((e.clientX - lastDrawnPoint.x) ** 2)\n                        + ((e.clientY - lastDrawnPoint.y) ** 2),\n                    );\n                    if (delta > deltaTreshold) {\n                        this.drawInstance.draw('point', e);\n                    }\n                }\n            }\n        }.bind(this);\n        this.canvas.node.addEventListener('mousemove', handleSlide);\n\n        // We need scale just drawn points\n        const self = this;\n        this.drawInstance.on('drawstart drawpoint', (e: CustomEvent): void => {\n            self.transform(self.geometry);\n            lastDrawnPoint.x = e.detail.event.clientX;\n            lastDrawnPoint.y = e.detail.event.clientY;\n        });\n\n        this.drawInstance.on('drawstop', (): void => {\n            self.canvas.node.removeEventListener('mousedown', handleUndo);\n            self.canvas.node.removeEventListener('mousemove', handleSlide);\n        });\n\n        this.drawInstance.on('drawdone', (e: CustomEvent): void => {\n            let points = translateFromSVG(\n                this.canvas.node as any as SVGSVGElement,\n                (e.target as SVGElement)\n                    .getAttribute('points')\n                    .split(/[,\\s]/g)\n                    .map((coord): number => +coord),\n            );\n\n            points = translateToSVG(\n                this.background,\n                points,\n            );\n\n            const bbox = {\n                xtl: Number.MAX_SAFE_INTEGER,\n                ytl: Number.MAX_SAFE_INTEGER,\n                xbr: Number.MAX_SAFE_INTEGER,\n                ybr: Number.MAX_SAFE_INTEGER,\n            };\n\n            const frameWidth = this.geometry.image.width;\n            const frameHeight = this.geometry.image.height;\n            for (let i = 0; i < points.length - 1; i += 2) {\n                points[i] = Math.min(Math.max(points[i], 0), frameWidth);\n                points[i + 1] = Math.min(Math.max(points[i + 1], 0), frameHeight);\n\n                bbox.xtl = Math.min(bbox.xtl, points[i]);\n                bbox.ytl = Math.min(bbox.ytl, points[i + 1]);\n                bbox.xbr = Math.max(bbox.xbr, points[i]);\n                bbox.ybr = Math.max(bbox.ybr, points[i + 1]);\n            }\n\n            if (this.drawData.shapeType === 'polygon'\n                && ((bbox.xbr - bbox.xtl) * (bbox.ybr - bbox.ytl) >= consts.AREA_THRESHOLD)) {\n                this.onDrawDone({\n                    points,\n                });\n            } else if (this.drawData.shapeType === 'polyline'\n                && ((bbox.xbr - bbox.xtl) >= consts.SIZE_THRESHOLD\n                || (bbox.ybr - bbox.ytl) >= consts.SIZE_THRESHOLD)) {\n                this.onDrawDone({\n                    points,\n                });\n            } else if (this.drawData.shapeType === 'points') {\n                this.onDrawDone({\n                    points,\n                });\n            } else {\n                this.onDrawDone(null);\n            }\n        });\n    }\n\n    private drawPolygon(): void {\n        this.drawInstance = (this.canvas as any).polygon().draw({\n            snapToGrid: 0.1,\n        }).addClass('cvat_canvas_shape_drawing').style({\n            'stroke-width': consts.BASE_STROKE_WIDTH / this.geometry.scale,\n        });\n\n        this.drawPolyshape();\n    }\n\n    private drawPolyline(): void {\n        this.drawInstance = (this.canvas as any).polyline().draw({\n            snapToGrid: 0.1,\n        }).addClass('cvat_canvas_shape_drawing').style({\n            'stroke-width': consts.BASE_STROKE_WIDTH / this.geometry.scale,\n            'fill-opacity': 0,\n        });\n\n        this.drawPolyshape();\n    }\n\n    private drawPoints(): void {\n        this.drawInstance = (this.canvas as any).polygon().draw({\n            snapToGrid: 0.1,\n        }).addClass('cvat_canvas_shape_drawing').style({\n            'stroke-width': 0,\n            opacity: 0,\n        });\n\n        this.drawPolyshape();\n    }\n\n    private startDraw(): void {\n        // TODO: Use enums after typification cvat-core\n        if (this.drawData.shapeType === 'rectangle') {\n            this.drawBox();\n        } else if (this.drawData.shapeType === 'polygon') {\n            this.drawPolygon();\n        } else if (this.drawData.shapeType === 'polyline') {\n            this.drawPolyline();\n        } else if (this.drawData.shapeType === 'points') {\n            this.drawPoints();\n        }\n    }\n\n    public constructor(onDrawDone: any, canvas: SVG.Container, background: SVGSVGElement) {\n        this.onDrawDone = onDrawDone;\n        this.canvas = canvas;\n        this.background = background;\n        this.drawData = null;\n        this.geometry = null;\n        this.crosshair = null;\n        this.drawInstance = null;\n\n        this.canvas.node.addEventListener('mousemove', (e): void => {\n            if (this.crosshair) {\n                const [x, y] = translateToSVG(\n                    this.canvas.node as any as SVGSVGElement,\n                    [e.clientX, e.clientY],\n                );\n\n                this.crosshair.x.attr({\n                    y1: y,\n                    y2: y,\n                });\n\n                this.crosshair.y.attr({\n                    x1: x,\n                    x2: x,\n                });\n            }\n        });\n    }\n\n    public transform(geometry: Geometry): void {\n        this.geometry = geometry;\n\n        if (this.crosshair) {\n            this.crosshair.x.attr({\n                'stroke-width': consts.BASE_STROKE_WIDTH / (2 * geometry.scale),\n            });\n            this.crosshair.y.attr({\n                'stroke-width': consts.BASE_STROKE_WIDTH / (2 * geometry.scale),\n            });\n        }\n\n        if (this.drawInstance) {\n            this.drawInstance.draw('transform');\n            this.drawInstance.style({\n                'stroke-width': consts.BASE_STROKE_WIDTH / geometry.scale,\n            });\n\n            const paintHandler = this.drawInstance.remember('_paintHandler');\n\n            for (const point of (paintHandler as any).set.members) {\n                point.style(\n                    'stroke-width',\n                    `${consts.BASE_STROKE_WIDTH / (3 * geometry.scale)}`,\n                );\n                point.attr(\n                    'r',\n                    `${consts.BASE_POINT_SIZE / (2 * geometry.scale)}`,\n                );\n            }\n        }\n    }\n\n    public draw(drawData: DrawData, geometry: Geometry): void {\n        this.geometry = geometry;\n\n        if (drawData.enabled) {\n            this.drawData = drawData;\n            this.initDrawing();\n            this.startDraw();\n        } else {\n            this.closeDrawing();\n            this.drawData = drawData;\n        }\n    }\n}\n\n// TODO: handle initial state\n","/*\n* Copyright (C) 2019 Intel Corporation\n* SPDX-License-Identifier: MIT\n*/\n\n// Disable till full implementation\n/* eslint class-methods-use-this: \"off\" */\n\nimport * as SVG from 'svg.js';\n\n// tslint:disable-next-line: ordered-imports\nimport 'svg.draggable.js';\nimport 'svg.resize.js';\nimport 'svg.select.js';\n\nimport { CanvasController } from './canvasController';\nimport { Listener, Master } from './master';\nimport { DrawHandler, DrawHandlerImpl } from './drawHandler';\nimport { translateToSVG, translateFromSVG } from './shared';\nimport consts from './consts';\nimport {\n    CanvasModel,\n    Geometry,\n    Size,\n    UpdateReasons,\n    FocusData,\n    FrameZoom,\n    ActiveElement,\n    DrawData,\n} from './canvasModel';\n\nexport interface CanvasView {\n    html(): HTMLDivElement;\n}\n\n\ninterface ShapeDict {\n    [index: number]: SVG.Shape;\n}\n\ninterface TextDict {\n    [index: number]: SVG.Text;\n}\n\nenum Mode {\n    IDLE = 'idle',\n    DRAG = 'drag',\n    RESIZE = 'resize',\n    DRAW = 'draw',\n}\n\nfunction darker(color: string, percentage: number): string {\n    const R = Math.round(parseInt(color.slice(1, 3), 16) * (1 - percentage / 100));\n    const G = Math.round(parseInt(color.slice(3, 5), 16) * (1 - percentage / 100));\n    const B = Math.round(parseInt(color.slice(5, 7), 16) * (1 - percentage / 100));\n\n    const rHex = Math.max(0, R).toString(16);\n    const gHex = Math.max(0, G).toString(16);\n    const bHex = Math.max(0, B).toString(16);\n\n    return `#${rHex.length === 1 ? `0${rHex}` : rHex}`\n        + `${gHex.length === 1 ? `0${gHex}` : gHex}`\n        + `${bHex.length === 1 ? `0${bHex}` : bHex}`;\n}\n\nexport class CanvasViewImpl implements CanvasView, Listener {\n    private loadingAnimation: SVGSVGElement;\n    private text: SVGSVGElement;\n    private adoptedText: SVG.Container;\n    private background: SVGSVGElement;\n    private grid: SVGSVGElement;\n    private content: SVGSVGElement;\n    private adoptedContent: SVG.Container;\n    private canvas: HTMLDivElement;\n    private gridPath: SVGPathElement;\n    private gridPattern: SVGPatternElement;\n    private controller: CanvasController;\n    private svgShapes: ShapeDict;\n    private svgTexts: TextDict;\n    private drawHandler: DrawHandler;\n    private activeElement: {\n        state: any;\n        attributeID: number;\n    };\n\n    private mode: Mode;\n\n    private onDrawDone(data: Record<string, any>): void {\n        if (data) {\n            const event: CustomEvent = new CustomEvent('canvas.drawn', {\n                bubbles: false,\n                cancelable: true,\n                detail: {\n                    // eslint-disable-next-line new-cap\n                    state: new this.controller.objectStateClass(data),\n                },\n            });\n\n            this.canvas.dispatchEvent(event);\n        } else {\n            const event: CustomEvent = new CustomEvent('canvas.canceled', {\n                bubbles: false,\n                cancelable: true,\n            });\n\n            this.canvas.dispatchEvent(event);\n        }\n\n        this.controller.draw({\n            enabled: false,\n        });\n    }\n\n    public constructor(model: CanvasModel & Master, controller: CanvasController) {\n        this.controller = controller;\n        this.svgShapes = {};\n        this.svgTexts = {};\n        this.activeElement = null;\n        this.mode = Mode.IDLE;\n\n        // Create HTML elements\n        this.loadingAnimation = window.document\n            .createElementNS('http://www.w3.org/2000/svg', 'svg');\n        this.text = window.document.createElementNS('http://www.w3.org/2000/svg', 'svg');\n        this.adoptedText = (SVG.adopt((this.text as any as HTMLElement)) as SVG.Container);\n        this.background = window.document.createElementNS('http://www.w3.org/2000/svg', 'svg');\n\n        this.grid = window.document.createElementNS('http://www.w3.org/2000/svg', 'svg');\n        this.gridPath = window.document.createElementNS('http://www.w3.org/2000/svg', 'path');\n        this.gridPattern = window.document.createElementNS('http://www.w3.org/2000/svg', 'pattern');\n\n        this.content = window.document.createElementNS('http://www.w3.org/2000/svg', 'svg');\n        this.adoptedContent = (SVG.adopt((this.content as any as HTMLElement)) as SVG.Container);\n        this.drawHandler = new DrawHandlerImpl(\n            this.onDrawDone.bind(this),\n            this.adoptedContent,\n            this.background,\n        );\n        this.canvas = window.document.createElement('div');\n\n        const loadingCircle: SVGCircleElement = window.document\n            .createElementNS('http://www.w3.org/2000/svg', 'circle');\n        const gridDefs: SVGDefsElement = window.document\n            .createElementNS('http://www.w3.org/2000/svg', 'defs');\n        const gridRect: SVGRectElement = window.document\n            .createElementNS('http://www.w3.org/2000/svg', 'rect');\n\n        // Setup loading animation\n        this.loadingAnimation.setAttribute('id', 'cvat_canvas_loading_animation');\n        loadingCircle.setAttribute('id', 'cvat_canvas_loading_circle');\n        loadingCircle.setAttribute('r', '30');\n        loadingCircle.setAttribute('cx', '50%');\n        loadingCircle.setAttribute('cy', '50%');\n\n        // Setup grid\n        this.grid.setAttribute('id', 'cvat_canvas_grid');\n        this.grid.setAttribute('version', '2');\n        this.gridPath.setAttribute('d', 'M 1000 0 L 0 0 0 1000');\n        this.gridPath.setAttribute('fill', 'none');\n        this.gridPath.setAttribute('stroke-width', '1.5');\n        this.gridPattern.setAttribute('id', 'cvat_canvas_grid_pattern');\n        this.gridPattern.setAttribute('width', '100');\n        this.gridPattern.setAttribute('height', '100');\n        this.gridPattern.setAttribute('patternUnits', 'userSpaceOnUse');\n        gridRect.setAttribute('width', '100%');\n        gridRect.setAttribute('height', '100%');\n        gridRect.setAttribute('fill', 'url(#cvat_canvas_grid_pattern)');\n\n        // Setup content\n        this.text.setAttribute('id', 'cvat_canvas_text_content');\n        this.background.setAttribute('id', 'cvat_canvas_background');\n        this.content.setAttribute('id', 'cvat_canvas_content');\n\n        // Setup wrappers\n        this.canvas.setAttribute('id', 'cvat_canvas_wrapper');\n\n        // Unite created HTML elements together\n        this.loadingAnimation.appendChild(loadingCircle);\n        this.grid.appendChild(gridDefs);\n        this.grid.appendChild(gridRect);\n\n        gridDefs.appendChild(this.gridPattern);\n        this.gridPattern.appendChild(this.gridPath);\n\n        this.canvas.appendChild(this.loadingAnimation);\n        this.canvas.appendChild(this.text);\n        this.canvas.appendChild(this.background);\n        this.canvas.appendChild(this.grid);\n        this.canvas.appendChild(this.content);\n\n\n        // A little hack to get size after first mounting\n        // http://www.backalleycoder.com/2012/04/25/i-want-a-damnodeinserted/\n        const self = this;\n        const canvasFirstMounted = (event: AnimationEvent): void => {\n            if (event.animationName === 'loadingAnimation') {\n                const { geometry } = this.controller;\n                geometry.canvas = {\n                    height: self.canvas.clientHeight,\n                    width: self.canvas.clientWidth,\n                };\n\n                this.controller.geometry = geometry;\n                self.canvas.removeEventListener('animationstart', canvasFirstMounted);\n            }\n        };\n\n        this.canvas.addEventListener('animationstart', canvasFirstMounted);\n\n        this.content.addEventListener('dblclick', (): void => {\n            self.controller.fit();\n        });\n\n        this.content.addEventListener('mousedown', (event): void => {\n            if ((event.which === 1 && this.mode === Mode.IDLE) || (event.which === 2)) {\n                self.controller.enableDrag(event.clientX, event.clientY);\n            }\n        });\n\n        this.content.addEventListener('mousemove', (event): void => {\n            self.controller.drag(event.clientX, event.clientY);\n        });\n\n        window.document.addEventListener('mouseup', (event): void => {\n            if (event.which === 1 || event.which === 2) {\n                self.controller.disableDrag();\n            }\n        });\n\n        this.content.addEventListener('wheel', (event): void => {\n            const point = translateToSVG(self.background, [event.clientX, event.clientY]);\n            self.controller.zoom(point[0], point[1], event.deltaY > 0 ? -1 : 1);\n            event.preventDefault();\n        });\n\n        this.content.addEventListener('mousemove', (e): void => {\n            if (this.mode !== Mode.IDLE) return;\n\n            const [x, y] = translateToSVG(this.background, [e.clientX, e.clientY]);\n            const event: CustomEvent = new CustomEvent('canvas.moved', {\n                bubbles: false,\n                cancelable: true,\n                detail: {\n                    x,\n                    y,\n                    objects: this.controller.objects,\n                },\n            });\n\n            this.canvas.dispatchEvent(event);\n        });\n\n        this.content.oncontextmenu = (): boolean => false;\n        model.subscribe(this);\n    }\n\n    public notify(model: CanvasModel & Master, reason: UpdateReasons): void {\n        function transform(geometry: Geometry): void {\n            // Transform canvas\n            for (const obj of [this.background, this.grid, this.loadingAnimation, this.content]) {\n                obj.style.transform = `scale(${geometry.scale}) rotate(${geometry.angle}deg)`;\n            }\n\n            // Transform grid\n            this.gridPath.setAttribute('stroke-width', `${consts.BASE_STROKE_WIDTH / (2 * geometry.scale)}px`);\n\n            // Transform all shape points\n            for (const element of window.document.getElementsByClassName('svg_select_points')) {\n                element.setAttribute(\n                    'stroke-width',\n                    `${consts.BASE_STROKE_WIDTH / (3 * geometry.scale)}`,\n                );\n                element.setAttribute(\n                    'r',\n                    `${consts.BASE_POINT_SIZE / (2 * geometry.scale)}`,\n                );\n            }\n\n            for (const element of\n                window.document.getElementsByClassName('cvat_canvas_selected_point')) {\n                element.setAttribute(\n                    'stroke-width',\n                    `${+element.getAttribute('stroke-width') * 2}`,\n                );\n            }\n\n            // Transform all drawn shapes\n            for (const key in this.svgShapes) {\n                if (Object.prototype.hasOwnProperty.call(this.svgShapes, key)) {\n                    const object = this.svgShapes[key];\n                    if (object.attr('stroke-width')) {\n                        object.attr({\n                            'stroke-width': consts.BASE_STROKE_WIDTH / (geometry.scale),\n                        });\n                    }\n                }\n            }\n\n            // Transform all text\n            for (const key in this.svgShapes) {\n                if (Object.prototype.hasOwnProperty.call(this.svgShapes, key)\n                    && Object.prototype.hasOwnProperty.call(this.svgTexts, key)) {\n                    this.updateTextPosition(\n                        this.svgTexts[key],\n                        this.svgShapes[key],\n                    );\n                }\n            }\n\n            // Transform handlers\n            this.drawHandler.transform(geometry);\n        }\n\n        function resize(geometry: Geometry): void {\n            for (const obj of [this.background, this.grid, this.loadingAnimation]) {\n                obj.style.width = `${geometry.image.width}px`;\n                obj.style.height = `${geometry.image.height}px`;\n            }\n\n            for (const obj of [this.content, this.text]) {\n                obj.style.width = `${geometry.image.width + geometry.offset * 2}px`;\n                obj.style.height = `${geometry.image.height + geometry.offset * 2}px`;\n            }\n        }\n\n        function move(geometry: Geometry): void {\n            for (const obj of [this.background, this.grid, this.loadingAnimation]) {\n                obj.style.top = `${geometry.top}px`;\n                obj.style.left = `${geometry.left}px`;\n            }\n\n            for (const obj of [this.content, this.text]) {\n                obj.style.top = `${geometry.top - geometry.offset}px`;\n                obj.style.left = `${geometry.left - geometry.offset}px`;\n            }\n\n            // Transform handlers\n            this.drawHandler.transform(geometry);\n        }\n\n        function computeFocus(focusData: FocusData, geometry: Geometry): void {\n            // This computation cann't be done in the model because of lack of data\n            const object = this.svgShapes[focusData.clientID];\n            if (!object) {\n                return;\n            }\n\n            // First of all, compute and apply scale\n\n            let scale = null;\n            const bbox: SVG.BBox = object.node.getBBox();\n            if ((geometry.angle / 90) % 2) {\n                // 90, 270, ..\n                scale = Math.min(Math.max(Math.min(\n                    geometry.canvas.width / bbox.height,\n                    geometry.canvas.height / bbox.width,\n                ), FrameZoom.MIN), FrameZoom.MAX);\n            } else {\n                scale = Math.min(Math.max(Math.min(\n                    geometry.canvas.width / bbox.width,\n                    geometry.canvas.height / bbox.height,\n                ), FrameZoom.MIN), FrameZoom.MAX);\n            }\n\n            transform.call(this, Object.assign({}, geometry, {\n                scale,\n            }));\n\n            const [x, y] = translateFromSVG(this.content, [\n                bbox.x + bbox.width / 2,\n                bbox.y + bbox.height / 2,\n            ]);\n\n            const [cx, cy] = [\n                this.canvas.clientWidth / 2 + this.canvas.offsetLeft,\n                this.canvas.clientHeight / 2 + this.canvas.offsetTop,\n            ];\n\n            const dragged = Object.assign({}, geometry, {\n                top: geometry.top + cy - y,\n                left: geometry.left + cx - x,\n                scale,\n            });\n\n            this.controller.geometry = dragged;\n            move.call(this, dragged);\n        }\n\n        function setupObjects(objects: any[], geometry: Geometry): void {\n            const ctm = this.content.getScreenCTM()\n                .inverse().multiply(this.background.getScreenCTM());\n\n            this.deactivate();\n\n            // TODO: Compute difference\n\n            // Instead of simple clearing let's remove all objects properly\n            for (const id of Object.keys(this.svgShapes)) {\n                if (id in this.svgTexts) {\n                    this.svgTexts[id].remove();\n                }\n\n                this.svgShapes[id].remove();\n            }\n\n            this.svgTexts = {};\n            this.svgShapes = {};\n\n            this.addObjects(ctm, objects, geometry);\n            // TODO: Update objects\n            // TODO: Delete objects\n        }\n\n        const { geometry } = this.controller;\n        if (reason === UpdateReasons.IMAGE) {\n            if (!model.image.length) {\n                this.loadingAnimation.classList.remove('cvat_canvas_hidden');\n            } else {\n                this.loadingAnimation.classList.add('cvat_canvas_hidden');\n                this.background.style.backgroundImage = `url(\"${model.image}\")`;\n                move.call(this, geometry);\n                resize.call(this, geometry);\n                transform.call(this, geometry);\n            }\n        } else if (reason === UpdateReasons.ZOOM || reason === UpdateReasons.FIT) {\n            move.call(this, geometry);\n            transform.call(this, geometry);\n        } else if (reason === UpdateReasons.MOVE) {\n            move.call(this, geometry);\n        } else if (reason === UpdateReasons.OBJECTS) {\n            setupObjects.call(this, this.controller.objects, geometry);\n            const event: CustomEvent = new CustomEvent('canvas.setup');\n            this.canvas.dispatchEvent(event);\n        } else if (reason === UpdateReasons.GRID) {\n            const size: Size = geometry.grid;\n            this.gridPattern.setAttribute('width', `${size.width}`);\n            this.gridPattern.setAttribute('height', `${size.height}`);\n        } else if (reason === UpdateReasons.FOCUS) {\n            computeFocus.call(this, this.controller.focusData, geometry);\n        } else if (reason === UpdateReasons.ACTIVATE) {\n            this.activate(geometry, this.controller.activeElement);\n        } else if (reason === UpdateReasons.DRAW) {\n            const data: DrawData = this.controller.drawData;\n            if (data.enabled) {\n                this.mode = Mode.DRAW;\n                this.deactivate();\n            } else {\n                this.mode = Mode.IDLE;\n            }\n            this.drawHandler.draw(data, geometry);\n        }\n    }\n\n    public html(): HTMLDivElement {\n        return this.canvas;\n    }\n\n    private addObjects(ctm: SVGMatrix, states: any[], geometry: Geometry): void {\n        for (const state of states) {\n            if (state.objectType === 'tag') {\n                this.addTag(state, geometry);\n            } else {\n                const points: number[] = (state.points as number[]);\n                const translatedPoints: number[] = [];\n                for (let i = 0; i <= points.length - 1; i += 2) {\n                    let point: SVGPoint = this.background.createSVGPoint();\n                    point.x = points[i];\n                    point.y = points[i + 1];\n                    point = point.matrixTransform(ctm);\n                    translatedPoints.push(point.x, point.y);\n                }\n\n                // TODO: Use enums after typification cvat-core\n                if (state.shapeType === 'rectangle') {\n                    this.svgShapes[state.clientID] = this\n                        .addRect(translatedPoints, state, geometry);\n                } else {\n                    const stringified = translatedPoints.reduce(\n                        (acc: string, val: number, idx: number): string => {\n                            if (idx % 2) {\n                                return `${acc}${val} `;\n                            }\n\n                            return `${acc}${val},`;\n                        }, '',\n                    );\n\n                    if (state.shapeType === 'polygon') {\n                        this.svgShapes[state.clientID] = this\n                            .addPolygon(stringified, state, geometry);\n                    } else if (state.shapeType === 'polyline') {\n                        this.svgShapes[state.clientID] = this\n                            .addPolyline(stringified, state, geometry);\n                    } else if (state.shapeType === 'points') {\n                        this.svgShapes[state.clientID] = this\n                            .addPoints(stringified, state, geometry);\n                    }\n                }\n\n                // TODO: Use enums after typification cvat-core\n                if (state.visibility === 'all') {\n                    this.svgTexts[state.clientID] = this.addText(state);\n                    this.updateTextPosition(\n                        this.svgTexts[state.clientID],\n                        this.svgShapes[state.clientID],\n                    );\n                }\n            }\n        }\n    }\n\n    private deactivate(): void {\n        if (this.activeElement) {\n            const { state } = this.activeElement;\n            const shape = this.svgShapes[this.activeElement.state.clientID];\n            (shape as any).draggable(false);\n\n            if (state.shapeType !== 'points') {\n                this.selectize(false, shape, null);\n            }\n\n            (shape as any).resize(false);\n\n            // Hide text only if it is hidden by settings\n            const text = this.svgTexts[state.clientID];\n            if (text && state.visibility === 'shape') {\n                text.remove();\n                delete this.svgTexts[state.clientID];\n            }\n            this.activeElement = null;\n        }\n    }\n\n    private selectize(value: boolean, shape: SVG.Element, geometry: Geometry): void {\n        if (value) {\n            (shape as any).selectize(value, {\n                deepSelect: true,\n                pointSize: consts.BASE_POINT_SIZE / geometry.scale,\n                rotationPoint: false,\n                pointType(cx: number, cy: number): SVG.Circle {\n                    const circle: SVG.Circle = this.nested\n                        .circle(this.options.pointSize)\n                        .stroke('black')\n                        .fill(shape.node.getAttribute('fill'))\n                        .center(cx, cy)\n                        .attr({\n                            'stroke-width': consts.BASE_STROKE_WIDTH / (3 * geometry.scale),\n                        });\n\n                    circle.node.addEventListener('mouseenter', (): void => {\n                        circle.attr({\n                            'stroke-width': circle.attr('stroke-width') * 2,\n                        });\n\n                        circle.addClass('cvat_canvas_selected_point');\n                    });\n\n                    circle.node.addEventListener('mouseleave', (): void => {\n                        circle.attr({\n                            'stroke-width': circle.attr('stroke-width') / 2,\n                        });\n\n                        circle.removeClass('cvat_canvas_selected_point');\n                    });\n\n                    return circle;\n                },\n            });\n        } else {\n            (shape as any).selectize(false, {\n                deepSelect: true,\n            });\n        }\n    }\n\n    private activate(geometry: Geometry, activeElement: ActiveElement): void {\n        // Check if other element have been already activated\n        if (this.activeElement) {\n            // Check if it is the same element\n            if (this.activeElement.state.clientID === activeElement.clientID) {\n                return;\n            }\n\n            // Deactivate previous element\n            this.deactivate();\n        }\n\n        const state = this.controller.objects\n            .filter((el): boolean => el.clientID === activeElement.clientID)[0];\n        this.activeElement = {\n            attributeID: activeElement.attributeID,\n            state,\n        };\n\n        const shape = this.svgShapes[activeElement.clientID];\n        let text = this.svgTexts[activeElement.clientID];\n        // Draw text if it's hidden by default\n        if (!text && state.visibility === 'shape') {\n            text = this.addText(state);\n            this.svgTexts[state.clientID] = text;\n            this.updateTextPosition(\n                text,\n                shape,\n            );\n        }\n\n        const self = this;\n        this.content.append(shape.node);\n        (shape as any).draggable().on('dragstart', (): void => {\n            this.mode = Mode.DRAG;\n            if (text) {\n                text.addClass('cvat_canvas_hidden');\n            }\n        }).on('dragend', (): void => {\n            this.mode = Mode.IDLE;\n            if (text) {\n                text.removeClass('cvat_canvas_hidden');\n                self.updateTextPosition(\n                    text,\n                    shape,\n                );\n            }\n        });\n\n        if (state.shapeType !== 'points') {\n            this.selectize(true, shape, geometry);\n        }\n\n        (shape as any).resize().on('resizestart', (): void => {\n            this.mode = Mode.RESIZE;\n            if (text) {\n                text.addClass('cvat_canvas_hidden');\n            }\n        }).on('resizedone', (): void => {\n            this.mode = Mode.IDLE;\n            if (text) {\n                text.removeClass('cvat_canvas_hidden');\n                self.updateTextPosition(\n                    text,\n                    shape,\n                );\n            }\n        });\n    }\n\n    // Update text position after corresponding box has been moved, resized, etc.\n    private updateTextPosition(text: SVG.Text, shape: SVG.Shape): void {\n        let box = (shape.node as any).getBBox();\n\n        // Translate the whole box to the client coordinate system\n        const [x1, y1, x2, y2]: number[] = translateFromSVG(this.content, [\n            box.x,\n            box.y,\n            box.x + box.width,\n            box.y + box.height,\n        ]);\n\n        box = {\n            x: Math.min(x1, x2),\n            y: Math.min(y1, y2),\n            width: Math.max(x1, x2) - Math.min(x1, x2),\n            height: Math.max(y1, y2) - Math.min(y1, y2),\n        };\n\n        // Find the best place for a text\n        let [clientX, clientY]: number[] = [box.x + box.width, box.y];\n        if (clientX + (text.node as any as SVGTextElement)\n            .getBBox().width + consts.TEXT_MARGIN > this.canvas.offsetWidth) {\n            ([clientX, clientY] = [box.x, box.y]);\n        }\n\n        // Translate back to text SVG\n        const [x, y]: number[] = translateToSVG(this.text, [\n            clientX + consts.TEXT_MARGIN,\n            clientY,\n        ]);\n\n        // Finally draw a text\n        text.move(x, y);\n        for (const tspan of (text.lines() as any).members) {\n            tspan.attr('x', text.attr('x'));\n        }\n    }\n\n    private addText(state: any): SVG.Text {\n        const { label, clientID, attributes } = state;\n        const attrNames = label.attributes.reduce((acc: any, val: any): void => {\n            acc[val.id] = val.name;\n            return acc;\n        }, {});\n\n        return this.adoptedText.text((block): void => {\n            block.tspan(`${label.name} ${clientID}`).style('text-transform', 'uppercase');\n            for (const attrID of Object.keys(attributes)) {\n                block.tspan(`${attrNames[attrID]}: ${attributes[attrID]}`).attr({\n                    attrID,\n                    dy: '1em',\n                    x: 0,\n                });\n            }\n        }).move(0, 0).addClass('cvat_canvas_text');\n    }\n\n    private addRect(points: number[], state: any, geometry: Geometry): SVG.Rect {\n        const [xtl, ytl, xbr, ybr] = points;\n\n        return this.adoptedContent.rect().size(xbr - xtl, ybr - ytl).attr({\n            clientID: state.clientID,\n            'color-rendering': 'optimizeQuality',\n            fill: state.color,\n            'shape-rendering': 'geometricprecision',\n            stroke: darker(state.color, 50),\n            'stroke-width': consts.BASE_STROKE_WIDTH / geometry.scale,\n            zOrder: state.zOrder,\n        }).move(xtl, ytl)\n            .addClass('cvat_canvas_shape');\n    }\n\n    private addPolygon(points: string, state: any, geometry: Geometry): SVG.Polygon {\n        return this.adoptedContent.polygon(points).attr({\n            clientID: state.clientID,\n            'color-rendering': 'optimizeQuality',\n            fill: state.color,\n            'shape-rendering': 'geometricprecision',\n            stroke: darker(state.color, 50),\n            'stroke-width': consts.BASE_STROKE_WIDTH / geometry.scale,\n            zOrder: state.zOrder,\n        }).addClass('cvat_canvas_shape');\n    }\n\n    private addPolyline(points: string, state: any, geometry: Geometry): SVG.PolyLine {\n        return this.adoptedContent.polyline(points).attr({\n            clientID: state.clientID,\n            'color-rendering': 'optimizeQuality',\n            fill: state.color,\n            'shape-rendering': 'geometricprecision',\n            stroke: darker(state.color, 50),\n            'stroke-width': consts.BASE_STROKE_WIDTH / geometry.scale,\n            zOrder: state.zOrder,\n        }).addClass('cvat_canvas_shape');\n    }\n\n    private addPoints(points: string, state: any, geometry: Geometry): SVG.PolyLine {\n        const shape = this.adoptedContent.polyline(points).attr({\n            clientID: state.clientID,\n            'color-rendering': 'optimizeQuality',\n            fill: state.color,\n            'shape-rendering': 'geometricprecision',\n            zOrder: state.zOrder,\n        }).addClass('cvat_canvas_shape');\n\n        this.selectize(true, shape, geometry);\n        shape.remove = function remove(): void {\n            this.selectize(false, shape);\n            shape.constructor.prototype.remove.call(shape);\n        }.bind(this);\n        shape.attr('fill', 'none');\n\n        return shape;\n    }\n\n    private addTag(state: any, geometry: Geometry): void {\n        console.log(state, geometry);\n    }\n}\n","/*\n* Copyright (C) 2019 Intel Corporation\n* SPDX-License-Identifier: MIT\n*/\n\nimport {\n    CanvasModel,\n    CanvasModelImpl,\n    Rotation,\n    DrawData,\n} from './canvasModel';\n\nimport {\n    CanvasController,\n    CanvasControllerImpl,\n} from './canvasController';\n\nimport {\n    CanvasView,\n    CanvasViewImpl,\n} from './canvasView';\n\ninterface Canvas {\n    html(): HTMLDivElement;\n    setup(frameData: any, objectStates: any[]): void;\n    activate(clientID: number, attributeID?: number): void;\n    rotate(rotation: Rotation, remember?: boolean): void;\n    focus(clientID: number, padding?: number): void;\n    fit(): void;\n    grid(stepX: number, stepY: number): void;\n\n    draw(drawData: DrawData): void;\n    split(enabled?: boolean): void;\n    group(enabled?: boolean): void;\n    merge(enabled?: boolean): void;\n\n    cancel(): void;\n}\n\nclass CanvasImpl implements Canvas {\n    private model: CanvasModel;\n    private controller: CanvasController;\n    private view: CanvasView;\n\n    public constructor(ObjectStateClass: any) {\n        this.model = new CanvasModelImpl(ObjectStateClass);\n        this.controller = new CanvasControllerImpl(this.model);\n        this.view = new CanvasViewImpl(this.model, this.controller);\n    }\n\n    public html(): HTMLDivElement {\n        return this.view.html();\n    }\n\n    public setup(frameData: any, objectStates: any[]): void {\n        this.model.setup(frameData, objectStates);\n    }\n\n    public activate(clientID: number, attributeID: number = null): void {\n        this.model.activate(clientID, attributeID);\n    }\n\n    public rotate(rotation: Rotation, remember: boolean): void {\n        this.model.rotate(rotation, remember);\n    }\n\n    public focus(clientID: number, padding: number = 0): void {\n        this.model.focus(clientID, padding);\n    }\n\n    public fit(): void {\n        this.model.fit();\n    }\n\n    public grid(stepX: number, stepY: number): void {\n        this.model.grid(stepX, stepY);\n    }\n\n    public draw(drawData: DrawData): void {\n        this.model.draw(drawData);\n    }\n\n    public split(enabled: boolean = false): void {\n        this.model.split(enabled);\n    }\n\n    public group(enabled: boolean = false): void {\n        this.model.group(enabled);\n    }\n\n    public merge(enabled: boolean = false): void {\n        this.model.merge(enabled);\n    }\n\n    public cancel(): void {\n        this.model.cancel();\n    }\n}\n\nexport {\n    CanvasImpl as Canvas,\n    Rotation,\n};\n"],"sourceRoot":""}